crystal_doc_search_index_callback({"repository_name":"github.com/luckyframework/lucky","body":"[![github banner-short](https://user-images.githubusercontent.com/22394/26989908-dd99cc2c-4d22-11e7-9576-c6aeada2bd63.png)](http://luckyframework.org)\n\nThe goal: prevent bugs, forget about most performance issues, and spend more\ntime on code instead of debugging and fixing tests.\n\nIn summary, make writing stunning web applications fast, fun, and easy.\n\n## Coming from Rails?\n\n- [Ruby on Rails to Lucky on Crystal: Blazing fast, fewer bugs, and even more fun.\n  ](https://hackernoon.com/ruby-on-rails-to-lucky-on-crystal-blazing-fast-fewer-bugs-and-even-more-fun-104010913fec)\n\n## Try Lucky\n\nLucky has a [fresh new set of guides](https://luckyframework.org/guides/) that\nmake it easy to get started.\n\nFeel free to say hi or ask questions on our\n[chat room](https://gitter.im/luckyframework/Lobby).\n\n## Keep up-to-date\n\nKeep up to date by following [@luckyframework](https://twitter.com/luckyframework) on Twitter.\n\n## Documentation\n[API (master)](https://luckyframework.github.io/lucky/)\n\n## What's it look like?\n\n### JSON endpoint:\n\n```crystal\nclass Api::Users::Show < ApiAction\n  route do\n    json user_json\n  end\n\n  private def user_json\n    user = UserQuery.find(user_id)\n    {name: user.name, email: user.email}\n  end\nend\n```\n\n- `route` sets up a route for `\"/api/users/:user_id\"` automatically.\n- If you want you can set up custom routes like `get \"sign_in\"` for non REST routes.\n- A `user_id` method is generated because there is a `user_id` route parameter.\n- Use `json` to render JSON. [Extract\n  serializers](https://luckyframework.org/guides/writing-json-apis/#respond-with-json)\n  for reusable JSON responses.\n\n### Database models\n\n```crystal\n# Set up the model\nclass User < BaseModel\n  table :users do\n    column last_active_at : Time\n    column last_name : String\n    column nickname : String?\n  end\nend\n```\n\n- Sets up the columns that youâ€™d like to use, along with their types\n- You can add `?` to the type when the column can be `nil` . Crystal will then\n  help you remember not to call methods on it that won't work.\n- Lucky will set up presence validations for required fields\n  (`last_active_at` and `last_name` since they are not marked as nilable).\n\n### Querying the database\n\n```crystal\n# Add some methods to help query the database\nclass UserQuery < User::BaseQuery\n  def recently_active\n    last_active_at.gt(1.week.ago)\n  end\n\n  def sorted_by_last_name\n    last_name.lower.desc_order\n  end\nend\n\n# Query the database\nUserQuery.new.recently_active.sorted_by_last_name\n```\n\n- `User::BaseQuery` is automatically generated when you define a model. Inherit\n  from it to customize queries.\n- Set up named scopes with instance methods.\n- Lucky sets up methods for all the columns so that if you mistype a column\n  name it will tell you at compile-time.\n- Use the `lower` method on a `String` column to make sure Postgres sorts\n  everything in lowercase.\n- Use `gt` to get users last active greater than 1 week ago. Lucky has lots\n  of powerful abstractions for creating complex queries, and type specific\n  methods (like `lower`).\n\n### Rendering HTML:\n\n```crystal\nclass Users::Index < BrowserAction\n  route do\n    users = UserQuery.new.sorted_by_last_name\n    render IndexPage, users: users\n  end\nend\n\nclass Users::IndexPage < MainLayout\n  needs users : UserQuery\n\n  def content\n    render_new_user_button\n    render_user_list\n  end\n\n  private def render_new_user_button\n    link \"New User\", to: Users::New\n  end\n\n  private def render_user_list\n    ul class: \"user-list\" do\n      @users.each do |user|\n        li do\n          link user.name, to: Users::Show.with(user.id)\n          text \" - \"\n          text user.nickname || \"No Nickname\"\n        end\n      end\n    end\n  end\nend\n```\n\n- `needs users : UserQuery` tells the compiler that it must be passed users\n  of the type `UserQuery`.\n- If you forget to pass something that a page needs, it will let you know at\n  compile time. **Fewer bugs and faster debugging**.\n- Write tags with Crystal methods. Tags are automatically closed and\n  whitespace is removed.\n- Easily extract named methods since pages are made of regular classes and\n  methods. **This makes your HTML pages incredibly easy to read.**\n- Link to other pages with ease. Just use the action name: `Users::New`. Pass\n  params using `with`: `Users::Show.with(user.id)`. No more trying to remember path\n  helpers and whether the helper is pluralized or not - If you forget to pass a\n  param to a route, Lucky will let you know at compile-time.\n- Since we defined `column nickname : String?` as nilable, Lucky would fail\n  to compile the page if you just did `text user.nickname` since it disallows\n  printing `nil`. So instead we add a fallback `\"No Nickname\"`. **No more\n  accidentally printing empty text in HTML!**\n\n## Testing\n\nYou need to make sure to install the Crystal dependencies.\n\n1. Run `shards install`\n1. Run `crystal spec` from the project root.\n\n## Contributing\n\n1. Fork it ( https://github.com/luckyframework/web/fork )\n1. Create your feature branch (git checkout -b my-new-feature)\n1. Install docker and docker-compose: https://docs.docker.com/compose/install/\n1. Run `script/setup` to build the Docker containers with everything you need.\n1. Make your changes\n1. Make sure specs pass: `script/test`.\n1. Add a note to the CHANGELOG\n1. Commit your changes (git commit -am 'Add some feature')\n1. Push to the branch (git push origin my-new-feature)\n1. Create a new Pull Request\n\n> Run specific tests with `script/test <path_to_spec>`\n\n## Contributors\n\n- [paulcsmith](https://github.com/paulcsmith) Paul Smith - creator, maintainer\n\n## Thanks & attributions\n\n- SessionHandler, CookieHandler and FlashHandler are based on [Amber](https://github.com/amberframework/amber). Thank you to the Amber team!\n- Thanks to Rails for inspiring many of the ideas that are easy to take for\n  granted. Convention over configuration, removing boilerplate, and most\n  importantly - focusing on developer happiness.\n- Thanks to Phoenix, Ecto and Elixir for inspiring Avram's save operations,\n  Lucky's single base actions and pipes, and focusing on helpful error\n  messages.\n- `lucky watch` based heavily on [Sentry](https://github.com/samueleaton/sentry). Thanks [@samueleaton](https://github.com/samueleaton)!\n","program":{"html_id":"github.com/luckyframework/lucky/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/luckyframework/lucky","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Bool","path":"Bool.html","kind":"struct","full_name":"Bool","name":"Bool","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"},{"html_id":"github.com/luckyframework/lucky/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/avram/src/avram/charms/bool_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/charms/bool_extensions.cr"},{"filename":"lib/avram/src/avram/blank_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/blank_extensions.cr"},{"filename":"charms/bool_extensions.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/bool_extensions.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Bool has only two possible values: `true` and `false`. They are constructed using these literals:\n\n```\ntrue  # A Bool that is true\nfalse # A Bool that is false\n```","summary":"<p>Bool has only two possible values: <code>true</code> and <code>false</code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Hash","path":"Hash.html","kind":"class","full_name":"Hash(K, V)","name":"Hash","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"github.com/luckyframework/lucky/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"charms/hash_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/hash_extensions.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/luckyframework/lucky/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Hash` represents a collection of key-value mappings, similar to a dictionary.\n\nMain operations are storing a key-value mapping (`#[]=`) and\nquerying the value associated to a key (`#[]`). Key-value mappings can also be\ndeleted (`#delete`).\nKeys are unique within a hash. When adding a key-value mapping with a key that\nis already in use, the old value will be forgotten.\n\n```\n# Create a new Hash for mapping String to Int32\nhash = Hash(String, Int32).new\nhash[\"one\"] = 1\nhash[\"two\"] = 2\nhash[\"one\"] # => 1\n```\n\n[Hash literals](http://crystal-lang.org/reference/syntax_and_semantics/literals/hash.html)\ncan also be used to create a `Hash`:\n\n```\n{\"one\" => 1, \"two\" => 2}\n```\n\nImplementation is based on an open hash table.\nTwo objects refer to the same hash key when their hash value (`Object#hash`)\nis identical and both objects are equal to each other (`Object#==`).\n\nEnumeration follows the order that the corresponding keys were inserted.\n\nNOTE: When using mutable data types as keys, changing the value of a key after\nit was inserted into the `Hash` may lead to undefined behaviour. This can be\nrestored by re-indexing the hash with `#rehash`.","summary":"<p>A <code><a href=\"Hash.html\">Hash</a></code> represents a collection of key-value mappings, similar to a dictionary.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"get(key:String|Symbol)-instance-method","html_id":"get(key:String|Symbol)-instance-method","name":"get","doc":"Return the **nilable** value of a hash key\n\nThis returns a value stored in a hash. The key can be specified as a String\nor Symbol. Internally this works by converting Symbols to Strings. See the\ncode below for an example. It returns `nil` if the value doesn't exist:\n\n```crystal\nhash = {\"name\" => \"Karin\"}\nhash.get(:name)  # => \"Karin\" : (String | Nil)\nhash.get(\"name\") # => \"Karin\" : (String | Nil)\nhash.get(:asdf)  # => nil : (String | Nil)\n```","summary":"<p>Return the <strong>nilable</strong> value of a hash key</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/hash_extensions.cr#L14","def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[key.to_s]?"}},{"id":"get!(key:String|Symbol)-instance-method","html_id":"get!(key:String|Symbol)-instance-method","name":"get!","doc":"Return the value of a hash key\n\nThis returns a value stored in a hash. The key can be specified as a String\nor Symbol. Internally this works by converting Symbols to Strings. See the\ncode below for an example. It throws a `KeyError` if the value doesn't\nexist:\n\n```crystal\nhash = {\"name\" => \"Karin\"}\nhash.get(:name)  # => \"Karin\" : String\nhash.get(\"name\") # => \"Karin\" : String\nhash.get(:asdf)  # => KeyError\n```","summary":"<p>Return the value of a hash key</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/hash_extensions.cr#L31","def":{"name":"get!","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[key.to_s]"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Int16","path":"Int16.html","kind":"struct","full_name":"Int16","name":"Int16","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Int","kind":"struct","full_name":"Int","name":"Int"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"},{"html_id":"github.com/luckyframework/lucky/Int","kind":"struct","full_name":"Int","name":"Int"},{"html_id":"github.com/luckyframework/lucky/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/luckyframework/lucky/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/luckyframework/lucky/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/avram/src/avram/charms/int16_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/charms/int16_extensions.cr"},{"filename":"lib/avram/src/avram/blank_extensions.cr","line_number":13,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/blank_extensions.cr"},{"filename":"charms/int16_extensions.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/int16_extensions.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"to_param:String-instance-method","html_id":"to_param:String-instance-method","name":"to_param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/int16_extensions.cr#L6","def":{"name":"to_param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self.to_s"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Int32","path":"Int32.html","kind":"struct","full_name":"Int32","name":"Int32","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Int","kind":"struct","full_name":"Int","name":"Int"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"},{"html_id":"github.com/luckyframework/lucky/Int","kind":"struct","full_name":"Int","name":"Int"},{"html_id":"github.com/luckyframework/lucky/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/luckyframework/lucky/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/luckyframework/lucky/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/avram/src/avram/charms/int32_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/charms/int32_extensions.cr"},{"filename":"lib/avram/src/avram/blank_extensions.cr","line_number":19,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/blank_extensions.cr"},{"filename":"charms/int32_extensions.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/int32_extensions.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"to_param:String-instance-method","html_id":"to_param:String-instance-method","name":"to_param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/int32_extensions.cr#L6","def":{"name":"to_param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self.to_s"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Int64","path":"Int64.html","kind":"struct","full_name":"Int64","name":"Int64","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Int","kind":"struct","full_name":"Int","name":"Int"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"},{"html_id":"github.com/luckyframework/lucky/Int","kind":"struct","full_name":"Int","name":"Int"},{"html_id":"github.com/luckyframework/lucky/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"github.com/luckyframework/lucky/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/luckyframework/lucky/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/avram/src/avram/charms/int64_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/charms/int64_extensions.cr"},{"filename":"lib/avram/src/avram/blank_extensions.cr","line_number":25,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/blank_extensions.cr"},{"filename":"charms/int64_extensions.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/int64_extensions.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"to_param:String-instance-method","html_id":"to_param:String-instance-method","name":"to_param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/int64_extensions.cr#L6","def":{"name":"to_param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self.to_s"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky","path":"Lucky.html","kind":"module","full_name":"Lucky","name":"Lucky","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"locations":[{"filename":"lucky/quick_def.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/quick_def.cr"},{"filename":"lucky/support/message_verifier.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr"},{"filename":"lucky/support/message_encryptor.cr","line_number":5,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr"},{"filename":"lucky/errors.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"},{"filename":"lucky/secure_headers/set_frame_guard.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_frame_guard.cr"},{"filename":"lucky/secure_headers/set_sniff_guard.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_sniff_guard.cr"},{"filename":"lucky/secure_headers/set_xss_guard.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_xss_guard.cr"},{"filename":"lucky/version.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/version.cr"},{"filename":"lucky.cr","line_number":20,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: logger : Dexter::Logger, example: nil}] of Nil","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.18.2\"","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky.cr#L21","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"logger-class-method","html_id":"logger-class-method","name":"logger","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky.cr#L25","def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"settings.logger"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky.cr#L21","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky.cr#L21","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","path":"Lucky/Action.html","kind":"class","full_name":"Lucky::Action","name":"Action","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/VerifyAcceptsFormat","kind":"module","full_name":"Lucky::VerifyAcceptsFormat","name":"VerifyAcceptsFormat"},{"html_id":"github.com/luckyframework/lucky/Lucky/Redirectable","kind":"module","full_name":"Lucky::Redirectable","name":"Redirectable"},{"html_id":"github.com/luckyframework/lucky/Lucky/ActionCallbacks","kind":"module","full_name":"Lucky::ActionCallbacks","name":"ActionCallbacks"},{"html_id":"github.com/luckyframework/lucky/Lucky/ParamHelpers","kind":"module","full_name":"Lucky::ParamHelpers","name":"ParamHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Renderable","kind":"module","full_name":"Lucky::Renderable","name":"Renderable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Routable","kind":"module","full_name":"Lucky::Routable","name":"Routable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Memoizable","kind":"module","full_name":"Lucky::Memoizable","name":"Memoizable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Exposable","kind":"module","full_name":"Lucky::Exposable","name":"Exposable"},{"html_id":"github.com/luckyframework/lucky/Lucky/RequestTypeHelpers","kind":"module","full_name":"Lucky::RequestTypeHelpers","name":"RequestTypeHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Memoizable","kind":"module","full_name":"Lucky::Memoizable","name":"Memoizable"},{"html_id":"github.com/luckyframework/lucky/Lucky/ActionDelegates","kind":"module","full_name":"Lucky::ActionDelegates","name":"ActionDelegates"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/action.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"AFTER_CALLBACKS","name":"AFTER_CALLBACKS","value":"[] of Symbol","doc":null,"summary":null},{"id":"BEFORE_CALLBACKS","name":"BEFORE_CALLBACKS","value":"[verify_accepted_format] of Symbol","doc":null,"summary":null},{"id":"EXPOSURES","name":"EXPOSURES","value":"[] of Symbol","doc":null,"summary":null},{"id":"PARAM_DECLARATIONS","name":"PARAM_DECLARATIONS","value":"[] of Crystal::Macros::TypeDeclaration","doc":null,"summary":null},{"id":"SKIPPED_CALLBACKS","name":"SKIPPED_CALLBACKS","value":"[] of Symbol","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/ActionCallbacks","kind":"module","full_name":"Lucky::ActionCallbacks","name":"ActionCallbacks"},{"html_id":"github.com/luckyframework/lucky/Lucky/ActionDelegates","kind":"module","full_name":"Lucky::ActionDelegates","name":"ActionDelegates"},{"html_id":"github.com/luckyframework/lucky/Lucky/Exposable","kind":"module","full_name":"Lucky::Exposable","name":"Exposable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Memoizable","kind":"module","full_name":"Lucky::Memoizable","name":"Memoizable"},{"html_id":"github.com/luckyframework/lucky/Lucky/ParamHelpers","kind":"module","full_name":"Lucky::ParamHelpers","name":"ParamHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Redirectable","kind":"module","full_name":"Lucky::Redirectable","name":"Redirectable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Renderable","kind":"module","full_name":"Lucky::Renderable","name":"Renderable"},{"html_id":"github.com/luckyframework/lucky/Lucky/RequestTypeHelpers","kind":"module","full_name":"Lucky::RequestTypeHelpers","name":"RequestTypeHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Routable","kind":"module","full_name":"Lucky::Routable","name":"Routable"},{"html_id":"github.com/luckyframework/lucky/Lucky/VerifyAcceptsFormat","kind":"module","full_name":"Lucky::VerifyAcceptsFormat","name":"VerifyAcceptsFormat"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"_accepted_formats-class-method","html_id":"_accepted_formats-class-method","name":"_accepted_formats","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action.cr#L20","def":{"name":"_accepted_formats","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"[] of Symbol"}}],"constructors":[{"id":"new(context:HTTP::Server::Context,route_params:Hash(String,String))-class-method","html_id":"new(context:HTTP::Server::Context,route_params:Hash(String,String))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"route_params","doc":null,"default_value":"","external_name":"route_params","restriction":"Hash(String, String)"}],"args_string":"(context : HTTP::Server::Context, route_params : Hash(String, String))","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action.cr#L6","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"route_params","doc":null,"default_value":"","external_name":"route_params","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context, route_params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call-instance-method","html_id":"call-instance-method","name":"call","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action.cr#L9","def":{"name":"call","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"context:HTTP::Server::Context-instance-method","html_id":"context:HTTP::Server::Context-instance-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Server::Context","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action.cr#L4","def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@context"}},{"id":"cookies(*args,**options)-instance-method","html_id":"cookies(*args,**options)-instance-method","name":"cookies","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"cookies","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.cookies(*args, **options)"}},{"id":"cookies(*args,**options,&)-instance-method","html_id":"cookies(*args,**options,&amp;)-instance-method","name":"cookies","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"cookies","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.cookies(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"flash(*args,**options)-instance-method","html_id":"flash(*args,**options)-instance-method","name":"flash","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"flash","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.flash(*args, **options)"}},{"id":"flash(*args,**options,&)-instance-method","html_id":"flash(*args,**options,&amp;)-instance-method","name":"flash","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"flash","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.flash(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"request(*args,**options)-instance-method","html_id":"request(*args,**options)-instance-method","name":"request","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"request","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.request(*args, **options)"}},{"id":"request(*args,**options,&)-instance-method","html_id":"request(*args,**options,&amp;)-instance-method","name":"request","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"request","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.request(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"response(*args,**options)-instance-method","html_id":"response(*args,**options)-instance-method","name":"response","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"response","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response(*args, **options)"}},{"id":"response(*args,**options,&)-instance-method","html_id":"response(*args,**options,&amp;)-instance-method","name":"response","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"response","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"route_params:Hash(String,String)-instance-method","html_id":"route_params:Hash(String,String)-instance-method","name":"route_params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action.cr#L4","def":{"name":"route_params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@route_params"}},{"id":"session(*args,**options)-instance-method","html_id":"session(*args,**options)-instance-method","name":"session","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"session","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.session(*args, **options)"}},{"id":"session(*args,**options,&)-instance-method","html_id":"session(*args,**options,&amp;)-instance-method","name":"session","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"session","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.session(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/ActionCallbacks","path":"Lucky/ActionCallbacks.html","kind":"module","full_name":"Lucky::ActionCallbacks","name":"ActionCallbacks","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/action_callbacks.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action_callbacks.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"after(method_name)-macro","html_id":"after(method_name)-macro","name":"after","doc":"Run a method after an action ends\n\n`after` isn't as common as `before` but can still be useful. One example\nwould be to log a successful transaction to analytics. Methods will run in\nthe order that each `after` is defined. Also, each method must return\neither a `Lucky::Response` like `redirect`, `html`, `json`, etc, or call\n`continue`:\n\n```crystal\nclass Purchases::Create < BrowserAction\n  after log_transaction\n\n  route do\n    # purchase the product\n  end\n\n  def log_transaction\n    # send the purchase to analytics\n    continue\n  end\nend\n```","summary":"<p>Run a method after an action ends</p>","abstract":false,"args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"args_string":"(method_name)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action_callbacks.cr#L110","def":{"name":"after","args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% AFTER_CALLBACKS << method_name.id %}\n\n  \n"}},{"id":"before(method_name)-macro","html_id":"before(method_name)-macro","name":"before","doc":"Run a method before an action is called\n\nMethods will run in the order that each `before` is defined. Also, each\nmethod must return a `Lucky::Response` like `redirect`, `html`, `json`,\netc, or call `continue`:\n\n```crystal\nclass Users::Destroy < BrowserAction\n  before check_if_signed_in\n  before confirm_destroy\n\n  delete \"/:user_id\" do\n    # destroy the user :(\n  end\n\n  def check_if_signed_in\n    if current_user.nil?\n      redirect to: SignInPage\n    else\n      continue\n    end\n  end\n\n  def confirm_destroy\n    # confirm that the user should be destroyed\n    continue\n  end\nend\n```","summary":"<p>Run a method before an action is called</p>","abstract":false,"args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"args_string":"(method_name)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action_callbacks.cr#L84","def":{"name":"before","args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% BEFORE_CALLBACKS << method_name.id %}\n\n  \n"}},{"id":"skip(*callbacks)-macro","html_id":"skip(*callbacks)-macro","name":"skip","doc":"Skips before or after callbacks\n\n```\nskip require_sign_in, require_organization\n```","summary":"<p>Skips before or after callbacks</p>","abstract":false,"args":[{"name":"callbacks","doc":null,"default_value":"","external_name":"callbacks","restriction":""}],"args_string":"(*callbacks)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/action_callbacks.cr#L11","def":{"name":"skip","args":[{"name":"callbacks","doc":null,"default_value":"","external_name":"callbacks","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":null,"visibility":"Public","body":"    \n{% for callback in callbacks %}\n      {% if (BEFORE_CALLBACKS.includes?(callback.id)) || (AFTER_CALLBACKS.includes?(callback.id)) %}\n        {% SKIPPED_CALLBACKS << callback.id %}\n      {% else %}\n        {% callback.raise(\"Can't skip '#{callback}' because the callback is not used.\\nCheck the spelling of the callback that you are trying to skip.\".lines.join(\" \")) %}\n      {% end %}\n    {% end %}\n\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/AllowedInTags","path":"Lucky/AllowedInTags.html","kind":"module","full_name":"Lucky::AllowedInTags","name":"AllowedInTags","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/allowed_in_tags.cr","line_number":27,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/allowed_in_tags.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Bool","kind":"struct","full_name":"Bool","name":"Bool"},{"html_id":"github.com/luckyframework/lucky/Int16","kind":"struct","full_name":"Int16","name":"Int16"},{"html_id":"github.com/luckyframework/lucky/Int32","kind":"struct","full_name":"Int32","name":"Int32"},{"html_id":"github.com/luckyframework/lucky/Int64","kind":"struct","full_name":"Int64","name":"Int64"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Include this module in a type to allow it to be output in tags\n\nLucky already includes this in a few common types like `Int` and `Bool`.\nTypically this is enough but if you have a type you want to allow in tags, you\ncan do so.\n\nFor example:\n\n```crystal\nclass EmailAddress\n  include Lucky::AllowedInTags\n\n  def initialize(@value : String)\n  end\n\n  def to_s(io)\n    io.puts @value\n  end\nend\n```\n\nNow an `EmailAddress` can be used for tag content without calling `to_s`:\n\n```\nh1 EmailAddress.new(\"myemail.com\")\n```","summary":"<p>Include this module in a type to allow it to be output in tags</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/AssetHelpers","path":"Lucky/AssetHelpers.html","kind":"module","full_name":"Lucky::AssetHelpers","name":"AssetHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/asset_helpers.cr","line_number":7,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/asset_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ASSET_MANIFEST","name":"ASSET_MANIFEST","value":"{} of String => String","doc":null,"summary":null},{"id":"CONFIG","name":"CONFIG","value":"{has_loaded_manifest: false}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Methods for returning the path to assets\n\nThese methods will return fingerprinted paths, check assets at compile time,\nand allow for setting a CDN.\n\nFor an in-depth guide check: https://luckyframework.org/guides/frontend/asset-handling","summary":"<p>Methods for returning the path to assets</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"dynamic_asset(path)-instance-method","html_id":"dynamic_asset(path)-instance-method","name":"dynamic_asset","doc":"Return the string path to an asset (allows string interpolation)\n\n```\n# In a page or component\n# Will find the asset in `public/assets/images/logo.png`\nimg src: asset(\"images/logo.png\")\n\n# Can also be used elsewhere by prepending Lucky::AssetHelpers\nLucky::AssetHelpers.asset(\"images/logo.png\")\n```\n\nNOTE: This method does *not* check assets at compile time. The asset path\nis found at runtime so it is possible the asset does not exist. Be sure to\nmanually test that the asset is returned as expected.","summary":"<p>Return the string path to an asset (allows string interpolation)</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/asset_helpers.cr#L86","def":{"name":"dynamic_asset","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fingerprinted_path = Lucky::AssetHelpers::ASSET_MANIFEST[path]?\nif fingerprinted_path\n  Lucky::Server.settings.asset_host + fingerprinted_path\nelse\n  raise(\"Missing asset: #{path}\")\nend\n"}}],"macros":[{"id":"asset(path)-macro","html_id":"asset(path)-macro","name":"asset","doc":"Return the string path to an asset\n\n```\n# In a page or component:\n# Will find the asset in `public/assets/images/logo.png`\nimg src: asset(\"images/logo.png\")\n\n# Can also be used elsewhere by prepending Lucky::AssetHelpers\nLucky::AssetHelpers.asset(\"images/logo.png\")\n```\n\nNote that assets are checked at compile time so if it is not found, Lucky\nwill let you know. It will also let you know if you had a typo and suggest an\nasset that is close to what you typed.\n\nNOTE: This macro requires a `StringLiteral`. That means you cannot\ninterpolate strings like this: `asset(\"images/icon-#{service_name}.png\")`.\ninstead use `dynamic_asset` if you need string interpolation.","summary":"<p>Return the string path to an asset</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/asset_helpers.cr#L34","def":{"name":"asset","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if CONFIG[:has_loaded_manifest] %}{% else %}\n      {% raise(\"No manifest loaded. Call 'Lucky::AssetHelpers.load_manifest'\") %}\n    {% end %}\n\n\n    \n{% if path.is_a?(StringLiteral) %}\n      {% if Lucky::AssetHelpers::ASSET_MANIFEST[path] %}\n        Lucky::Server.settings.asset_host + {{ Lucky::AssetHelpers::ASSET_MANIFEST[path] }}\n      {% else %}\n        {% asset_paths = Lucky::AssetHelpers::ASSET_MANIFEST.keys.join(\",\") %}\n        {{ run(\"../run_macros/missing_asset\", path, asset_paths) }}\n      {% end %}\n    {% else %}{% if path.is_a?(StringInterpolation) %}\n      {% raise(\"\\n\\nThe 'asset' macro doesn't work with string interpolation\\n\\nTry this...\\n\\n  â–¸ Use the 'dynamic_asset' method instead\\n\") %}\n    {% else %}\n      {% raise(\"\\n\\nThe 'asset' macro requires a literal string like \\\"my-logo.png\\\", instead got: #{path}\\n\\nTry this...\\n\\n  â–¸ If you're using a variable, switch to a literal string\\n  â–¸ If you can't use a literal string, use the 'dynamic_asset' method instead\\n\") %}\n    {% end %}{% end %}\n\n  \n"}},{"id":"load_manifest-macro","html_id":"load_manifest-macro","name":"load_manifest","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/asset_helpers.cr#L11","def":{"name":"load_manifest","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{{ run(\"../run_macros/generate_asset_helpers\") }}\n\n    \n{% CONFIG[:has_loaded_manifest] = true %}\n\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseAppServer","path":"Lucky/BaseAppServer.html","kind":"class","full_name":"Lucky::BaseAppServer","name":"BaseAppServer","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/base_app_server.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_app_server.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"The Base class for creating an app server in Lucky","summary":"<p>The Base class for creating an app server in Lucky</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_app_server.cr#L7","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"middleware:Array(HTTP::Handler)-instance-method","html_id":"middleware:Array(HTTP::Handler)-instance-method","name":"middleware","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Array(HTTP::Handler)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_app_server.cr#L5","def":{"name":"middleware","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(HTTP::Handler)","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseComponent","path":"Lucky/BaseComponent.html","kind":"class","full_name":"Lucky::BaseComponent","name":"BaseComponent","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"},{"html_id":"github.com/luckyframework/lucky/Lucky/WithDefaults","kind":"module","full_name":"Lucky::WithDefaults","name":"WithDefaults"},{"html_id":"github.com/luckyframework/lucky/Lucky/RenderIfDefined","kind":"module","full_name":"Lucky::RenderIfDefined","name":"RenderIfDefined"},{"html_id":"github.com/luckyframework/lucky/Lucky/HelpfulParagraphError","kind":"module","full_name":"Lucky::HelpfulParagraphError","name":"HelpfulParagraphError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MountComponent","kind":"module","full_name":"Lucky::MountComponent","name":"MountComponent"},{"html_id":"github.com/luckyframework/lucky/Lucky/ForgeryProtectionHelpers","kind":"module","full_name":"Lucky::ForgeryProtectionHelpers","name":"ForgeryProtectionHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/TimeHelpers","kind":"module","full_name":"Lucky::TimeHelpers","name":"TimeHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLTextHelpers","kind":"module","full_name":"Lucky::HTMLTextHelpers","name":"HTMLTextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/TextHelpers","kind":"module","full_name":"Lucky::TextHelpers","name":"TextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/NumberToCurrency","kind":"module","full_name":"Lucky::NumberToCurrency","name":"NumberToCurrency"},{"html_id":"github.com/luckyframework/lucky/Lucky/AssetHelpers","kind":"module","full_name":"Lucky::AssetHelpers","name":"AssetHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Assignable","kind":"module","full_name":"Lucky::Assignable","name":"Assignable"},{"html_id":"github.com/luckyframework/lucky/Lucky/SpecialtyTags","kind":"module","full_name":"Lucky::SpecialtyTags","name":"SpecialtyTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/SelectHelpers","kind":"module","full_name":"Lucky::SelectHelpers","name":"SelectHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/InputHelpers","kind":"module","full_name":"Lucky::InputHelpers","name":"InputHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/LabelHelpers","kind":"module","full_name":"Lucky::LabelHelpers","name":"LabelHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/FormHelpers","kind":"module","full_name":"Lucky::FormHelpers","name":"FormHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Lucky/LinkHelpers","kind":"module","full_name":"Lucky::LinkHelpers","name":"LinkHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/CustomTags","kind":"module","full_name":"Lucky::CustomTags","name":"CustomTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseTags","kind":"module","full_name":"Lucky::BaseTags","name":"BaseTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/base_component.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_component.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ASSIGNS","name":"ASSIGNS","value":"[] of Nil","doc":null,"summary":null},{"id":"SETTINGS","name":"SETTINGS","value":"{} of Nil => Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"render_to_string:String-instance-method","html_id":"render_to_string:String-instance-method","name":"render_to_string","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_component.cr#L16","def":{"name":"render_to_string","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  view(io)\n  render\nend.to_s"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseHTTPClient","path":"Lucky/BaseHTTPClient.html","kind":"class","full_name":"Lucky::BaseHTTPClient","name":"BaseHTTPClient","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/base_http_client.cr","line_number":6,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"A client for making HTTP requests\n\nMakes it easy to pass params, use Lucky route helpers, and chain header methods.","summary":"<p>A client for making HTTP requests</p>","class_methods":[{"id":"exec(*args,**named_args)-class-method","html_id":"exec(*args,**named_args)-class-method","name":"exec","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **named_args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L15","def":{"name":"exec","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new.exec(*args, **named_args)"}},{"id":"get(*args,**named_args)-class-method","html_id":"get(*args,**named_args)-class-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **named_args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L15","def":{"name":"get","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new.get(*args, **named_args)"}},{"id":"patch(*args,**named_args)-class-method","html_id":"patch(*args,**named_args)-class-method","name":"patch","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **named_args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L15","def":{"name":"patch","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new.patch(*args, **named_args)"}},{"id":"post(*args,**named_args)-class-method","html_id":"post(*args,**named_args)-class-method","name":"post","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **named_args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L15","def":{"name":"post","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new.post(*args, **named_args)"}},{"id":"put(*args,**named_args)-class-method","html_id":"put(*args,**named_args)-class-method","name":"put","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **named_args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L15","def":{"name":"put","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new.put(*args, **named_args)"}}],"constructors":[{"id":"new(host=Lucky::Server.settings.host,port=Lucky::Server.settings.port)-class-method","html_id":"new(host=Lucky::Server.settings.host,port=Lucky::Server.settings.port)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"host","doc":null,"default_value":"Lucky::Server.settings.host","external_name":"host","restriction":""},{"name":"port","doc":null,"default_value":"Lucky::Server.settings.port","external_name":"port","restriction":""}],"args_string":"(host = <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Server</span>.settings.host, port = <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Server</span>.settings.port)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L11","def":{"name":"new","args":[{"name":"host","doc":null,"default_value":"Lucky::Server.settings.host","external_name":"host","restriction":""},{"name":"port","doc":null,"default_value":"Lucky::Server.settings.port","external_name":"port","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(host, port)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"delete(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","html_id":"delete(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"args_string":"(path : String, params : NamedTuple) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"@client.delete(path, form: params.to_json)"}},{"id":"delete(path:String,**params):HTTP::Client::Response-instance-method","html_id":"delete(path:String,**params):HTTP::Client::Response-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, **params) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"delete(path, params)"}},{"id":"exec(route_helper:Lucky::RouteHelper,params:NamedTuple):HTTP::Client::Response-instance-method","html_id":"exec(route_helper:Lucky::RouteHelper,params:NamedTuple):HTTP::Client::Response-instance-method","name":"exec","doc":"See docs for `exec`","summary":"<p>See docs for <code><a href=\"../Lucky/BaseHTTPClient.html#exec(route_helper:Lucky::RouteHelper,params:NamedTuple):HTTP::Client::Response-instance-method\">#exec</a></code></p>","abstract":false,"args":[{"name":"route_helper","doc":null,"default_value":"","external_name":"route_helper","restriction":"Lucky::RouteHelper"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"args_string":"(route_helper : Lucky::RouteHelper, params : NamedTuple) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L89","def":{"name":"exec","args":[{"name":"route_helper","doc":null,"default_value":"","external_name":"route_helper","restriction":"Lucky::RouteHelper"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"@client.exec(method: route_helper.method.to_s.upcase, path: route_helper.path, body: params.to_json)"}},{"id":"exec(action:Lucky::Action.class,**params):HTTP::Client::Response-instance-method","html_id":"exec(action:Lucky::Action.class,**params):HTTP::Client::Response-instance-method","name":"exec","doc":"Sends a request with the path and method from a Lucky::Action\n\n```\n# Make a request without body params\nAppClient.new.exec Users::Index\n\n# Make a request with body params\nAppClient.new.exec Users::Create, user: {email: \"paul@example.com\"}\n\n# Actions that require path params work like normal\nAppClient.new.exec Users::Show.with(user.id)\n```","summary":"<p>Sends a request with the path and method from a Lucky::Action</p>","abstract":false,"args":[{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Lucky::Action.class"}],"args_string":"(action : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>, **params) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L79","def":{"name":"exec","args":[{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Lucky::Action.class"}],"double_splat":{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"exec(action.route, params)"}},{"id":"exec(route_helper:Lucky::RouteHelper,**params):HTTP::Client::Response-instance-method","html_id":"exec(route_helper:Lucky::RouteHelper,**params):HTTP::Client::Response-instance-method","name":"exec","doc":"See docs for `exec`","summary":"<p>See docs for <code><a href=\"../Lucky/BaseHTTPClient.html#exec(route_helper:Lucky::RouteHelper,params:NamedTuple):HTTP::Client::Response-instance-method\">#exec</a></code></p>","abstract":false,"args":[{"name":"route_helper","doc":null,"default_value":"","external_name":"route_helper","restriction":"Lucky::RouteHelper"}],"args_string":"(route_helper : Lucky::RouteHelper, **params) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L84","def":{"name":"exec","args":[{"name":"route_helper","doc":null,"default_value":"","external_name":"route_helper","restriction":"Lucky::RouteHelper"}],"double_splat":{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"exec(route_helper, params)"}},{"id":"get(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","html_id":"get(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"args_string":"(path : String, params : NamedTuple) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"@client.get(path, form: params.to_json)"}},{"id":"get(path:String,**params):HTTP::Client::Response-instance-method","html_id":"get(path:String,**params):HTTP::Client::Response-instance-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, **params) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"get(path, params)"}},{"id":"headers(**header_values)-instance-method","html_id":"headers(**header_values)-instance-method","name":"headers","doc":"The header call is chainable and returns the client:\n\n```\n# content_type will be normalized to `content-type`\nAppClient.new\n  .headers(content_type: \"application/json\")\n  .headers(accept: \"text/plain\")\n  .get(\"/some-path\")\n```\n\nYou can also set up headers in `initialize` or in instance methods:\n\n```\nclass AppClient < Lucky::BaseHTTPClient\n  def initialize\n    headers(content_type: \"application/json\")\n  end\n\n  def accept_plain_text\n    headers(accept: \"text/plain\")\n  end\nend\n\nAppClient.new\n  .accept_plain_text\n  .get(\"/some-path\")\n```","summary":"<p>The header call is chainable and returns the client:</p>","abstract":false,"args":[],"args_string":"(**header_values)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L58","def":{"name":"headers","args":[],"double_splat":{"name":"header_values","doc":null,"default_value":"","external_name":"header_values","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@client.before_request do |request|\n  header_values.each do |key, value|\n    request.headers[key.to_s.gsub(\"-\", \"_\")] = value.to_s\n  end\nend\nself\n"}},{"id":"patch(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","html_id":"patch(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","name":"patch","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"args_string":"(path : String, params : NamedTuple) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"@client.patch(path, form: params.to_json)"}},{"id":"patch(path:String,**params):HTTP::Client::Response-instance-method","html_id":"patch(path:String,**params):HTTP::Client::Response-instance-method","name":"patch","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, **params) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"patch(path, params)"}},{"id":"post(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","html_id":"post(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","name":"post","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"args_string":"(path : String, params : NamedTuple) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"@client.post(path, form: params.to_json)"}},{"id":"post(path:String,**params):HTTP::Client::Response-instance-method","html_id":"post(path:String,**params):HTTP::Client::Response-instance-method","name":"post","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, **params) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"post(path, params)"}},{"id":"put(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","html_id":"put(path:String,params:NamedTuple):HTTP::Client::Response-instance-method","name":"put","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"args_string":"(path : String, params : NamedTuple) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"@client.put(path, form: params.to_json)"}},{"id":"put(path:String,**params):HTTP::Client::Response-instance-method","html_id":"put(path:String,**params):HTTP::Client::Response-instance-method","name":"put","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String, **params) : HTTP::Client::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_http_client.cr#L93","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Client::Response","visibility":"Public","body":"put(path, params)"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseLogFormatter","path":"Lucky/BaseLogFormatter.html","kind":"class","full_name":"Lucky::BaseLogFormatter","name":"BaseLogFormatter","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/base_log_formatter.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_log_formatter.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"format(severity:Logger::Severity,timestamp:Time,progname:String,data:NamedTuple,io:IO):Void-instance-method","html_id":"format(severity:Logger::Severity,timestamp:Time,progname:String,data:NamedTuple,io:IO):Void-instance-method","name":"format","doc":null,"summary":null,"abstract":true,"args":[{"name":"severity","doc":null,"default_value":"","external_name":"severity","restriction":"::Logger::Severity"},{"name":"timestamp","doc":null,"default_value":"","external_name":"timestamp","restriction":"Time"},{"name":"progname","doc":null,"default_value":"","external_name":"progname","restriction":"String"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"NamedTuple"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(severity : Logger::Severity, timestamp : Time, progname : String, data : NamedTuple, io : IO) : Void","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/base_log_formatter.cr#L2","def":{"name":"format","args":[{"name":"severity","doc":null,"default_value":"","external_name":"severity","restriction":"::Logger::Severity"},{"name":"timestamp","doc":null,"default_value":"","external_name":"timestamp","restriction":"Time"},{"name":"progname","doc":null,"default_value":"","external_name":"progname","restriction":"String"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"NamedTuple"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Void","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseTags","path":"Lucky/BaseTags.html","kind":"module","full_name":"Lucky::BaseTags","name":"BaseTags","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"}],"locations":[{"filename":"lucky/tags/base_tags.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EMPTY_HTML_ATTRS","name":"EMPTY_HTML_ATTRS","value":"{} of String => String","doc":null,"summary":null},{"id":"EMPTY_TAGS","name":"EMPTY_TAGS","value":"[:img, :br, :hr, :input, :meta, :source] of ::Symbol","doc":null,"summary":null},{"id":"RENAMED_TAGS","name":"RENAMED_TAGS","value":"{para: \"p\", select_tag: \"select\"}","doc":null,"summary":null},{"id":"TAGS","name":"TAGS","value":"[:a, :abbr, :address, :article, :aside, :b, :bdi, :body, :button, :code, :details, :dialog, :div, :dd, :dl, :dt, :em, :fieldset, :figcaption, :figure, :footer, :form, :h1, :h2, :h3, :h4, :h5, :h6, :head, :header, :html, :i, :iframe, :label, :li, :main, :mark, :menuitem, :meter, :nav, :ol, :option, :pre, :progress, :rp, :rt, :ruby, :s, :script, :section, :small, :span, :strong, :summary, :table, :tbody, :td, :textarea, :th, :thead, :time, :title, :tr, :u, :ul, :video, :wbr] of ::Symbol","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"a(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"a(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"a","doc":"Generates a `&lt;a&gt;&lt;/a&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\na(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <a class=\"cls-1 red\" required>Sample</a>\n```","summary":"<p>Generates a <code>&lt;a&gt;&lt;/a&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"a","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\na(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"a(content:String|Lucky::AllowedInTags)-instance-method","html_id":"a(content:String|Lucky::AllowedInTags)-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"a","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"a(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"a(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"a","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<a\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</a>\"\n"}},{"id":"a(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"a(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"a","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<a\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</a>\"\n"}},{"id":"abbr(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"abbr(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"abbr","doc":"Generates a `&lt;abbr&gt;&lt;/abbr&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nabbr(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <abbr class=\"cls-1 red\" required>Sample</abbr>\n```","summary":"<p>Generates a <code>&lt;abbr&gt;&lt;/abbr&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"abbr","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nabbr(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"abbr(content:String|Lucky::AllowedInTags)-instance-method","html_id":"abbr(content:String|Lucky::AllowedInTags)-instance-method","name":"abbr","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"abbr","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"abbr(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"abbr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"abbr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"abbr","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"abbr","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<abbr\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</abbr>\"\n"}},{"id":"abbr(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"abbr(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"abbr","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"abbr","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<abbr\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</abbr>\"\n"}},{"id":"address(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"address(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"address","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"address","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<address\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</address>\"\n"}},{"id":"address(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"address(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"address","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"address","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<address\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</address>\"\n"}},{"id":"address(content:String|Lucky::AllowedInTags)-instance-method","html_id":"address(content:String|Lucky::AllowedInTags)-instance-method","name":"address","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"address","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"address(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"address(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"address(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"address","doc":"Generates a `&lt;address&gt;&lt;/address&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\naddress(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <address class=\"cls-1 red\" required>Sample</address>\n```","summary":"<p>Generates a <code>&lt;address&gt;&lt;/address&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"address","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\naddress(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"article(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"article(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"article","doc":"Generates a `&lt;article&gt;&lt;/article&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\narticle(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <article class=\"cls-1 red\" required>Sample</article>\n```","summary":"<p>Generates a <code>&lt;article&gt;&lt;/article&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"article","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\narticle(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"article(content:String|Lucky::AllowedInTags)-instance-method","html_id":"article(content:String|Lucky::AllowedInTags)-instance-method","name":"article","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"article","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"article(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"article(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"article(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"article","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"article","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<article\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</article>\"\n"}},{"id":"article(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"article(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"article","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"article","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<article\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</article>\"\n"}},{"id":"aside(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"aside(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"aside","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"aside","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<aside\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</aside>\"\n"}},{"id":"aside(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"aside(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"aside","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"aside","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<aside\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</aside>\"\n"}},{"id":"aside(content:String|Lucky::AllowedInTags)-instance-method","html_id":"aside(content:String|Lucky::AllowedInTags)-instance-method","name":"aside","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"aside","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"aside(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"aside(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"aside(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"aside","doc":"Generates a `&lt;aside&gt;&lt;/aside&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\naside(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <aside class=\"cls-1 red\" required>Sample</aside>\n```","summary":"<p>Generates a <code>&lt;aside&gt;&lt;/aside&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"aside","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\naside(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"b(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"b(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"b","doc":"Generates a `&lt;b&gt;&lt;/b&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nb(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <b class=\"cls-1 red\" required>Sample</b>\n```","summary":"<p>Generates a <code>&lt;b&gt;&lt;/b&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"b","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nb(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"b(content:String|Lucky::AllowedInTags)-instance-method","html_id":"b(content:String|Lucky::AllowedInTags)-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"b","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"b(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"b(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"b(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"b","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<b\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</b>\"\n"}},{"id":"b(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"b(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"b","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<b\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</b>\"\n"}},{"id":"bdi(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"bdi(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"bdi","doc":"Generates a `&lt;bdi&gt;&lt;/bdi&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nbdi(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <bdi class=\"cls-1 red\" required>Sample</bdi>\n```","summary":"<p>Generates a <code>&lt;bdi&gt;&lt;/bdi&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"bdi","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nbdi(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"bdi(content:String|Lucky::AllowedInTags)-instance-method","html_id":"bdi(content:String|Lucky::AllowedInTags)-instance-method","name":"bdi","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"bdi","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bdi(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"bdi(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"bdi(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"bdi","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"bdi","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<bdi\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</bdi>\"\n"}},{"id":"bdi(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"bdi(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"bdi","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"bdi","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<bdi\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</bdi>\"\n"}},{"id":"body(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"body(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"body","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"body","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<body\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</body>\"\n"}},{"id":"body(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"body(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"body","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"body","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<body\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</body>\"\n"}},{"id":"body(content:String|Lucky::AllowedInTags)-instance-method","html_id":"body(content:String|Lucky::AllowedInTags)-instance-method","name":"body","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"body","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"body(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"body(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"body(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"body","doc":"Generates a `&lt;body&gt;&lt;/body&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nbody(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <body class=\"cls-1 red\" required>Sample</body>\n```","summary":"<p>Generates a <code>&lt;body&gt;&lt;/body&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"body","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nbody(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"br(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"br(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"br","doc":"Generates a `&lt;br&gt;` tag.","summary":"<p>Generates a <code>&lt;br&gt;</code> tag.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"br","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"br([] of Symbol, options, **other_options)"}},{"id":"br(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"br(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"br","doc":"Generates a `&lt;br&gt;` tag.\n\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n\n```\nbr([:required], {\"class\" => \"cls-1\"}) #=> <br class=\"cls-1\" required>\n```","summary":"<p>Generates a <code>&lt;br&gt;</code> tag.</p>","abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"br","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bool_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\nview << \"<br#{tag_attrs}#{bool_attrs}>\"\n"}},{"id":"button(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"button(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"button","doc":"Generates a `&lt;button&gt;&lt;/button&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nbutton(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <button class=\"cls-1 red\" required>Sample</button>\n```","summary":"<p>Generates a <code>&lt;button&gt;&lt;/button&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"button","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nbutton(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"button(content:String|Lucky::AllowedInTags)-instance-method","html_id":"button(content:String|Lucky::AllowedInTags)-instance-method","name":"button","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"button","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"button(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"button(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"button(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"button","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"button","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<button\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</button>\"\n"}},{"id":"button(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"button(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"button","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"button","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<button\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</button>\"\n"}},{"id":"code(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"code(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"code","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<code\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</code>\"\n"}},{"id":"code(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"code(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"code","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<code\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</code>\"\n"}},{"id":"code(content:String|Lucky::AllowedInTags)-instance-method","html_id":"code(content:String|Lucky::AllowedInTags)-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"code","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"code(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"code(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"code(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"code","doc":"Generates a `&lt;code&gt;&lt;/code&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ncode(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <code class=\"cls-1 red\" required>Sample</code>\n```","summary":"<p>Generates a <code>&lt;code&gt;&lt;/code&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"code","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ncode(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"dd(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dd(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dd","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dd","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<dd\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dd>\"\n"}},{"id":"dd(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dd(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dd","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dd","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<dd\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dd>\"\n"}},{"id":"dd(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"dd(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"dd","doc":"Generates a `&lt;dd&gt;&lt;/dd&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ndd(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <dd class=\"cls-1 red\" required>Sample</dd>\n```","summary":"<p>Generates a <code>&lt;dd&gt;&lt;/dd&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"dd","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ndd(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"dd(content:String|Lucky::AllowedInTags)-instance-method","html_id":"dd(content:String|Lucky::AllowedInTags)-instance-method","name":"dd","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"dd","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dd(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"details(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"details(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"details","doc":"Generates a `&lt;details&gt;&lt;/details&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ndetails(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <details class=\"cls-1 red\" required>Sample</details>\n```","summary":"<p>Generates a <code>&lt;details&gt;&lt;/details&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"details","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ndetails(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"details(content:String|Lucky::AllowedInTags)-instance-method","html_id":"details(content:String|Lucky::AllowedInTags)-instance-method","name":"details","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"details","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"details(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"details(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"details(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"details","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"details","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<details\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</details>\"\n"}},{"id":"details(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"details(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"details","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"details","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<details\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</details>\"\n"}},{"id":"dialog(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"dialog(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"dialog","doc":"Generates a `&lt;dialog&gt;&lt;/dialog&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ndialog(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <dialog class=\"cls-1 red\" required>Sample</dialog>\n```","summary":"<p>Generates a <code>&lt;dialog&gt;&lt;/dialog&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"dialog","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ndialog(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"dialog(content:String|Lucky::AllowedInTags)-instance-method","html_id":"dialog(content:String|Lucky::AllowedInTags)-instance-method","name":"dialog","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"dialog","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dialog(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"dialog(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dialog(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dialog","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dialog","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<dialog\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dialog>\"\n"}},{"id":"dialog(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dialog(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dialog","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dialog","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<dialog\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dialog>\"\n"}},{"id":"div(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"div(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"div","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"div","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<div\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</div>\"\n"}},{"id":"div(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"div(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"div","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"div","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<div\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</div>\"\n"}},{"id":"div(content:String|Lucky::AllowedInTags)-instance-method","html_id":"div(content:String|Lucky::AllowedInTags)-instance-method","name":"div","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"div","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"div(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"div(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"div(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"div","doc":"Generates a `&lt;div&gt;&lt;/div&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ndiv(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <div class=\"cls-1 red\" required>Sample</div>\n```","summary":"<p>Generates a <code>&lt;div&gt;&lt;/div&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"div","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ndiv(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"dl(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dl(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dl","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dl","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<dl\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dl>\"\n"}},{"id":"dl(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dl(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dl","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dl","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<dl\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dl>\"\n"}},{"id":"dl(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"dl(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"dl","doc":"Generates a `&lt;dl&gt;&lt;/dl&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ndl(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <dl class=\"cls-1 red\" required>Sample</dl>\n```","summary":"<p>Generates a <code>&lt;dl&gt;&lt;/dl&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"dl","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ndl(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"dl(content:String|Lucky::AllowedInTags)-instance-method","html_id":"dl(content:String|Lucky::AllowedInTags)-instance-method","name":"dl","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"dl","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dl(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"dt(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"dt(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"dt","doc":"Generates a `&lt;dt&gt;&lt;/dt&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ndt(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <dt class=\"cls-1 red\" required>Sample</dt>\n```","summary":"<p>Generates a <code>&lt;dt&gt;&lt;/dt&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"dt","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ndt(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"dt(content:String|Lucky::AllowedInTags)-instance-method","html_id":"dt(content:String|Lucky::AllowedInTags)-instance-method","name":"dt","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"dt","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dt(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"dt(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dt(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dt","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dt","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<dt\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dt>\"\n"}},{"id":"dt(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"dt(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"dt","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"dt","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<dt\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</dt>\"\n"}},{"id":"em(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"em(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"em","doc":"Generates a `&lt;em&gt;&lt;/em&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nem(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <em class=\"cls-1 red\" required>Sample</em>\n```","summary":"<p>Generates a <code>&lt;em&gt;&lt;/em&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"em","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nem(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"em(content:String|Lucky::AllowedInTags)-instance-method","html_id":"em(content:String|Lucky::AllowedInTags)-instance-method","name":"em","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"em","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"em(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"em(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"em(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"em","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"em","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<em\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</em>\"\n"}},{"id":"em(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"em(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"em","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"em","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<em\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</em>\"\n"}},{"id":"fieldset(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"fieldset(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"fieldset","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"fieldset","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<fieldset\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</fieldset>\"\n"}},{"id":"fieldset(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"fieldset(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"fieldset","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"fieldset","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<fieldset\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</fieldset>\"\n"}},{"id":"fieldset(content:String|Lucky::AllowedInTags)-instance-method","html_id":"fieldset(content:String|Lucky::AllowedInTags)-instance-method","name":"fieldset","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"fieldset","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fieldset(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"fieldset(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"fieldset(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"fieldset","doc":"Generates a `&lt;fieldset&gt;&lt;/fieldset&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nfieldset(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <fieldset class=\"cls-1 red\" required>Sample</fieldset>\n```","summary":"<p>Generates a <code>&lt;fieldset&gt;&lt;/fieldset&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"fieldset","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nfieldset(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"figcaption(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"figcaption(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"figcaption","doc":"Generates a `&lt;figcaption&gt;&lt;/figcaption&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nfigcaption(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <figcaption class=\"cls-1 red\" required>Sample</figcaption>\n```","summary":"<p>Generates a <code>&lt;figcaption&gt;&lt;/figcaption&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"figcaption","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nfigcaption(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"figcaption(content:String|Lucky::AllowedInTags)-instance-method","html_id":"figcaption(content:String|Lucky::AllowedInTags)-instance-method","name":"figcaption","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"figcaption","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"figcaption(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"figcaption(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"figcaption(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"figcaption","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"figcaption","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<figcaption\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</figcaption>\"\n"}},{"id":"figcaption(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"figcaption(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"figcaption","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"figcaption","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<figcaption\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</figcaption>\"\n"}},{"id":"figure(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"figure(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"figure","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"figure","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<figure\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</figure>\"\n"}},{"id":"figure(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"figure(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"figure","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"figure","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<figure\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</figure>\"\n"}},{"id":"figure(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"figure(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"figure","doc":"Generates a `&lt;figure&gt;&lt;/figure&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nfigure(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <figure class=\"cls-1 red\" required>Sample</figure>\n```","summary":"<p>Generates a <code>&lt;figure&gt;&lt;/figure&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"figure","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nfigure(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"figure(content:String|Lucky::AllowedInTags)-instance-method","html_id":"figure(content:String|Lucky::AllowedInTags)-instance-method","name":"figure","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"figure","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"figure(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"footer(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"footer(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"footer","doc":"Generates a `&lt;footer&gt;&lt;/footer&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nfooter(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <footer class=\"cls-1 red\" required>Sample</footer>\n```","summary":"<p>Generates a <code>&lt;footer&gt;&lt;/footer&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"footer","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nfooter(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"footer(content:String|Lucky::AllowedInTags)-instance-method","html_id":"footer(content:String|Lucky::AllowedInTags)-instance-method","name":"footer","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"footer","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"footer(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"footer(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"footer(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"footer","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"footer","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<footer\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</footer>\"\n"}},{"id":"footer(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"footer(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"footer","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"footer","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<footer\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</footer>\"\n"}},{"id":"form(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"form(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"form","doc":"Generates a `&lt;form&gt;&lt;/form&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nform(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <form class=\"cls-1 red\" required>Sample</form>\n```","summary":"<p>Generates a <code>&lt;form&gt;&lt;/form&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"form","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nform(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"form(content:String|Lucky::AllowedInTags)-instance-method","html_id":"form(content:String|Lucky::AllowedInTags)-instance-method","name":"form","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"form","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"form(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"form(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"form(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"form","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"form","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<form\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</form>\"\n"}},{"id":"form(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"form(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"form","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"form","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<form\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</form>\"\n"}},{"id":"h1(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h1(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h1","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h1","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<h1\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h1>\"\n"}},{"id":"h1(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h1(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h1","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h1","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<h1\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h1>\"\n"}},{"id":"h1(content:String|Lucky::AllowedInTags)-instance-method","html_id":"h1(content:String|Lucky::AllowedInTags)-instance-method","name":"h1","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"h1","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h1(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"h1(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"h1(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"h1","doc":"Generates a `&lt;h1&gt;&lt;/h1&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nh1(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <h1 class=\"cls-1 red\" required>Sample</h1>\n```","summary":"<p>Generates a <code>&lt;h1&gt;&lt;/h1&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"h1","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nh1(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"h2(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"h2(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"h2","doc":"Generates a `&lt;h2&gt;&lt;/h2&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nh2(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <h2 class=\"cls-1 red\" required>Sample</h2>\n```","summary":"<p>Generates a <code>&lt;h2&gt;&lt;/h2&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"h2","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nh2(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"h2(content:String|Lucky::AllowedInTags)-instance-method","html_id":"h2(content:String|Lucky::AllowedInTags)-instance-method","name":"h2","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"h2","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h2(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"h2(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h2(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h2","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h2","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<h2\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h2>\"\n"}},{"id":"h2(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h2(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h2","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h2","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<h2\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h2>\"\n"}},{"id":"h3(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h3(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h3","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h3","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<h3\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h3>\"\n"}},{"id":"h3(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h3(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h3","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h3","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<h3\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h3>\"\n"}},{"id":"h3(content:String|Lucky::AllowedInTags)-instance-method","html_id":"h3(content:String|Lucky::AllowedInTags)-instance-method","name":"h3","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"h3","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h3(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"h3(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"h3(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"h3","doc":"Generates a `&lt;h3&gt;&lt;/h3&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nh3(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <h3 class=\"cls-1 red\" required>Sample</h3>\n```","summary":"<p>Generates a <code>&lt;h3&gt;&lt;/h3&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"h3","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nh3(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"h4(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"h4(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"h4","doc":"Generates a `&lt;h4&gt;&lt;/h4&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nh4(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <h4 class=\"cls-1 red\" required>Sample</h4>\n```","summary":"<p>Generates a <code>&lt;h4&gt;&lt;/h4&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"h4","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nh4(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"h4(content:String|Lucky::AllowedInTags)-instance-method","html_id":"h4(content:String|Lucky::AllowedInTags)-instance-method","name":"h4","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"h4","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h4(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"h4(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h4(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h4","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h4","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<h4\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h4>\"\n"}},{"id":"h4(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h4(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h4","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h4","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<h4\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h4>\"\n"}},{"id":"h5(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"h5(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"h5","doc":"Generates a `&lt;h5&gt;&lt;/h5&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nh5(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <h5 class=\"cls-1 red\" required>Sample</h5>\n```","summary":"<p>Generates a <code>&lt;h5&gt;&lt;/h5&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"h5","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nh5(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"h5(content:String|Lucky::AllowedInTags)-instance-method","html_id":"h5(content:String|Lucky::AllowedInTags)-instance-method","name":"h5","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"h5","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h5(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"h5(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h5(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h5","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h5","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<h5\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h5>\"\n"}},{"id":"h5(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h5(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h5","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h5","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<h5\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h5>\"\n"}},{"id":"h6(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"h6(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"h6","doc":"Generates a `&lt;h6&gt;&lt;/h6&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nh6(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <h6 class=\"cls-1 red\" required>Sample</h6>\n```","summary":"<p>Generates a <code>&lt;h6&gt;&lt;/h6&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"h6","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nh6(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"h6(content:String|Lucky::AllowedInTags)-instance-method","html_id":"h6(content:String|Lucky::AllowedInTags)-instance-method","name":"h6","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"h6","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h6(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"h6(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h6(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h6","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h6","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<h6\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h6>\"\n"}},{"id":"h6(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"h6(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"h6","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"h6","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<h6\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</h6>\"\n"}},{"id":"head(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"head(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"head","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"head","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<head\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</head>\"\n"}},{"id":"head(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"head(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"head","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"head","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<head\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</head>\"\n"}},{"id":"head(content:String|Lucky::AllowedInTags)-instance-method","html_id":"head(content:String|Lucky::AllowedInTags)-instance-method","name":"head","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"head","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"head(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"head(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"head(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"head","doc":"Generates a `&lt;head&gt;&lt;/head&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nhead(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <head class=\"cls-1 red\" required>Sample</head>\n```","summary":"<p>Generates a <code>&lt;head&gt;&lt;/head&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"head","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nhead(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"header(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"header(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"header","doc":"Generates a `&lt;header&gt;&lt;/header&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nheader(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <header class=\"cls-1 red\" required>Sample</header>\n```","summary":"<p>Generates a <code>&lt;header&gt;&lt;/header&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"header","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nheader(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"header(content:String|Lucky::AllowedInTags)-instance-method","html_id":"header(content:String|Lucky::AllowedInTags)-instance-method","name":"header","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"header","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"header(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"header(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"header(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"header","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"header","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<header\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</header>\"\n"}},{"id":"header(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"header(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"header","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"header","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<header\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</header>\"\n"}},{"id":"hr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"hr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"hr","doc":"Generates a `&lt;hr&gt;` tag.\n\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n\n```\nhr([:required], {\"class\" => \"cls-1\"}) #=> <hr class=\"cls-1\" required>\n```","summary":"<p>Generates a <code>&lt;hr&gt;</code> tag.</p>","abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"hr","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bool_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\nview << \"<hr#{tag_attrs}#{bool_attrs}>\"\n"}},{"id":"hr(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"hr(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"hr","doc":"Generates a `&lt;hr&gt;` tag.","summary":"<p>Generates a <code>&lt;hr&gt;</code> tag.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"hr","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hr([] of Symbol, options, **other_options)"}},{"id":"html(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"html(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"html","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"html","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<html\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</html>\"\n"}},{"id":"html(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"html(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"html","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"html","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<html\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</html>\"\n"}},{"id":"html(content:String|Lucky::AllowedInTags)-instance-method","html_id":"html(content:String|Lucky::AllowedInTags)-instance-method","name":"html","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"html","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"html(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"html(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"html(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"html","doc":"Generates a `&lt;html&gt;&lt;/html&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nhtml(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <html class=\"cls-1 red\" required>Sample</html>\n```","summary":"<p>Generates a <code>&lt;html&gt;&lt;/html&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"html","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nhtml(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"i(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"i(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"i","doc":"Generates a `&lt;i&gt;&lt;/i&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ni(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <i class=\"cls-1 red\" required>Sample</i>\n```","summary":"<p>Generates a <code>&lt;i&gt;&lt;/i&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"i","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ni(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"i(content:String|Lucky::AllowedInTags)-instance-method","html_id":"i(content:String|Lucky::AllowedInTags)-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"i","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"i(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"i(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"i(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"i","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<i\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</i>\"\n"}},{"id":"i(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"i(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"i","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<i\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</i>\"\n"}},{"id":"iframe(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"iframe(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"iframe","doc":"Generates a `&lt;iframe&gt;&lt;/iframe&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\niframe(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <iframe class=\"cls-1 red\" required>Sample</iframe>\n```","summary":"<p>Generates a <code>&lt;iframe&gt;&lt;/iframe&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"iframe","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\niframe(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"iframe(content:String|Lucky::AllowedInTags)-instance-method","html_id":"iframe(content:String|Lucky::AllowedInTags)-instance-method","name":"iframe","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"iframe","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iframe(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"iframe(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"iframe(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"iframe","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"iframe","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<iframe\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</iframe>\"\n"}},{"id":"iframe(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"iframe(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"iframe","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"iframe","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<iframe\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</iframe>\"\n"}},{"id":"img(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"img(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"img","doc":"Generates a `&lt;img&gt;` tag.","summary":"<p>Generates a <code>&lt;img&gt;</code> tag.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"img","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"img([] of Symbol, options, **other_options)"}},{"id":"img(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"img(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"img","doc":"Generates a `&lt;img&gt;` tag.\n\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n\n```\nimg([:required], {\"class\" => \"cls-1\"}) #=> <img class=\"cls-1\" required>\n```","summary":"<p>Generates a <code>&lt;img&gt;</code> tag.</p>","abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"img","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bool_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\nview << \"<img#{tag_attrs}#{bool_attrs}>\"\n"}},{"id":"input(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"input(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"input","doc":"Generates a `&lt;input&gt;` tag.","summary":"<p>Generates a <code>&lt;input&gt;</code> tag.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"input","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"input([] of Symbol, options, **other_options)"}},{"id":"input(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"input(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"input","doc":"Generates a `&lt;input&gt;` tag.\n\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n\n```\ninput([:required], {\"class\" => \"cls-1\"}) #=> <input class=\"cls-1\" required>\n```","summary":"<p>Generates a <code>&lt;input&gt;</code> tag.</p>","abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"input","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bool_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\nview << \"<input#{tag_attrs}#{bool_attrs}>\"\n"}},{"id":"label(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"label(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"label","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"label","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<label\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</label>\"\n"}},{"id":"label(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"label(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"label","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"label","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<label\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</label>\"\n"}},{"id":"label(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"label(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"label","doc":"Generates a `&lt;label&gt;&lt;/label&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nlabel(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <label class=\"cls-1 red\" required>Sample</label>\n```","summary":"<p>Generates a <code>&lt;label&gt;&lt;/label&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"label","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nlabel(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"label(content:String|Lucky::AllowedInTags)-instance-method","html_id":"label(content:String|Lucky::AllowedInTags)-instance-method","name":"label","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"label","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"label(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"li(content:String|Lucky::AllowedInTags)-instance-method","html_id":"li(content:String|Lucky::AllowedInTags)-instance-method","name":"li","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"li","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"li(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"li(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"li(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"li","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"li","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<li\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</li>\"\n"}},{"id":"li(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"li(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"li","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"li","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<li\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</li>\"\n"}},{"id":"li(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"li(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"li","doc":"Generates a `&lt;li&gt;&lt;/li&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nli(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <li class=\"cls-1 red\" required>Sample</li>\n```","summary":"<p>Generates a <code>&lt;li&gt;&lt;/li&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"li","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nli(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"main(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"main(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"main","doc":"Generates a `&lt;main&gt;&lt;/main&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nmain(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <main class=\"cls-1 red\" required>Sample</main>\n```","summary":"<p>Generates a <code>&lt;main&gt;&lt;/main&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"main","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nmain(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"main(content:String|Lucky::AllowedInTags)-instance-method","html_id":"main(content:String|Lucky::AllowedInTags)-instance-method","name":"main","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"main","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"main(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"main(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"main(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"main","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"main","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<main\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</main>\"\n"}},{"id":"main(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"main(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"main","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"main","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<main\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</main>\"\n"}},{"id":"mark(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"mark(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"mark","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"mark","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<mark\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</mark>\"\n"}},{"id":"mark(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"mark(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"mark","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"mark","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<mark\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</mark>\"\n"}},{"id":"mark(content:String|Lucky::AllowedInTags)-instance-method","html_id":"mark(content:String|Lucky::AllowedInTags)-instance-method","name":"mark","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"mark","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"mark(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"mark(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"mark(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"mark","doc":"Generates a `&lt;mark&gt;&lt;/mark&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nmark(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <mark class=\"cls-1 red\" required>Sample</mark>\n```","summary":"<p>Generates a <code>&lt;mark&gt;&lt;/mark&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"mark","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nmark(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"menuitem(content:String|Lucky::AllowedInTags)-instance-method","html_id":"menuitem(content:String|Lucky::AllowedInTags)-instance-method","name":"menuitem","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"menuitem","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"menuitem(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"menuitem(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"menuitem(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"menuitem","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"menuitem","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<menuitem\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</menuitem>\"\n"}},{"id":"menuitem(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"menuitem(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"menuitem","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"menuitem","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<menuitem\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</menuitem>\"\n"}},{"id":"menuitem(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"menuitem(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"menuitem","doc":"Generates a `&lt;menuitem&gt;&lt;/menuitem&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nmenuitem(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <menuitem class=\"cls-1 red\" required>Sample</menuitem>\n```","summary":"<p>Generates a <code>&lt;menuitem&gt;&lt;/menuitem&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"menuitem","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nmenuitem(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"meta(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"meta(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"meta","doc":"Generates a `&lt;meta&gt;` tag.\n\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n\n```\nmeta([:required], {\"class\" => \"cls-1\"}) #=> <meta class=\"cls-1\" required>\n```","summary":"<p>Generates a <code>&lt;meta&gt;</code> tag.</p>","abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"meta","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bool_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\nview << \"<meta#{tag_attrs}#{bool_attrs}>\"\n"}},{"id":"meta(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"meta(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"meta","doc":"Generates a `&lt;meta&gt;` tag.","summary":"<p>Generates a <code>&lt;meta&gt;</code> tag.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"meta","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"meta([] of Symbol, options, **other_options)"}},{"id":"meter(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"meter(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"meter","doc":"Generates a `&lt;meter&gt;&lt;/meter&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nmeter(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <meter class=\"cls-1 red\" required>Sample</meter>\n```","summary":"<p>Generates a <code>&lt;meter&gt;&lt;/meter&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"meter","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nmeter(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"meter(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"meter(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"meter","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"meter","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<meter\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</meter>\"\n"}},{"id":"meter(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"meter(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"meter","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"meter","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<meter\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</meter>\"\n"}},{"id":"meter(content:String|Lucky::AllowedInTags)-instance-method","html_id":"meter(content:String|Lucky::AllowedInTags)-instance-method","name":"meter","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"meter","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"meter(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"nav(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"nav(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"nav","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"nav","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<nav\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</nav>\"\n"}},{"id":"nav(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"nav(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"nav","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"nav","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<nav\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</nav>\"\n"}},{"id":"nav(content:String|Lucky::AllowedInTags)-instance-method","html_id":"nav(content:String|Lucky::AllowedInTags)-instance-method","name":"nav","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"nav","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"nav(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"nav(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"nav(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"nav","doc":"Generates a `&lt;nav&gt;&lt;/nav&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nnav(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <nav class=\"cls-1 red\" required>Sample</nav>\n```","summary":"<p>Generates a <code>&lt;nav&gt;&lt;/nav&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"nav","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nnav(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"ol(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"ol(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"ol","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"ol","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<ol\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</ol>\"\n"}},{"id":"ol(content:String|Lucky::AllowedInTags)-instance-method","html_id":"ol(content:String|Lucky::AllowedInTags)-instance-method","name":"ol","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"ol","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ol(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"ol(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"ol(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"ol","doc":"Generates a `&lt;ol&gt;&lt;/ol&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nol(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <ol class=\"cls-1 red\" required>Sample</ol>\n```","summary":"<p>Generates a <code>&lt;ol&gt;&lt;/ol&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"ol","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nol(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"ol(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"ol(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"ol","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"ol","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<ol\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</ol>\"\n"}},{"id":"option(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"option(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"option","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"option","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<option\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</option>\"\n"}},{"id":"option(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"option(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"option","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"option","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<option\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</option>\"\n"}},{"id":"option(content:String|Lucky::AllowedInTags)-instance-method","html_id":"option(content:String|Lucky::AllowedInTags)-instance-method","name":"option","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"option","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"option(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"option(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"option(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"option","doc":"Generates a `&lt;option&gt;&lt;/option&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\noption(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <option class=\"cls-1 red\" required>Sample</option>\n```","summary":"<p>Generates a <code>&lt;option&gt;&lt;/option&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"option","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\noption(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"para(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"para(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"para","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"para","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<p\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</p>\"\n"}},{"id":"para(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"para(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"para","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"para","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<p\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</p>\"\n"}},{"id":"para(content:String|Lucky::AllowedInTags)-instance-method","html_id":"para(content:String|Lucky::AllowedInTags)-instance-method","name":"para","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"para","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"para(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"para(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"para(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"para","doc":"Generates a `&lt;para&gt;&lt;/para&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\npara(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <para class=\"cls-1 red\" required>Sample</para>\n```","summary":"<p>Generates a <code>&lt;para&gt;&lt;/para&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"para","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\npara(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"pre(content:String|Lucky::AllowedInTags)-instance-method","html_id":"pre(content:String|Lucky::AllowedInTags)-instance-method","name":"pre","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"pre","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"pre(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"pre(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"pre(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"pre","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"pre","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<pre\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</pre>\"\n"}},{"id":"pre(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"pre(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"pre","doc":"Generates a `&lt;pre&gt;&lt;/pre&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\npre(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <pre class=\"cls-1 red\" required>Sample</pre>\n```","summary":"<p>Generates a <code>&lt;pre&gt;&lt;/pre&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"pre","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\npre(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"pre(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"pre(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"pre","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"pre","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<pre\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</pre>\"\n"}},{"id":"progress(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"progress(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"progress","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"progress","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<progress\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</progress>\"\n"}},{"id":"progress(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"progress(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"progress","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"progress","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<progress\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</progress>\"\n"}},{"id":"progress(content:String|Lucky::AllowedInTags)-instance-method","html_id":"progress(content:String|Lucky::AllowedInTags)-instance-method","name":"progress","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"progress","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"progress(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"progress(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"progress(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"progress","doc":"Generates a `&lt;progress&gt;&lt;/progress&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nprogress(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <progress class=\"cls-1 red\" required>Sample</progress>\n```","summary":"<p>Generates a <code>&lt;progress&gt;&lt;/progress&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"progress","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nprogress(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"rp(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"rp(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"rp","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"rp","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<rp\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</rp>\"\n"}},{"id":"rp(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"rp(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"rp","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"rp","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<rp\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</rp>\"\n"}},{"id":"rp(content:String|Lucky::AllowedInTags)-instance-method","html_id":"rp(content:String|Lucky::AllowedInTags)-instance-method","name":"rp","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"rp","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"rp(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"rp(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"rp(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"rp","doc":"Generates a `&lt;rp&gt;&lt;/rp&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nrp(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <rp class=\"cls-1 red\" required>Sample</rp>\n```","summary":"<p>Generates a <code>&lt;rp&gt;&lt;/rp&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"rp","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nrp(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"rt(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"rt(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"rt","doc":"Generates a `&lt;rt&gt;&lt;/rt&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nrt(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <rt class=\"cls-1 red\" required>Sample</rt>\n```","summary":"<p>Generates a <code>&lt;rt&gt;&lt;/rt&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"rt","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nrt(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"rt(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"rt(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"rt","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"rt","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<rt\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</rt>\"\n"}},{"id":"rt(content:String|Lucky::AllowedInTags)-instance-method","html_id":"rt(content:String|Lucky::AllowedInTags)-instance-method","name":"rt","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"rt","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"rt(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"rt(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"rt(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"rt","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"rt","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<rt\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</rt>\"\n"}},{"id":"ruby(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"ruby(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"ruby","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"ruby","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<ruby\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</ruby>\"\n"}},{"id":"ruby(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"ruby(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"ruby","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"ruby","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<ruby\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</ruby>\"\n"}},{"id":"ruby(content:String|Lucky::AllowedInTags)-instance-method","html_id":"ruby(content:String|Lucky::AllowedInTags)-instance-method","name":"ruby","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"ruby","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ruby(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"ruby(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"ruby(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"ruby","doc":"Generates a `&lt;ruby&gt;&lt;/ruby&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nruby(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <ruby class=\"cls-1 red\" required>Sample</ruby>\n```","summary":"<p>Generates a <code>&lt;ruby&gt;&lt;/ruby&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"ruby","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nruby(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"s(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"s(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"s","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"s","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<s\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</s>\"\n"}},{"id":"s(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"s(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"s","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"s","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<s\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</s>\"\n"}},{"id":"s(content:String|Lucky::AllowedInTags)-instance-method","html_id":"s(content:String|Lucky::AllowedInTags)-instance-method","name":"s","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"s","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"s(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"s(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"s(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"s","doc":"Generates a `&lt;s&gt;&lt;/s&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ns(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <s class=\"cls-1 red\" required>Sample</s>\n```","summary":"<p>Generates a <code>&lt;s&gt;&lt;/s&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"s","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ns(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"script(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"script(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"script","doc":"Generates a `&lt;script&gt;&lt;/script&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nscript(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <script class=\"cls-1 red\" required>Sample</script>\n```","summary":"<p>Generates a <code>&lt;script&gt;&lt;/script&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"script","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nscript(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"script(content:String|Lucky::AllowedInTags)-instance-method","html_id":"script(content:String|Lucky::AllowedInTags)-instance-method","name":"script","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"script","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"script(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"script(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"script(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"script","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"script","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<script\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</script>\"\n"}},{"id":"script(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"script(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"script","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"script","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<script\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</script>\"\n"}},{"id":"section(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"section(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"section","doc":"Generates a `&lt;section&gt;&lt;/section&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nsection(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <section class=\"cls-1 red\" required>Sample</section>\n```","summary":"<p>Generates a <code>&lt;section&gt;&lt;/section&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"section","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nsection(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"section(content:String|Lucky::AllowedInTags)-instance-method","html_id":"section(content:String|Lucky::AllowedInTags)-instance-method","name":"section","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"section","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"section(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"section(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"section(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"section","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"section","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<section\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</section>\"\n"}},{"id":"section(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"section(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"section","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"section","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<section\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</section>\"\n"}},{"id":"select_tag(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"select_tag(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"select_tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"select_tag","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<select\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</select>\"\n"}},{"id":"select_tag(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"select_tag(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"select_tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"select_tag","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<select\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</select>\"\n"}},{"id":"select_tag(content:String|Lucky::AllowedInTags)-instance-method","html_id":"select_tag(content:String|Lucky::AllowedInTags)-instance-method","name":"select_tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"select_tag","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"select_tag(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"select_tag(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"select_tag(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"select_tag","doc":"Generates a `&lt;select_tag&gt;&lt;/select_tag&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nselect_tag(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <select_tag class=\"cls-1 red\" required>Sample</select_tag>\n```","summary":"<p>Generates a <code>&lt;select_tag&gt;&lt;/select_tag&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"select_tag","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nselect_tag(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"small(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"small(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"small","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"small","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<small\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</small>\"\n"}},{"id":"small(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"small(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"small","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"small","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<small\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</small>\"\n"}},{"id":"small(content:String|Lucky::AllowedInTags)-instance-method","html_id":"small(content:String|Lucky::AllowedInTags)-instance-method","name":"small","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"small","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"small(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"small(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"small(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"small","doc":"Generates a `&lt;small&gt;&lt;/small&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nsmall(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <small class=\"cls-1 red\" required>Sample</small>\n```","summary":"<p>Generates a <code>&lt;small&gt;&lt;/small&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"small","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nsmall(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"source(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"source(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"source","doc":"Generates a `&lt;source&gt;` tag.\n\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n\n```\nsource([:required], {\"class\" => \"cls-1\"}) #=> <source class=\"cls-1\" required>\n```","summary":"<p>Generates a <code>&lt;source&gt;</code> tag.</p>","abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"source","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"bool_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\nview << \"<source#{tag_attrs}#{bool_attrs}>\"\n"}},{"id":"source(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"source(options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"source","doc":"Generates a `&lt;source&gt;` tag.","summary":"<p>Generates a <code>&lt;source&gt;</code> tag.</p>","abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L68","def":{"name":"source","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"source([] of Symbol, options, **other_options)"}},{"id":"span(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"span(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"span","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"span","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<span\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</span>\"\n"}},{"id":"span(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"span(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"span","doc":"Generates a `&lt;span&gt;&lt;/span&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nspan(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <span class=\"cls-1 red\" required>Sample</span>\n```","summary":"<p>Generates a <code>&lt;span&gt;&lt;/span&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"span","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nspan(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"span(content:String|Lucky::AllowedInTags)-instance-method","html_id":"span(content:String|Lucky::AllowedInTags)-instance-method","name":"span","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"span","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"span(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"span(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"span(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"span","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"span","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<span\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</span>\"\n"}},{"id":"strong(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"strong(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"strong","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"strong","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<strong\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</strong>\"\n"}},{"id":"strong(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"strong(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"strong","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"strong","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<strong\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</strong>\"\n"}},{"id":"strong(content:String|Lucky::AllowedInTags)-instance-method","html_id":"strong(content:String|Lucky::AllowedInTags)-instance-method","name":"strong","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"strong","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"strong(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"strong(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"strong(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"strong","doc":"Generates a `&lt;strong&gt;&lt;/strong&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nstrong(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <strong class=\"cls-1 red\" required>Sample</strong>\n```","summary":"<p>Generates a <code>&lt;strong&gt;&lt;/strong&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"strong","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nstrong(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"style(styles:String)-instance-method","html_id":"style(styles:String)-instance-method","name":"style","doc":"Generates a `&lt;style&gt;&lt;/style&gt;` block for adding inline CSS\n\n```\nstyle(\"a { color: red; }\") # => <style>a { color: red; }</style>\n```","summary":"<p>Generates a <code>&lt;style&gt;&lt;/style&gt;</code> block for adding inline CSS</p>","abstract":false,"args":[{"name":"styles","doc":null,"default_value":"","external_name":"styles","restriction":"String"}],"args_string":"(styles : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L109","def":{"name":"style","args":[{"name":"styles","doc":null,"default_value":"","external_name":"styles","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"view << \"<style>#{styles}</style>\""}},{"id":"summary(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"summary(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"summary","doc":"Generates a `&lt;summary&gt;&lt;/summary&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nsummary(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <summary class=\"cls-1 red\" required>Sample</summary>\n```","summary":"<p>Generates a <code>&lt;summary&gt;&lt;/summary&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"summary","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nsummary(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"summary(content:String|Lucky::AllowedInTags)-instance-method","html_id":"summary(content:String|Lucky::AllowedInTags)-instance-method","name":"summary","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"summary","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"summary(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"summary(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"summary(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"summary","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"summary","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<summary\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</summary>\"\n"}},{"id":"summary(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"summary(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"summary","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"summary","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<summary\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</summary>\"\n"}},{"id":"table(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"table(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"table","doc":"Generates a `&lt;table&gt;&lt;/table&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ntable(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <table class=\"cls-1 red\" required>Sample</table>\n```","summary":"<p>Generates a <code>&lt;table&gt;&lt;/table&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"table","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntable(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"table(content:String|Lucky::AllowedInTags)-instance-method","html_id":"table(content:String|Lucky::AllowedInTags)-instance-method","name":"table","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"table","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"table(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"table(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"table(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"table","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"table","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<table\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</table>\"\n"}},{"id":"table(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"table(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"table","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"table","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<table\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</table>\"\n"}},{"id":"tbody(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"tbody(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"tbody","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"tbody","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<tbody\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</tbody>\"\n"}},{"id":"tbody(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"tbody(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"tbody","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"tbody","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<tbody\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</tbody>\"\n"}},{"id":"tbody(content:String|Lucky::AllowedInTags)-instance-method","html_id":"tbody(content:String|Lucky::AllowedInTags)-instance-method","name":"tbody","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"tbody","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"tbody(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"tbody(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"tbody(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"tbody","doc":"Generates a `&lt;tbody&gt;&lt;/tbody&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ntbody(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <tbody class=\"cls-1 red\" required>Sample</tbody>\n```","summary":"<p>Generates a <code>&lt;tbody&gt;&lt;/tbody&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"tbody","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntbody(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"td(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"td(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"td","doc":"Generates a `&lt;td&gt;&lt;/td&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ntd(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <td class=\"cls-1 red\" required>Sample</td>\n```","summary":"<p>Generates a <code>&lt;td&gt;&lt;/td&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"td","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntd(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"td(content:String|Lucky::AllowedInTags)-instance-method","html_id":"td(content:String|Lucky::AllowedInTags)-instance-method","name":"td","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"td","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"td(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"td(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"td(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"td","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"td","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<td\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</td>\"\n"}},{"id":"td(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"td(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"td","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"td","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<td\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</td>\"\n"}},{"id":"text(content:String|Lucky::AllowedInTags)-instance-method","html_id":"text(content:String|Lucky::AllowedInTags)-instance-method","name":"text","doc":"Outputs *content* and escapes it.\n\n```\ntext(\"Hello\") # => Hello\ntext(\"<div>\") # => &lt;div&gt;\n```","summary":"<p>Outputs <em>content</em> and escapes it.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L100","def":{"name":"text","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"view << (HTML.escape(content.to_s))"}},{"id":"textarea(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"textarea(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"textarea","doc":"Generates a `&lt;textarea&gt;&lt;/textarea&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ntextarea(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <textarea class=\"cls-1 red\" required>Sample</textarea>\n```","summary":"<p>Generates a <code>&lt;textarea&gt;&lt;/textarea&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"textarea","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntextarea(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"textarea(content:String|Lucky::AllowedInTags)-instance-method","html_id":"textarea(content:String|Lucky::AllowedInTags)-instance-method","name":"textarea","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"textarea","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"textarea(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"textarea(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"textarea(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"textarea","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"textarea","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<textarea\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</textarea>\"\n"}},{"id":"textarea(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"textarea(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"textarea","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"textarea","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<textarea\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</textarea>\"\n"}},{"id":"th(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"th(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"th","doc":"Generates a `&lt;th&gt;&lt;/th&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nth(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <th class=\"cls-1 red\" required>Sample</th>\n```","summary":"<p>Generates a <code>&lt;th&gt;&lt;/th&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"th","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nth(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"th(content:String|Lucky::AllowedInTags)-instance-method","html_id":"th(content:String|Lucky::AllowedInTags)-instance-method","name":"th","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"th","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"th(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"th(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"th(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"th","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"th","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<th\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</th>\"\n"}},{"id":"th(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"th(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"th","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"th","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<th\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</th>\"\n"}},{"id":"thead(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"thead(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"thead","doc":"Generates a `&lt;thead&gt;&lt;/thead&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nthead(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <thead class=\"cls-1 red\" required>Sample</thead>\n```","summary":"<p>Generates a <code>&lt;thead&gt;&lt;/thead&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"thead","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nthead(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"thead(content:String|Lucky::AllowedInTags)-instance-method","html_id":"thead(content:String|Lucky::AllowedInTags)-instance-method","name":"thead","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"thead","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"thead(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"thead(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"thead(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"thead","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"thead","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<thead\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</thead>\"\n"}},{"id":"thead(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"thead(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"thead","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"thead","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<thead\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</thead>\"\n"}},{"id":"time(content:String|Lucky::AllowedInTags)-instance-method","html_id":"time(content:String|Lucky::AllowedInTags)-instance-method","name":"time","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"time","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"time(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"time(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"time(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"time","doc":"Generates a `&lt;time&gt;&lt;/time&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ntime(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <time class=\"cls-1 red\" required>Sample</time>\n```","summary":"<p>Generates a <code>&lt;time&gt;&lt;/time&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"time","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntime(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"time(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"time(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"time","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"time","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<time\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</time>\"\n"}},{"id":"time(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"time(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"time","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"time","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<time\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</time>\"\n"}},{"id":"title(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"title(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"title","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"title","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<title\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</title>\"\n"}},{"id":"title(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"title(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"title","doc":"Generates a `&lt;title&gt;&lt;/title&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ntitle(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <title class=\"cls-1 red\" required>Sample</title>\n```","summary":"<p>Generates a <code>&lt;title&gt;&lt;/title&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"title","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntitle(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"title(content:String|Lucky::AllowedInTags)-instance-method","html_id":"title(content:String|Lucky::AllowedInTags)-instance-method","name":"title","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"title","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"title(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"title(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"title(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"title","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"title","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<title\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</title>\"\n"}},{"id":"tr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"tr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"tr","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"tr","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<tr\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</tr>\"\n"}},{"id":"tr(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"tr(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"tr","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"tr","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<tr\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</tr>\"\n"}},{"id":"tr(content:String|Lucky::AllowedInTags)-instance-method","html_id":"tr(content:String|Lucky::AllowedInTags)-instance-method","name":"tr","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"tr","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"tr(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"tr(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"tr(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"tr","doc":"Generates a `&lt;tr&gt;&lt;/tr&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\ntr(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <tr class=\"cls-1 red\" required>Sample</tr>\n```","summary":"<p>Generates a <code>&lt;tr&gt;&lt;/tr&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"tr","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntr(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"u(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"u(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"u","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"u","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<u\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</u>\"\n"}},{"id":"u(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"u(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"u","doc":"Generates a `&lt;u&gt;&lt;/u&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nu(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <u class=\"cls-1 red\" required>Sample</u>\n```","summary":"<p>Generates a <code>&lt;u&gt;&lt;/u&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"u","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nu(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"u(content:String|Lucky::AllowedInTags)-instance-method","html_id":"u(content:String|Lucky::AllowedInTags)-instance-method","name":"u","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"u","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"u(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"u(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"u(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"u","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"u","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<u\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</u>\"\n"}},{"id":"ul(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"ul(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"ul","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"ul","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<ul\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</ul>\"\n"}},{"id":"ul(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"ul(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"ul","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"ul","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<ul\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</ul>\"\n"}},{"id":"ul(content:String|Lucky::AllowedInTags)-instance-method","html_id":"ul(content:String|Lucky::AllowedInTags)-instance-method","name":"ul","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"ul","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ul(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"ul(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"ul(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"ul","doc":"Generates a `&lt;ul&gt;&lt;/ul&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nul(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <ul class=\"cls-1 red\" required>Sample</ul>\n```","summary":"<p>Generates a <code>&lt;ul&gt;&lt;/ul&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"ul","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nul(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"video(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"video(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"video","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"video","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<video\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</video>\"\n"}},{"id":"video(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"video(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"video","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"video","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<video\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</video>\"\n"}},{"id":"video(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"video(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"video","doc":"Generates a `&lt;video&gt;&lt;/video&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nvideo(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <video class=\"cls-1 red\" required>Sample</video>\n```","summary":"<p>Generates a <code>&lt;video&gt;&lt;/video&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"video","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nvideo(attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"video(content:String|Lucky::AllowedInTags)-instance-method","html_id":"video(content:String|Lucky::AllowedInTags)-instance-method","name":"video","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"video","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"video(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"wbr(options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"wbr(options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"wbr","doc":null,"summary":null,"abstract":false,"args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"wbr","args":[{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<wbr\") << tag_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</wbr>\"\n"}},{"id":"wbr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"wbr(attrs:Array(Symbol),options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"wbr","doc":null,"summary":null,"abstract":false,"args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(attrs : Array(Symbol), options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":null,"def":{"name":"wbr","args":[{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"boolean_attrs = build_boolean_attrs(attrs)\nmerged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n(((view << \"<wbr\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</wbr>\"\n"}},{"id":"wbr(content:String|Lucky::AllowedInTags)-instance-method","html_id":"wbr(content:String|Lucky::AllowedInTags)-instance-method","name":"wbr","doc":null,"summary":null,"abstract":false,"args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(content : String | Lucky::AllowedInTags)","source_link":null,"def":{"name":"wbr","args":[{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"wbr(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"wbr(content:Lucky::AllowedInTags|String=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"wbr(content:Lucky::AllowedInTags|String=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"wbr","doc":"Generates a `&lt;wbr&gt;&lt;/wbr&gt;` tag.\n\n* The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n* The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n* The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n```\nwbr(\"Sample\", {\"class\" => \"cls-1 red\"}, [:required]) #=> <wbr class=\"cls-1 red\" required>Sample</wbr>\n```","summary":"<p>Generates a <code>&lt;wbr&gt;&lt;/wbr&gt;</code> tag.</p>","abstract":false,"args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(content : Lucky::AllowedInTags | String = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":null,"def":{"name":"wbr","args":[{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\nwbr(attrs, merged_options) do\n  text(content)\nend\n"}}],"macros":[{"id":"generate_tag_methods(method_name,tag)-macro","html_id":"generate_tag_methods(method_name,tag)-macro","name":"generate_tag_methods","doc":null,"summary":null,"abstract":false,"args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""}],"args_string":"(method_name, tag)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/base_tags.cr#L8","def":{"name":"generate_tag_methods","args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""},{"name":"tag","doc":null,"default_value":"","external_name":"tag","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n# Generates a `&lt;\n{{ method_name.id }}\n&gt;&lt;/\n{{ method_name.id }}\n&gt;` tag.\n\n    \n#\n\n    \n# * The *content* argument is either a `String`, or any type that has included `Lucky::AllowedInTags`. This is the content that goes inside of the tag.\n\n    \n# * The *options* argument is a `Hash(String, String)` of any HTML attribute that has a key/value like `class`, `id`, `type`, etc...\n\n    \n# * The *attrs* argument is an `Array(Symbol)` for specifying [Boolean Attributes](https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes) such as `required`, `disabled`, `autofocus`, etc...\n\n    \n#\n\n    \n# ```\n\n    \n# \n{{ method_name.id }}\n(\"Sample\", \n{\"class\" => \"cls-1 red\"}, [:required]) #=> <\n{{ method_name.id }}\n class=\"cls-1 red\" required>Sample</\n{{ method_name.id }}\n>\n\n    \n# ```\n\n    def \n{{ method_name.id }}\n(\n        content : Lucky::AllowedInTags | String = \"\",\n        options = EMPTY_HTML_ATTRS,\n        attrs : Array(Symbol) = [] of Symbol,\n        **other_options\n      )\n      merged_options = merge_options(other_options, options)\n      \n{{ method_name.id }}\n(attrs, merged_options) do\n        text content\n      \nend\n    \nend\n\n    def \n{{ method_name.id }}\n(content : String | Lucky::AllowedInTags)\n      \n{{ method_name.id }}\n(EMPTY_HTML_ATTRS) do\n        text content\n      \nend\n    \nend\n\n    def \n{{ method_name.id }}\n(&block)\n      \n{{ method_name.id }}\n(EMPTY_HTML_ATTRS) do\n        yield\n      \nend\n    \nend\n\n    def \n{{ method_name.id }}\n(options = EMPTY_HTML_ATTRS, **other_options, &block)\n      merged_options = merge_options(other_options, options)\n      tag_attrs = build_tag_attrs(merged_options)\n      view << \"<\n{{ tag.id }}\n\" << tag_attrs << \">\"\n      check_tag_content!(yield)\n      view << \"</\n{{ tag.id }}\n>\"\n    \nend\n\n    def \n{{ method_name.id }}\n(attrs : Array(Symbol), options = EMPTY_HTML_ATTRS, **other_options, &block)\n      boolean_attrs = build_boolean_attrs(attrs)\n      merged_options = merge_options(other_options, options)\n      tag_attrs = build_tag_attrs(merged_options)\n      view << \"<\n{{ tag.id }}\n\" << tag_attrs << boolean_attrs << \">\"\n      check_tag_content!(yield)\n      view << \"</\n{{ tag.id }}\n>\"\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/CookieJar","path":"Lucky/CookieJar.html","kind":"class","full_name":"Lucky::CookieJar","name":"CookieJar","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/cookies/cookie_jar.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: on_set : (HTTP::Cookie -> HTTP::Cookie) | ::Nil, example: nil}] of Nil","doc":null,"summary":null},{"id":"LUCKY_ENCRYPTION_PREFIX","name":"LUCKY_ENCRYPTION_PREFIX","value":"(Base64.encode(\"lucky\")) + \"--\"","doc":null,"summary":null},{"id":"MAX_COOKIE_SIZE","name":"MAX_COOKIE_SIZE","value":"4096","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L8","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"empty_jar:Lucky::CookieJar-class-method","html_id":"empty_jar:Lucky::CookieJar-class-method","name":"empty_jar","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Lucky::CookieJar","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L16","def":{"name":"empty_jar","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::CookieJar","visibility":"Public","body":"new"}},{"id":"from_request_cookies(cookies:HTTP::Cookies):Lucky::CookieJar-class-method","html_id":"from_request_cookies(cookies:HTTP::Cookies):Lucky::CookieJar-class-method","name":"from_request_cookies","doc":null,"summary":null,"abstract":false,"args":[{"name":"cookies","doc":null,"default_value":"","external_name":"cookies","restriction":"HTTP::Cookies"}],"args_string":"(cookies : HTTP::Cookies) : Lucky::CookieJar","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L12","def":{"name":"from_request_cookies","args":[{"name":"cookies","doc":null,"default_value":"","external_name":"cookies","restriction":"HTTP::Cookies"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::CookieJar","visibility":"Public","body":"new(cookies)"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L8","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"clear:Void-instance-method","html_id":"clear:Void-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Void","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L45","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Void","visibility":"Public","body":"cookies.each do |cookie|\n  delete(cookie.name)\nend"}},{"id":"delete(key:Key):Nil-instance-method","html_id":"delete(key:Key):Nil-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L51","def":{"name":"delete","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if cookie = cookies[key.to_s]\n  (cookie.expires(1.year.ago)).value(\"\")\n  set_cookies[key.to_s] = cookie\nend"}},{"id":"destroy-instance-method","html_id":"destroy-instance-method","name":"destroy","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L37","def":{"name":"destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(\"CookieJar#destroy has been renamed to CookieJar#clear to match Hash#clear\") %}"}},{"id":"get(key:Key):String-instance-method","html_id":"get(key:Key):String-instance-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L66","def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(get?(key)) || (raise(\"No cookie for '#{key}'\"))"}},{"id":"get?(key:Key):String?-instance-method","html_id":"get?(key:Key):String?-instance-method","name":"get?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L70","def":{"name":"get?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"begin\n  cookies[key.to_s]?.try do |cookie|\n    decrypt(cookie.value, cookie.name)\n  end\nrescue OpenSSL::Cipher::Error\n  nil\nend"}},{"id":"get_raw(key:Key):HTTP::Cookie-instance-method","html_id":"get_raw(key:Key):HTTP::Cookie-instance-method","name":"get_raw","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : HTTP::Cookie","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L58","def":{"name":"get_raw","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Cookie","visibility":"Public","body":"(get_raw?(key)) || (raise(\"No cookie with the key: #{key}\"))"}},{"id":"get_raw?(key:Key):HTTP::Cookie?-instance-method","html_id":"get_raw?(key:Key):HTTP::Cookie?-instance-method","name":"get_raw?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : HTTP::Cookie?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L62","def":{"name":"get_raw?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Cookie | ::Nil","visibility":"Public","body":"cookies[key.to_s]?"}},{"id":"raw:HTTP::Cookies-instance-method","html_id":"raw:HTTP::Cookies-instance-method","name":"raw","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Cookies","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L29","def":{"name":"raw","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Cookies","visibility":"Public","body":"cookies"}},{"id":"set(key:Key,value:String):HTTP::Cookie-instance-method","html_id":"set(key:Key,value:String):HTTP::Cookie-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(key : Key, value : String) : HTTP::Cookie","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L78","def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Cookie","visibility":"Public","body":"set_raw(key, encrypt(value))"}},{"id":"set_raw(key:Key,value:String):HTTP::Cookie-instance-method","html_id":"set_raw(key:Key,value:String):HTTP::Cookie-instance-method","name":"set_raw","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(key : Key, value : String) : HTTP::Cookie","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L82","def":{"name":"set_raw","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Cookie","visibility":"Public","body":"raw_cookie = HTTP::Cookie.new(name: key.to_s, value: value, http_only: true).tap do |cookie|\n  settings.on_set.try(&.call(cookie))\nend\nif raw_cookie.to_set_cookie_header.bytesize > MAX_COOKIE_SIZE\n  raise(Lucky::CookieOverflowError.new(\"size of '#{key}' cookie is too big\"))\nend\ncookies[key.to_s] = set_cookies[key.to_s] = raw_cookie\n"}},{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L8","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}},{"id":"unset(*args)-instance-method","html_id":"unset(*args)-instance-method","name":"unset","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L41","def":{"name":"unset","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(\"use CookieJar#delete instead of CookieJar#unset\") %}"}},{"id":"updated:HTTP::Cookies-instance-method","html_id":"updated:HTTP::Cookies-instance-method","name":"updated","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Cookies","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr#L33","def":{"name":"updated","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::Cookies","visibility":"Public","body":"set_cookies"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/CookieJar/Key","path":"Lucky/CookieJar/Key.html","kind":"alias","full_name":"Lucky::CookieJar::Key","name":"Key","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/cookies/cookie_jar.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":true,"aliased":"(String | Symbol)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/CookieJar","kind":"class","full_name":"Lucky::CookieJar","name":"CookieJar"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/CookieJar/Settings","path":"Lucky/CookieJar/Settings.html","kind":"class","full_name":"Lucky::CookieJar::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/cookies/cookie_jar.cr","line_number":8,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/cookie_jar.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/CookieJar","kind":"class","full_name":"Lucky::CookieJar","name":"CookieJar"},"doc":null,"summary":null,"class_methods":[{"id":"on_set-class-method","html_id":"on_set-class-method","name":"on_set","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"on_set","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@on_set"}},{"id":"on_set=(value:HTTP::Cookie->HTTP::Cookie?)-class-method","html_id":"on_set=(value:HTTP::Cookie-&gt;HTTP::Cookie?)-class-method","name":"on_set=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"(HTTP::Cookie -> HTTP::Cookie) | ::Nil"}],"args_string":"(value : HTTP::Cookie -> HTTP::Cookie?)","source_link":null,"def":{"name":"on_set=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"(HTTP::Cookie -> HTTP::Cookie) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@on_set = value"}},{"id":"on_set?-class-method","html_id":"on_set?-class-method","name":"on_set?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"on_set?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@on_set"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/CookieOverflowError","path":"Lucky/CookieOverflowError.html","kind":"class","full_name":"Lucky::CookieOverflowError","name":"CookieOverflowError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":99,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Raised when storing more than 4K of session data.","summary":"<p>Raised when storing more than 4K of session data.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/CustomTags","path":"Lucky/CustomTags.html","kind":"module","full_name":"Lucky::CustomTags","name":"CustomTags","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"}],"locations":[{"filename":"lucky/tags/custom_tags.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/custom_tags.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EMPTY_HTML_ATTRS","name":"EMPTY_HTML_ATTRS","value":"{} of String => String","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"empty_tag(name:String,options=EMPTY_HTML_ATTRS,**other_options)-instance-method","html_id":"empty_tag(name:String,options=EMPTY_HTML_ATTRS,**other_options)-instance-method","name":"empty_tag","doc":"Outputs a custom tag with no tag closing.\n`empty_tag(\"br\")` => `<br>`","summary":"<p>Outputs a custom tag with no tag closing.</p>","abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(name : String, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/custom_tags.cr#L42","def":{"name":"empty_tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\n((view << \"<#{name}\") << tag_attrs) << \">\"\n"}},{"id":"tag(name:String,content:Lucky::AllowedInTags|String?=&quot;&quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","html_id":"tag(name:String,content:Lucky::AllowedInTags|String?=&amp;quot;&amp;quot;,options=EMPTY_HTML_ATTRS,attrs:Array(Symbol)=[]ofSymbol,**other_options)-instance-method","name":"tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String | ::Nil"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(name : String, content : Lucky::AllowedInTags | String? = <span class=\"s\">&quot;&quot;</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, **other_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/custom_tags.cr#L5","def":{"name":"tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"content","doc":null,"default_value":"\"\"","external_name":"content","restriction":"Lucky::AllowedInTags | String | ::Nil"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag(name, attrs, merged_options) do\n  text(content)\nend\n"}},{"id":"tag(name:String,content:String|Lucky::AllowedInTags)-instance-method","html_id":"tag(name:String,content:String|Lucky::AllowedInTags)-instance-method","name":"tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"args_string":"(name : String, content : String | Lucky::AllowedInTags)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/custom_tags.cr#L19","def":{"name":"tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"content","doc":null,"default_value":"","external_name":"content","restriction":"String | Lucky::AllowedInTags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"tag(EMPTY_HTML_ATTRS) do\n  text(content)\nend"}},{"id":"tag(name:String,attrs:Array(Symbol)=[]ofSymbol,options=EMPTY_HTML_ATTRS,**other_options,&)-instance-method","html_id":"tag(name:String,attrs:Array(Symbol)=[]ofSymbol,options=EMPTY_HTML_ATTRS,**other_options,&amp;)-instance-method","name":"tag","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"args_string":"(name : String, attrs : Array(Symbol) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Symbol</span>, options = <span class=\"t\">EMPTY_HTML_ATTRS</span>, **other_options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/custom_tags.cr#L31","def":{"name":"tag","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"attrs","doc":null,"default_value":"[] of Symbol","external_name":"attrs","restriction":"Array(Symbol)"},{"name":"options","doc":null,"default_value":"EMPTY_HTML_ATTRS","external_name":"options","restriction":""}],"double_splat":{"name":"other_options","doc":null,"default_value":"","external_name":"other_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"merged_options = merge_options(other_options, options)\ntag_attrs = build_tag_attrs(merged_options)\nboolean_attrs = build_boolean_attrs(attrs)\n(((view << \"<#{name}\") << tag_attrs) << boolean_attrs) << \">\"\ncheck_tag_content!(yield)\nview << \"</#{name}>\"\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Error","path":"Lucky/Error.html","kind":"class","full_name":"Lucky::Error","name":"Error","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":5,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/luckyframework/lucky/Lucky/CookieOverflowError","kind":"class","full_name":"Lucky::CookieOverflowError","name":"CookieOverflowError"},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidFlashJSONError","kind":"class","full_name":"Lucky::InvalidFlashJSONError","name":"InvalidFlashJSONError"},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidMessageError","kind":"class","full_name":"Lucky::InvalidMessageError","name":"InvalidMessageError"},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidParamError","kind":"class","full_name":"Lucky::InvalidParamError","name":"InvalidParamError"},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidSignatureError","kind":"class","full_name":"Lucky::InvalidSignatureError","name":"InvalidSignatureError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingFileError","kind":"class","full_name":"Lucky::MissingFileError","name":"MissingFileError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingNestedParamError","kind":"class","full_name":"Lucky::MissingNestedParamError","name":"MissingNestedParamError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingParamError","kind":"class","full_name":"Lucky::MissingParamError","name":"MissingParamError"},{"html_id":"github.com/luckyframework/lucky/Lucky/NotAcceptableError","kind":"class","full_name":"Lucky::NotAcceptableError","name":"NotAcceptableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/ParamParsingError","kind":"class","full_name":"Lucky::ParamParsingError","name":"ParamParsingError"},{"html_id":"github.com/luckyframework/lucky/Lucky/RouteNotFoundError","kind":"class","full_name":"Lucky::RouteNotFoundError","name":"RouteNotFoundError"},{"html_id":"github.com/luckyframework/lucky/Lucky/UnknownAcceptHeaderError","kind":"class","full_name":"Lucky::UnknownAcceptHeaderError","name":"UnknownAcceptHeaderError"}],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"= Lucky Errors\n\nGeneric Lucky Record exception class.","summary":"<p>= Lucky Errors</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/ErrorAction","path":"Lucky/ErrorAction.html","kind":"class","full_name":"Lucky::ErrorAction","name":"ErrorAction","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Exposable","kind":"module","full_name":"Lucky::Exposable","name":"Exposable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Redirectable","kind":"module","full_name":"Lucky::Redirectable","name":"Redirectable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Renderable","kind":"module","full_name":"Lucky::Renderable","name":"Renderable"},{"html_id":"github.com/luckyframework/lucky/Lucky/ActionDelegates","kind":"module","full_name":"Lucky::ActionDelegates","name":"ActionDelegates"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/error_action.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EXPOSURES","name":"EXPOSURES","value":"[] of Symbol","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/ActionDelegates","kind":"module","full_name":"Lucky::ActionDelegates","name":"ActionDelegates"},{"html_id":"github.com/luckyframework/lucky/Lucky/Exposable","kind":"module","full_name":"Lucky::Exposable","name":"Exposable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Redirectable","kind":"module","full_name":"Lucky::Redirectable","name":"Redirectable"},{"html_id":"github.com/luckyframework/lucky/Lucky/Renderable","kind":"module","full_name":"Lucky::Renderable","name":"Renderable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context)-class-method","html_id":"new(context:HTTP::Server::Context)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L29","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"_dont_report-instance-method","html_id":"_dont_report-instance-method","name":"_dont_report","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L15","def":{"name":"_dont_report","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"[] of Exception.class"}},{"id":"context:HTTP::Server::Context-instance-method","html_id":"context:HTTP::Server::Context-instance-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Server::Context","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L13","def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@context"}},{"id":"cookies(*args,**options)-instance-method","html_id":"cookies(*args,**options)-instance-method","name":"cookies","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"cookies","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.cookies(*args, **options)"}},{"id":"cookies(*args,**options,&)-instance-method","html_id":"cookies(*args,**options,&amp;)-instance-method","name":"cookies","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"cookies","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.cookies(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"default_render(error:Exception):Lucky::Response-instance-method","html_id":"default_render(error:Exception):Lucky::Response-instance-method","name":"default_render","doc":null,"summary":null,"abstract":true,"args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"args_string":"(error : Exception) : Lucky::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L36","def":{"name":"default_render","args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::Response","visibility":"Public","body":""}},{"id":"flash(*args,**options)-instance-method","html_id":"flash(*args,**options)-instance-method","name":"flash","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"flash","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.flash(*args, **options)"}},{"id":"flash(*args,**options,&)-instance-method","html_id":"flash(*args,**options,&amp;)-instance-method","name":"flash","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"flash","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.flash(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"perform_action(error:Exception)-instance-method","html_id":"perform_action(error:Exception)-instance-method","name":"perform_action","doc":null,"summary":null,"abstract":false,"args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"args_string":"(error : Exception)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L39","def":{"name":"perform_action","args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"response = (render(error)) || (default_render(error))\nensure_response_is_returned(response)\nif html? && Lucky::ErrorHandler.settings.show_debug_output\n  response = render_exception_page(error, response.status)\nend\nresponse.print\nif !(_dont_report.includes?(error.class))\n  report(error)\nend\n"}},{"id":"render_exception_page(error:Exception,status:Int):Lucky::Response-instance-method","html_id":"render_exception_page(error:Exception,status:Int):Lucky::Response-instance-method","name":"render_exception_page","doc":null,"summary":null,"abstract":false,"args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int"}],"args_string":"(error : Exception, status : Int) : Lucky::Response","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L80","def":{"name":"render_exception_page","args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::Response","visibility":"Public","body":"Lucky::TextResponse.new(context: context, status: status, content_type: \"text/html\", body: (Lucky::ExceptionPage.for_runtime_exception(context, error)).to_s)"}},{"id":"report(error:Exception):Nil-instance-method","html_id":"report(error:Exception):Nil-instance-method","name":"report","doc":null,"summary":null,"abstract":true,"args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"args_string":"(error : Exception) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L37","def":{"name":"report","args":[{"name":"error","doc":null,"default_value":"","external_name":"error","restriction":"Exception"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}},{"id":"request(*args,**options)-instance-method","html_id":"request(*args,**options)-instance-method","name":"request","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"request","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.request(*args, **options)"}},{"id":"request(*args,**options,&)-instance-method","html_id":"request(*args,**options,&amp;)-instance-method","name":"request","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"request","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.request(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"response(*args,**options)-instance-method","html_id":"response(*args,**options)-instance-method","name":"response","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"response","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response(*args, **options)"}},{"id":"response(*args,**options,&)-instance-method","html_id":"response(*args,**options,&amp;)-instance-method","name":"response","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"response","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.response(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"session(*args,**options)-instance-method","html_id":"session(*args,**options)-instance-method","name":"session","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":null,"def":{"name":"session","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"context.session(*args, **options)"}},{"id":"session(*args,**options,&)-instance-method","html_id":"session(*args,**options,&amp;)-instance-method","name":"session","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":null,"def":{"name":"session","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"context.session(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}],"macros":[{"id":"dont_report(exception_classes)-macro","html_id":"dont_report(exception_classes)-macro","name":"dont_report","doc":null,"summary":null,"abstract":false,"args":[{"name":"exception_classes","doc":null,"default_value":"","external_name":"exception_classes","restriction":""}],"args_string":"(exception_classes)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_action.cr#L19","def":{"name":"dont_report","args":[{"name":"exception_classes","doc":null,"default_value":"","external_name":"exception_classes","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if exception_classes.is_a?(ArrayLiteral) %}\n      def _dont_report\n        {{ exception_classes }} of Exception.class\n      end\n    {% else %}\n      {% exception_classes.raise(\"dont_report expects an array of Exception classes.\") %}\n    {% end %}\n\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/ErrorHandler","path":"Lucky/ErrorHandler.html","kind":"class","full_name":"Lucky::ErrorHandler","name":"ErrorHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/error_handler.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: show_debug_output : Bool, example: nil}, {decl: logger : Dexter::Logger = Lucky.logger, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_handler.cr#L4","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_handler.cr#L4","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[{"id":"new(action:Lucky::ErrorAction.class)-class-method","html_id":"new(action:Lucky::ErrorAction.class)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Lucky::ErrorAction.class"}],"args_string":"(action : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">ErrorAction</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_handler.cr#L11","def":{"name":"new","args":[{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Lucky::ErrorAction.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(action)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context:HTTP::Server::Context)-instance-method","html_id":"call(context:HTTP::Server::Context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_handler.cr#L14","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  call_next(context)\nrescue error : Exception\n  call_error_action(context, error)\nend"}},{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_handler.cr#L4","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/ErrorHandler/Settings","path":"Lucky/ErrorHandler/Settings.html","kind":"class","full_name":"Lucky::ErrorHandler::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/error_handler.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/error_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/ErrorHandler","kind":"class","full_name":"Lucky::ErrorHandler","name":"ErrorHandler"},"doc":null,"summary":null,"class_methods":[{"id":"logger-class-method","html_id":"logger-class-method","name":"logger","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger.not_nil!"}},{"id":"logger=(value:Dexter::Logger)-class-method","html_id":"logger=(value:Dexter::Logger)-class-method","name":"logger=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Dexter::Logger"}],"args_string":"(value : Dexter::Logger)","source_link":null,"def":{"name":"logger=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Dexter::Logger"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger = value"}},{"id":"logger?-class-method","html_id":"logger?-class-method","name":"logger?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"logger?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger"}},{"id":"show_debug_output-class-method","html_id":"show_debug_output-class-method","name":"show_debug_output","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"show_debug_output","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@show_debug_output.not_nil!"}},{"id":"show_debug_output=(value:Bool)-class-method","html_id":"show_debug_output=(value:Bool)-class-method","name":"show_debug_output=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","source_link":null,"def":{"name":"show_debug_output=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@show_debug_output = value"}},{"id":"show_debug_output?-class-method","html_id":"show_debug_output?-class-method","name":"show_debug_output?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"show_debug_output?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@show_debug_output"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/ExceptionPage","path":"Lucky/ExceptionPage.html","kind":"class","full_name":"Lucky::ExceptionPage","name":"ExceptionPage","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/ExceptionPage","kind":"class","full_name":"ExceptionPage","name":"ExceptionPage"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/ExceptionPage","kind":"class","full_name":"ExceptionPage","name":"ExceptionPage"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/exception_page.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/exception_page.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"styles:ExceptionPage::Styles-instance-method","html_id":"styles:ExceptionPage::Styles-instance-method","name":"styles","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ExceptionPage::Styles","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/exception_page.cr#L2","def":{"name":"styles","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ExceptionPage::Styles","visibility":"Public","body":"Styles.new(accent: lucky_green)"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Exposable","path":"Lucky/Exposable.html","kind":"module","full_name":"Lucky::Exposable","name":"Exposable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/exposable.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/exposable.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"},{"html_id":"github.com/luckyframework/lucky/Lucky/ErrorAction","kind":"class","full_name":"Lucky::ErrorAction","name":"ErrorAction"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"expose(method_name)-macro","html_id":"expose(method_name)-macro","name":"expose","doc":"Sends the result of a method to the page as if it was passed as an argument.\n\nImagine having data that is used by many actions across your app, such\nas the current user. It can get tedious to pass that data for every action.\nThe `expose` macro will make sure that whatever data you need is passed\nautomatically.\n\nHere's what things might look like without `expose`:\n\n```\nclass BrowserAction\n  def current_user\n    # some way to find the current user\n  end\nend\n```\n\nEach action must pass `current_user` manually. Note that each action\ninherits from `BrowserAction` and therefore has access to `current_user`:\n\n```\nclass Messages::Index < BrowserAction\n  route do\n    html IndexPage, current_user: current_user\n  end\nend\n\nclass Messages::New < BrowserAction\n  route do\n    html NewPage, current_user: current_user\n  end\nend\n```\n\nPassing `current_user: current_user` every time gets pretty old. Enter\n`expose`:\n\n```\nclass BrowserAction\n  expose current_user\n\n  def current_user\n    # some way to find the current user\n  end\nend\n```\n\nNow our actions are much nicer, especially when we start to have multiple\narguments for each action:\n\n```\nclass Messages::Index < BrowserAction\n  route do\n    html IndexPage\n  end\nend\n\nclass Messages::New < BrowserAction\n  route do\n    html NewPage\n  end\nend\n```\n\n## Exposing private methods\n\nAlso useful is the ability to make a private method available:\n\n```\nclass Messages::Show < BrowserAction\n  expose message\n\n  route do\n    html ShowPage\n  end\n\n  private def message\n    MessageQuery.find(id)\n  end\nend\n```\n\nUsing `expose` here will pass `message` to the `ShowPage`, while keeping the\nmethod private. Without `expose` the action would look like this:\n\n```\nroute do\n  html ShowPage, message: message\nend\n```","summary":"<p>Sends the result of a method to the page as if it was passed as an argument.</p>","abstract":false,"args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"args_string":"(method_name)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/exposable.cr#L109","def":{"name":"expose","args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% EXPOSURES << method_name.id %}\n\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/FileResponse","path":"Lucky/FileResponse.html","kind":"class","full_name":"Lucky::FileResponse","name":"FileResponse","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Response","kind":"class","full_name":"Lucky::Response","name":"Response"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Response","kind":"class","full_name":"Lucky::Response","name":"Response"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/file_response.cr","line_number":41,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_STATUS","name":"DEFAULT_STATUS","value":"200","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Return a file's contents for the request.\n\n`file` can be used to return a file and it's contents to the browser, or\nrender the contents of the file inline to a web browser. Options for the\nmethod:\n\n* `path` - first argument, _required_. The path to the file.\n* `content_type` - defaults to the mime-type that corresponds to the file's\n  extension.\n* `disposition` - default \"attachment\" (downloads file), or \"inline\"\n  (renders file in browser).\n* `filename` - default `nil`. When overridden and paired with\n  `disposition: \"attachment\"` this will download file with the provided\n  filename.\n* status - `Int32` - the HTTP status code to\n  return with.\n\nExamples:\n\n```crystal\nclass Rendering::File < Lucky::Action\n  get \"/file\" do\n    file \"spec/fixtures/lucky_logo.png\"\n  end\nend\n```\n\nFor a plain text file with no extension, have it downloaded with the file\nnamed \"custom.html\" and the content_type \"text/html\":\n\n```crystal\nclass Rendering::File::CustomContentType < Lucky::Action\n  get \"/foo\" do\n    file \"spec/fixtures/plain_text\",\n      disposition: \"attachment\",\n      filename: \"custom.html\",\n      content_type: \"text/html\"\n  end\nend\n```","summary":"<p>Return a file's contents for the request.</p>","class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context,path:String,content_type:String?=nil,disposition:String=&quot;attachment&quot;,filename:String?=nil,status:Int32?=nil,debug_message:String?=nil)-class-method","html_id":"new(context:HTTP::Server::Context,path:String,content_type:String?=nil,disposition:String=&amp;quot;attachment&amp;quot;,filename:String?=nil,status:Int32?=nil,debug_message:String?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content_type","doc":null,"default_value":"nil","external_name":"content_type","restriction":"String | ::Nil"},{"name":"disposition","doc":null,"default_value":"\"attachment\"","external_name":"disposition","restriction":"String"},{"name":"filename","doc":null,"default_value":"nil","external_name":"filename","restriction":"String | ::Nil"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"},{"name":"debug_message","doc":null,"default_value":"nil","external_name":"debug_message","restriction":"String | ::Nil"}],"args_string":"(context : HTTP::Server::Context, path : String, content_type : String? = <span class=\"n\">nil</span>, disposition : String = <span class=\"s\">&quot;attachment&quot;</span>, filename : String? = <span class=\"n\">nil</span>, status : Int32? = <span class=\"n\">nil</span>, debug_message : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L46","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content_type","doc":null,"default_value":"nil","external_name":"content_type","restriction":"String | ::Nil"},{"name":"disposition","doc":null,"default_value":"\"attachment\"","external_name":"disposition","restriction":"String"},{"name":"filename","doc":null,"default_value":"nil","external_name":"filename","restriction":"String | ::Nil"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"},{"name":"debug_message","doc":null,"default_value":"nil","external_name":"debug_message","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context, path, content_type, disposition, filename, status, debug_message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"content_type-instance-method","html_id":"content_type-instance-method","name":"content_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L80","def":{"name":"content_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@content_type || content_type_from_file"}},{"id":"context:HTTP::Server::Context-instance-method","html_id":"context:HTTP::Server::Context-instance-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Server::Context","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L44","def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@context"}},{"id":"debug_message:String?-instance-method","html_id":"debug_message:String?-instance-method","name":"debug_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L44","def":{"name":"debug_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@debug_message"}},{"id":"disposition:String-instance-method","html_id":"disposition:String-instance-method","name":"disposition","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L84","def":{"name":"disposition","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if custom_filename?\n  \"#{@disposition}; filename=\\\"#{filename}\\\"\"\nelse\n  @disposition\nend"}},{"id":"filename:String?-instance-method","html_id":"filename:String?-instance-method","name":"filename","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L44","def":{"name":"filename","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@filename"}},{"id":"headers-instance-method","html_id":"headers-instance-method","name":"headers","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L44","def":{"name":"headers","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@headers"}},{"id":"path:String-instance-method","html_id":"path:String-instance-method","name":"path","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L44","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@path"}},{"id":"print-instance-method","html_id":"print-instance-method","name":"print","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L55","def":{"name":"print","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if file_exists?\nelse\n  raise(Lucky::MissingFileError.new(path))\nend\nset_response_headers\ncontext.response.status_code = status\nFile.open(full_path) do |file|\n  IO.copy(file, context.response)\nend\n"}},{"id":"status:Int-instance-method","html_id":"status:Int-instance-method","name":"status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/file_response.cr#L63","def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"(@status || context.response.status_code) || DEFAULT_STATUS"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/FlashHandler","path":"Lucky/FlashHandler.html","kind":"class","full_name":"Lucky::FlashHandler","name":"FlashHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/flash_handler.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/flash_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/flash_handler.cr#L4","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  call_next(context)\nensure\n  context.session.set(Lucky::FlashStore::SESSION_KEY, context.flash.to_json)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/FlashStore","path":"Lucky/FlashStore.html","kind":"class","full_name":"Lucky::FlashStore","name":"FlashStore","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/cookies/flash_store.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"SESSION_KEY","name":"SESSION_KEY","value":"\"_flash\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"from_session(session:Lucky::Session):Lucky::FlashStore-class-method","html_id":"from_session(session:Lucky::Session):Lucky::FlashStore-class-method","name":"from_session","doc":null,"summary":null,"abstract":false,"args":[{"name":"session","doc":null,"default_value":"","external_name":"session","restriction":"Lucky::Session"}],"args_string":"(session : Lucky::Session) : Lucky::FlashStore","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L10","def":{"name":"from_session","args":[{"name":"session","doc":null,"default_value":"","external_name":"session","restriction":"Lucky::Session"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::FlashStore","visibility":"Public","body":"new.from_session(session)"}}],"constructors":[],"instance_methods":[{"id":"any?(*args,**options)-instance-method","html_id":"any?(*args,**options)-instance-method","name":"any?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L5","def":{"name":"any?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"all.any?(*args, **options)"}},{"id":"any?(*args,**options,&)-instance-method","html_id":"any?(*args,**options,&amp;)-instance-method","name":"any?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L5","def":{"name":"any?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"all.any?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"clear:Nil-instance-method","html_id":"clear:Nil-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L47","def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@now.clear\n@next.clear\n"}},{"id":"each(*args,**options)-instance-method","html_id":"each(*args,**options)-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L5","def":{"name":"each","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"all.each(*args, **options)"}},{"id":"each(*args,**options,&)-instance-method","html_id":"each(*args,**options,&amp;)-instance-method","name":"each","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L5","def":{"name":"each","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"all.each(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"empty?(*args,**options)-instance-method","html_id":"empty?(*args,**options)-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L5","def":{"name":"empty?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"all.empty?(*args, **options)"}},{"id":"empty?(*args,**options,&)-instance-method","html_id":"empty?(*args,**options,&amp;)-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L5","def":{"name":"empty?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"all.empty?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"failure:String-instance-method","html_id":"failure:String-instance-method","name":"failure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"failure","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(get?(:failure)) || \"\""}},{"id":"failure=(message:String)-instance-method","html_id":"failure=(message:String)-instance-method","name":"failure=","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"failure=","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(:failure, message)"}},{"id":"failure?:String?-instance-method","html_id":"failure?:String?-instance-method","name":"failure?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"failure?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"get?(:failure)"}},{"id":"from_session(session:Lucky::Session):Lucky::FlashStore-instance-method","html_id":"from_session(session:Lucky::Session):Lucky::FlashStore-instance-method","name":"from_session","doc":null,"summary":null,"abstract":false,"args":[{"name":"session","doc":null,"default_value":"","external_name":"session","restriction":"Lucky::Session"}],"args_string":"(session : Lucky::Session) : Lucky::FlashStore","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L14","def":{"name":"from_session","args":[{"name":"session","doc":null,"default_value":"","external_name":"session","restriction":"Lucky::Session"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::FlashStore","visibility":"Public","body":"begin\n  (session.get?(SESSION_KEY)).try do |json|\n    (JSON.parse(json)).as_h.each do |key, value|\n      @now[key.to_s] = value.to_s\n    end\n  end\n  self\nrescue e : JSON::ParseException\n  raise(Lucky::InvalidFlashJSONError.new(session.get?(SESSION_KEY)))\nend"}},{"id":"get(key:Key):String-instance-method","html_id":"get(key:Key):String-instance-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L56","def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"all[key.to_s]"}},{"id":"get?(key:Key):String?-instance-method","html_id":"get?(key:Key):String?-instance-method","name":"get?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L60","def":{"name":"get?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"all[key.to_s]?"}},{"id":"info:String-instance-method","html_id":"info:String-instance-method","name":"info","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"info","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(get?(:info)) || \"\""}},{"id":"info=(message:String)-instance-method","html_id":"info=(message:String)-instance-method","name":"info=","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"info=","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(:info, message)"}},{"id":"info?:String?-instance-method","html_id":"info?:String?-instance-method","name":"info?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"info?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"get?(:info)"}},{"id":"set(key:Key,value:String):String-instance-method","html_id":"set(key:Key,value:String):String-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(key : Key, value : String) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L52","def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@next[key.to_s] = value"}},{"id":"success:String-instance-method","html_id":"success:String-instance-method","name":"success","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"success","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(get?(:success)) || \"\""}},{"id":"success=(message:String)-instance-method","html_id":"success=(message:String)-instance-method","name":"success=","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"success=","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"set(:success, message)"}},{"id":"success?:String?-instance-method","html_id":"success?:String?-instance-method","name":"success?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L29","def":{"name":"success?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"get?(:success)"}},{"id":"to_json:String-instance-method","html_id":"to_json:String-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr#L43","def":{"name":"to_json","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@next.to_json"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/FlashStore/Key","path":"Lucky/FlashStore/Key.html","kind":"alias","full_name":"Lucky::FlashStore::Key","name":"Key","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/cookies/flash_store.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/flash_store.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":true,"aliased":"(String | Symbol)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/FlashStore","kind":"class","full_name":"Lucky::FlashStore","name":"FlashStore"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/ForceSSLHandler","path":"Lucky/ForceSSLHandler.html","kind":"class","full_name":"Lucky::ForceSSLHandler","name":"ForceSSLHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/force_ssl_handler.cr","line_number":26,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/force_ssl_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: redirect_status : Int32 = HTTP::Status::PERMANENT_REDIRECT.value, example: nil}, {decl: enabled : Bool, example: nil}, {decl: strict_transport_security : NamedTuple(max_age: Time::Span | Time::MonthSpan, include_subdomains: Bool) | ::Nil, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"*Enabled* - The handler can be enabled/disabled. This is helpful for working\nin a local development environment.\n\n*Strict-Transport-Security* - Settings to configure the ['Strict-Transport-Security' header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)\n\n```\n# Usually in config/force_ssl_handler.cr\nLucky::ForceSSLHandler.configure do |settings|\n  settings.redirect_status = 303\n  settings.enabled = false\n  settings.strict_transport_security = {max_age: 1.year, include_subdomains: true}\nend\n```","summary":"<p><em>Enabled</em> - The handler can be enabled/disabled.</p>","class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/force_ssl_handler.cr#L29","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/force_ssl_handler.cr#L29","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/force_ssl_handler.cr#L35","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (secure?(context)) || disabled?\n  call_next(context)\nelse\n  redirect_to_secure_version(context)\nend"}},{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/force_ssl_handler.cr#L29","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/ForceSSLHandler/Settings","path":"Lucky/ForceSSLHandler/Settings.html","kind":"class","full_name":"Lucky::ForceSSLHandler::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/force_ssl_handler.cr","line_number":29,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/force_ssl_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/ForceSSLHandler","kind":"class","full_name":"Lucky::ForceSSLHandler","name":"ForceSSLHandler"},"doc":null,"summary":null,"class_methods":[{"id":"enabled-class-method","html_id":"enabled-class-method","name":"enabled","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"enabled","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@enabled.not_nil!"}},{"id":"enabled=(value:Bool)-class-method","html_id":"enabled=(value:Bool)-class-method","name":"enabled=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","source_link":null,"def":{"name":"enabled=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@enabled = value"}},{"id":"enabled?-class-method","html_id":"enabled?-class-method","name":"enabled?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"enabled?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@enabled"}},{"id":"redirect_status-class-method","html_id":"redirect_status-class-method","name":"redirect_status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"redirect_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@redirect_status.not_nil!"}},{"id":"redirect_status=(value:Int32)-class-method","html_id":"redirect_status=(value:Int32)-class-method","name":"redirect_status=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":null,"def":{"name":"redirect_status=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@redirect_status = value"}},{"id":"redirect_status?-class-method","html_id":"redirect_status?-class-method","name":"redirect_status?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"redirect_status?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@redirect_status"}},{"id":"strict_transport_security-class-method","html_id":"strict_transport_security-class-method","name":"strict_transport_security","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"strict_transport_security","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@strict_transport_security"}},{"id":"strict_transport_security=(value:NamedTuple()?)-class-method","html_id":"strict_transport_security=(value:NamedTuple()?)-class-method","name":"strict_transport_security=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"NamedTuple(max_age: Time::Span | Time::MonthSpan, include_subdomains: Bool) | ::Nil"}],"args_string":"(value : NamedTuple()?)","source_link":null,"def":{"name":"strict_transport_security=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"NamedTuple(max_age: Time::Span | Time::MonthSpan, include_subdomains: Bool) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@strict_transport_security = value"}},{"id":"strict_transport_security?-class-method","html_id":"strict_transport_security?-class-method","name":"strict_transport_security?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"strict_transport_security?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@strict_transport_security"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/ForgeryProtectionHelpers","path":"Lucky/ForgeryProtectionHelpers.html","kind":"module","full_name":"Lucky::ForgeryProtectionHelpers","name":"ForgeryProtectionHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/forgery_protection_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/forgery_protection_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"csrf_hidden_input-instance-method","html_id":"csrf_hidden_input-instance-method","name":"csrf_hidden_input","doc":"Generate a hidden input with the request CSRF token\n\nThis input is automatically generated when using\n`Lucky::FormHelpers#form_for`. It creates a hidden input with the CSRF\ntoken. THis ensures that the form is safe. If you try to submit a form\nwithout a CSRF token it will fail with a 403 forbidden status code.","summary":"<p>Generate a hidden input with the request CSRF token</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/forgery_protection_helpers.cr#L8","def":{"name":"csrf_hidden_input","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"input(type: \"hidden\", name: ProtectFromForgery::PARAM_KEY, value: ProtectFromForgery.get_token(@context))"}},{"id":"csrf_meta_tags-instance-method","html_id":"csrf_meta_tags-instance-method","name":"csrf_meta_tags","doc":"Meta tags used for submitting AJAX links and forms\n\nThese tags are automatically added to MainLayout when generating a new\nproject. They are used by Rails UJS to safely submit forms and non-GET AJAX\nrequests","summary":"<p>Meta tags used for submitting AJAX links and forms</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/forgery_protection_helpers.cr#L19","def":{"name":"csrf_meta_tags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"meta(name: \"csrf-param\", content: ProtectFromForgery::PARAM_KEY)\nmeta(name: \"csrf-token\", content: ProtectFromForgery.get_token(@context))\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/FormHelpers","path":"Lucky/FormHelpers.html","kind":"module","full_name":"Lucky::FormHelpers","name":"FormHelpers","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"locations":[{"filename":"lucky/tags/form_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/form_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: include_csrf_tag : Bool = true, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/form_helpers.cr#L2","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/form_helpers.cr#L2","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"form_for(route:Lucky::RouteHelper,**html_options,&)-instance-method","html_id":"form_for(route:Lucky::RouteHelper,**html_options,&amp;)-instance-method","name":"form_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":"Lucky::RouteHelper"}],"args_string":"(route : Lucky::RouteHelper, **html_options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/form_helpers.cr#L6","def":{"name":"form_for","args":[{"name":"route","doc":null,"default_value":"","external_name":"route","restriction":"Lucky::RouteHelper"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"form_options = {\"action\" => route.path, \"method\" => form_method(route)}\nform(merge_options(html_options, form_options)) do\n  if settings.include_csrf_tag\n    csrf_hidden_input\n  end\n  method_override_input(route)\n  yield\nend\n"}},{"id":"form_for(routeaction:Lucky::Action.class,**html_options,&block)-instance-method","html_id":"form_for(routeaction:Lucky::Action.class,**html_options,&amp;block)-instance-method","name":"form_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"action","doc":null,"default_value":"","external_name":"route","restriction":"Lucky::Action.class"}],"args_string":"(route action : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>, **html_options, &block)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/form_helpers.cr#L15","def":{"name":"form_for","args":[{"name":"action","doc":null,"default_value":"","external_name":"route","restriction":"Lucky::Action.class"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"return_type":"","visibility":"Public","body":"form_for(action.route, **html_options, &block)"}},{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/form_helpers.cr#L2","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/FormHelpers/Settings","path":"Lucky/FormHelpers/Settings.html","kind":"class","full_name":"Lucky::FormHelpers::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/tags/form_helpers.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/form_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/FormHelpers","kind":"module","full_name":"Lucky::FormHelpers","name":"FormHelpers"},"doc":null,"summary":null,"class_methods":[{"id":"include_csrf_tag-class-method","html_id":"include_csrf_tag-class-method","name":"include_csrf_tag","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"include_csrf_tag","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@include_csrf_tag.not_nil!"}},{"id":"include_csrf_tag=(value:Bool)-class-method","html_id":"include_csrf_tag=(value:Bool)-class-method","name":"include_csrf_tag=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","source_link":null,"def":{"name":"include_csrf_tag=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@include_csrf_tag = value"}},{"id":"include_csrf_tag?-class-method","html_id":"include_csrf_tag?-class-method","name":"include_csrf_tag?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"include_csrf_tag?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@include_csrf_tag"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","path":"Lucky/HTMLBuilder.html","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/WithDefaults","kind":"module","full_name":"Lucky::WithDefaults","name":"WithDefaults"},{"html_id":"github.com/luckyframework/lucky/Lucky/RenderIfDefined","kind":"module","full_name":"Lucky::RenderIfDefined","name":"RenderIfDefined"},{"html_id":"github.com/luckyframework/lucky/Lucky/HelpfulParagraphError","kind":"module","full_name":"Lucky::HelpfulParagraphError","name":"HelpfulParagraphError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MountComponent","kind":"module","full_name":"Lucky::MountComponent","name":"MountComponent"},{"html_id":"github.com/luckyframework/lucky/Lucky/ForgeryProtectionHelpers","kind":"module","full_name":"Lucky::ForgeryProtectionHelpers","name":"ForgeryProtectionHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/TimeHelpers","kind":"module","full_name":"Lucky::TimeHelpers","name":"TimeHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLTextHelpers","kind":"module","full_name":"Lucky::HTMLTextHelpers","name":"HTMLTextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/TextHelpers","kind":"module","full_name":"Lucky::TextHelpers","name":"TextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/NumberToCurrency","kind":"module","full_name":"Lucky::NumberToCurrency","name":"NumberToCurrency"},{"html_id":"github.com/luckyframework/lucky/Lucky/AssetHelpers","kind":"module","full_name":"Lucky::AssetHelpers","name":"AssetHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Assignable","kind":"module","full_name":"Lucky::Assignable","name":"Assignable"},{"html_id":"github.com/luckyframework/lucky/Lucky/SpecialtyTags","kind":"module","full_name":"Lucky::SpecialtyTags","name":"SpecialtyTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/SelectHelpers","kind":"module","full_name":"Lucky::SelectHelpers","name":"SelectHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/InputHelpers","kind":"module","full_name":"Lucky::InputHelpers","name":"InputHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/LabelHelpers","kind":"module","full_name":"Lucky::LabelHelpers","name":"LabelHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/FormHelpers","kind":"module","full_name":"Lucky::FormHelpers","name":"FormHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Lucky/LinkHelpers","kind":"module","full_name":"Lucky::LinkHelpers","name":"LinkHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/CustomTags","kind":"module","full_name":"Lucky::CustomTags","name":"CustomTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseTags","kind":"module","full_name":"Lucky::BaseTags","name":"BaseTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"}],"locations":[{"filename":"lucky/html_builder.cr","line_number":5,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_builder.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ASSIGNS","name":"ASSIGNS","value":"[] of Nil","doc":null,"summary":null},{"id":"SETTINGS","name":"SETTINGS","value":"{} of Nil => Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/AssetHelpers","kind":"module","full_name":"Lucky::AssetHelpers","name":"AssetHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Assignable","kind":"module","full_name":"Lucky::Assignable","name":"Assignable"},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseTags","kind":"module","full_name":"Lucky::BaseTags","name":"BaseTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/CustomTags","kind":"module","full_name":"Lucky::CustomTags","name":"CustomTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/ForgeryProtectionHelpers","kind":"module","full_name":"Lucky::ForgeryProtectionHelpers","name":"ForgeryProtectionHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/FormHelpers","kind":"module","full_name":"Lucky::FormHelpers","name":"FormHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/HelpfulParagraphError","kind":"module","full_name":"Lucky::HelpfulParagraphError","name":"HelpfulParagraphError"},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLTextHelpers","kind":"module","full_name":"Lucky::HTMLTextHelpers","name":"HTMLTextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/InputHelpers","kind":"module","full_name":"Lucky::InputHelpers","name":"InputHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/LabelHelpers","kind":"module","full_name":"Lucky::LabelHelpers","name":"LabelHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/LinkHelpers","kind":"module","full_name":"Lucky::LinkHelpers","name":"LinkHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/MountComponent","kind":"module","full_name":"Lucky::MountComponent","name":"MountComponent"},{"html_id":"github.com/luckyframework/lucky/Lucky/NumberToCurrency","kind":"module","full_name":"Lucky::NumberToCurrency","name":"NumberToCurrency"},{"html_id":"github.com/luckyframework/lucky/Lucky/RenderIfDefined","kind":"module","full_name":"Lucky::RenderIfDefined","name":"RenderIfDefined"},{"html_id":"github.com/luckyframework/lucky/Lucky/SelectHelpers","kind":"module","full_name":"Lucky::SelectHelpers","name":"SelectHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/SpecialtyTags","kind":"module","full_name":"Lucky::SpecialtyTags","name":"SpecialtyTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/TextHelpers","kind":"module","full_name":"Lucky::TextHelpers","name":"TextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/TimeHelpers","kind":"module","full_name":"Lucky::TimeHelpers","name":"TimeHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/WithDefaults","kind":"module","full_name":"Lucky::WithDefaults","name":"WithDefaults"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/BaseComponent","kind":"class","full_name":"Lucky::BaseComponent","name":"BaseComponent"},{"html_id":"github.com/luckyframework/lucky/Lucky/WelcomePage","kind":"class","full_name":"Lucky::WelcomePage","name":"WelcomePage"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"perform_render:IO-instance-method","html_id":"perform_render:IO-instance-method","name":"perform_render","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : IO","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_builder.cr#L66","def":{"name":"perform_render","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"IO","visibility":"Public","body":"render\nview\n"}},{"id":"view-instance-method","html_id":"view-instance-method","name":"view","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_builder.cr#L26","def":{"name":"view","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"generate_needy_initializer-macro","html_id":"generate_needy_initializer-macro","name":"generate_needy_initializer","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_builder.cr#L46","def":{"name":"generate_needy_initializer","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if !@type.abstract? %}\n      {% sorted_assigns = ASSIGNS.sort_by do |dec|\n  ((dec.type.resolve.nilable? || dec.value) || (dec.value == nil)) || (dec.value == false) ? 1 : 0\nend %}\n      def initialize(\n        {% for declaration in sorted_assigns %}\n          {% var = declaration.var %}\n          {% type = declaration.type %}\n          {% value = declaration.value %}\n          {% if (type.stringify.ends_with?(\"Nil\")) && (!value)\n  value = nil\nend %}\n          {% has_default = (value || (value == false)) || (value == nil) %}\n          {% if false || (var.stringify.ends_with?(\"?\")) %}{{ var }}{% end %} @{{ (var.stringify.gsub(/\\?/, \"\")).id }} : {{ type }}{% if has_default %} = {{ value }}{% end %},\n        {% end %}\n        **unused_exposures\n        )\n      end\n    {% end %}\n\n  \n"}},{"id":"setup_initializer_hook-macro","html_id":"setup_initializer_hook-macro","name":"setup_initializer_hook","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_builder.cr#L28","def":{"name":"setup_initializer_hook","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    macro finished\n      generate_needy_initializer\n    \nend\n\n    macro included\n      setup_initializer_hook\n    \nend\n\n    macro inherited\n      setup_initializer_hook\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLPage","path":"Lucky/HTMLPage.html","kind":"module","full_name":"Lucky::HTMLPage","name":"HTMLPage","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"locations":[{"filename":"lucky/html_page.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_page.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: render_component_comments : Bool = false, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/WelcomePage","kind":"class","full_name":"Lucky::WelcomePage","name":"WelcomePage"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_page.cr#L4","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_page.cr#L4","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_page.cr#L4","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLPage/Settings","path":"Lucky/HTMLPage/Settings.html","kind":"class","full_name":"Lucky::HTMLPage::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/html_page.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/html_page.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLPage","kind":"module","full_name":"Lucky::HTMLPage","name":"HTMLPage"},"doc":null,"summary":null,"class_methods":[{"id":"render_component_comments-class-method","html_id":"render_component_comments-class-method","name":"render_component_comments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"render_component_comments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@render_component_comments.not_nil!"}},{"id":"render_component_comments=(value:Bool)-class-method","html_id":"render_component_comments=(value:Bool)-class-method","name":"render_component_comments=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","source_link":null,"def":{"name":"render_component_comments=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@render_component_comments = value"}},{"id":"render_component_comments?-class-method","html_id":"render_component_comments?-class-method","name":"render_component_comments?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"render_component_comments?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@render_component_comments"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLTextHelpers","path":"Lucky/HTMLTextHelpers.html","kind":"module","full_name":"Lucky::HTMLTextHelpers","name":"HTMLTextHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/page_helpers/html_text_helpers.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"These helper methods will write directly to the view.","summary":"<p>These helper methods will write directly to the view.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"highlight(text:String,phrases:Array(String|Regex),highlighter:Proc|String=&quot;&lt;mark&gt;\\\\1&lt;/mark&gt;&quot;)-instance-method","html_id":"highlight(text:String,phrases:Array(String|Regex),highlighter:Proc|String=&amp;quot;&amp;lt;mark&amp;gt;\\\\1&amp;lt;/mark&amp;gt;&amp;quot;)-instance-method","name":"highlight","doc":"Wrap phrases to make them stand out\n\nThis will wrap all the phrases inside a piece of `text` specified by the\n`phrases` array. The default is to wrap each with the `<mark>` element.\nThis can be customized with the `highlighter` argument.\n\n**Note: This method writes HTML directly to the page. It does not return a\nString**\n\n```crystal\nhighlight(\"Crystal is type-safe and compiled.\", phrases: [\"type-safe\", \"compiled\"])\n```\noutputs:\n```html\nCrystal is <mark>type-safe</mark> and <mark>compiled</mark>.\n```\n\n**With a custom highlighter**\n\n```crystal\nhighlight(\n  \"You're such a nice and attractive person.\",\n  phrases: [\"nice\", \"attractive\"],\n  highlighter: \"<strong>\\\\1</strong>\"\n)\n```\noutputs:\n```html\nYou're such a <strong>nice</strong> and <strong>attractive</strong> person.\n```","summary":"<p>Wrap phrases to make them stand out</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrases","doc":null,"default_value":"","external_name":"phrases","restriction":"Array(String | Regex)"},{"name":"highlighter","doc":null,"default_value":"\"<mark>\\\\1</mark>\"","external_name":"highlighter","restriction":"Proc | String"}],"args_string":"(text : String, phrases : Array(String | Regex), highlighter : Proc | String = <span class=\"s\">&quot;&lt;mark&gt;\\\\1&lt;/mark&gt;&quot;</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L73","def":{"name":"highlight","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrases","doc":null,"default_value":"","external_name":"phrases","restriction":"Array(String | Regex)"},{"name":"highlighter","doc":null,"default_value":"\"<mark>\\\\1</mark>\"","external_name":"highlighter","restriction":"Proc | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if text.blank? || phrases.all? do |__arg0|\n  __arg0.to_s.blank?\nend\n  raw((  text || \"\"))\nelse\n  match = phrases.map do |p|\n    p.is_a?(Regex) ? p.to_s : Regex.escape(p.to_s)\n  end.join(\"|\")\n  if highlighter.is_a?(Proc)\n    raw(text.gsub(/(#{match})(?![^<]*?>)/i, &highlighter))\n  else\n    raw(text.gsub(/(#{match})(?![^<]*?>)/i, highlighter))\n  end\nend"}},{"id":"highlight(text:String,phrases:Array(String|Regex),&block:String->_)-instance-method","html_id":"highlight(text:String,phrases:Array(String|Regex),&amp;block:String-&gt;_)-instance-method","name":"highlight","doc":"Highlight a single phrase\n\nExactly the same as the `highlight` that takes multiple phrases, but with a\nsingular `phrase` argument for readability.\n```","summary":"<p>Highlight a single phrase</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrases","doc":null,"default_value":"","external_name":"phrases","restriction":"Array(String | Regex)"}],"args_string":"(text : String, phrases : Array(String | Regex), &block : String -> _)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L94","def":{"name":"highlight","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrases","doc":null,"default_value":"","external_name":"phrases","restriction":"Array(String | Regex)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> _)"},"return_type":"","visibility":"Public","body":"highlight(text, phrases, highlighter: block)"}},{"id":"highlight(text:String,phrase:String|Regex,highlighter:Proc|String=&quot;&lt;mark&gt;\\\\1&lt;/mark&gt;&quot;)-instance-method","html_id":"highlight(text:String,phrase:String|Regex,highlighter:Proc|String=&amp;quot;&amp;lt;mark&amp;gt;\\\\1&amp;lt;/mark&amp;gt;&amp;quot;)-instance-method","name":"highlight","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrase","doc":null,"default_value":"","external_name":"phrase","restriction":"String | Regex"},{"name":"highlighter","doc":null,"default_value":"\"<mark>\\\\1</mark>\"","external_name":"highlighter","restriction":"Proc | String"}],"args_string":"(text : String, phrase : String | Regex, highlighter : Proc | String = <span class=\"s\">&quot;&lt;mark&gt;\\\\1&lt;/mark&gt;&quot;</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L98","def":{"name":"highlight","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrase","doc":null,"default_value":"","external_name":"phrase","restriction":"String | Regex"},{"name":"highlighter","doc":null,"default_value":"\"<mark>\\\\1</mark>\"","external_name":"highlighter","restriction":"Proc | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"phrases = [phrase] of String | Regex\nhighlight(text, phrases, highlighter: highlighter)\n"}},{"id":"highlight(text:String,phrase:String|Regex,&block:String->_)-instance-method","html_id":"highlight(text:String,phrase:String|Regex,&amp;block:String-&gt;_)-instance-method","name":"highlight","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrase","doc":null,"default_value":"","external_name":"phrase","restriction":"String | Regex"}],"args_string":"(text : String, phrase : String | Regex, &block : String -> _)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L103","def":{"name":"highlight","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrase","doc":null,"default_value":"","external_name":"phrase","restriction":"String | Regex"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> _)"},"return_type":"","visibility":"Public","body":"phrases = [phrase] of String | Regex\nhighlight(text, phrases, highlighter: block)\n"}},{"id":"simple_format(text:String,&block:String->_):Nil-instance-method","html_id":"simple_format(text:String,&amp;block:String-&gt;_):Nil-instance-method","name":"simple_format","doc":"Wraps text in whatever you'd like based on line breaks\n\n**Note: This method writes HTML directly to the page. It does not return a\nString**\n\n```crystal\nsimple_format(\"foo\\n\\nbar\\n\\nbaz\") do |paragraph|\n  text paragraph\n  hr\nend\n```\noutputs:\n```html\nfoo<hr>\n\nbar<hr>\n\nbaz<hr>\n```","summary":"<p>Wraps text in whatever you'd like based on line breaks</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String, &block : String -> _) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L127","def":{"name":"simple_format","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(String -> _)"},"return_type":"Nil","visibility":"Public","body":"paragraphs = split_paragraphs(text)\nif paragraphs.empty?\n  paragraphs = [\"\"]\nend\nparagraphs.each do |paragraph|\n  yield paragraph\n  if paragraph == paragraphs.last\n  else\n    raw(\"\\n\\n\")\n  end\nend\nview\n"}},{"id":"simple_format(text:String,**html_options):Nil-instance-method","html_id":"simple_format(text:String,**html_options):Nil-instance-method","name":"simple_format","doc":"Wraps text in paragraphs based on line breaks\n\n```crystal\nsimple_format(\"foo\\n\\nbar\\n\\nbaz\")\n```\noutputs:\n```html\n<p>foo</p>\n\n<p>bar</p>\n\n<p>baz</p>\n```","summary":"<p>Wraps text in paragraphs based on line breaks</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String, **html_options) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L152","def":{"name":"simple_format","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"simple_format(text) do |formatted_text|\n  para(html_options) do\n    raw(formatted_text)\n  end\nend"}},{"id":"truncate(text:String,length:Int32=30,omission:String=&quot;...&quot;,separator:String?=nil,escape:Bool=false,blk:Proc?=nil):Nil-instance-method","html_id":"truncate(text:String,length:Int32=30,omission:String=&amp;quot;...&amp;quot;,separator:String?=nil,escape:Bool=false,blk:Proc?=nil):Nil-instance-method","name":"truncate","doc":"Shortens text after a length point and inserts content afterward\n\n**Note: This method writes HTML directly to the page. It does not return a\nString.**\n\nThis is ideal if you want an action associated with shortened text, like\n\"Read more\".\n\n* `length` (default: `30`) will control the maximum length of the text,\nincluding the `omission`.\n* `omission` (default: `...`) will insert itself at the end of the\ntruncated text.\n* `separator` (default: nil) is where words are cut off. This is often\noverridden to break on word boundaries by setting the separator to a space\n`\" \"`. Keep in mind this, may cause your text to be truncated before your\n`length` value if the `length` - `omission` is before the `separator`.\n* `escape` (default: false) weather or not to HTML escape the truncated\nstring.\n* `blk` (default: nil) A block to run after the text has been truncated.\nOften used to add an action to read more text, like a \"Read more\" link.\n\n```crystal\ntruncate(\"Four score and seven years ago\", length: 20) do\n  link \"Read more\", to: \"#\"\nend\n```\noutputs:\n```html\n\"Four score and se...<a href=\"#\">Read more</a>\"\n```","summary":"<p>Shortens text after a length point and inserts content afterward</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"length","doc":null,"default_value":"30","external_name":"length","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"},{"name":"separator","doc":null,"default_value":"nil","external_name":"separator","restriction":"String | Nil"},{"name":"escape","doc":null,"default_value":"false","external_name":"escape","restriction":"Bool"},{"name":"blk","doc":null,"default_value":"nil","external_name":"blk","restriction":"Nil | Proc"}],"args_string":"(text : String, length : Int32 = <span class=\"n\">30</span>, omission : String = <span class=\"s\">&quot;...&quot;</span>, separator : String? = <span class=\"n\">nil</span>, escape : Bool = <span class=\"n\">false</span>, blk : Proc? = <span class=\"n\">nil</span>) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L33","def":{"name":"truncate","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"length","doc":null,"default_value":"30","external_name":"length","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"},{"name":"separator","doc":null,"default_value":"nil","external_name":"separator","restriction":"String | Nil"},{"name":"escape","doc":null,"default_value":"false","external_name":"escape","restriction":"Bool"},{"name":"blk","doc":null,"default_value":"nil","external_name":"blk","restriction":"Nil | Proc"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"content = truncate_text(text, length, omission, separator)\nraw((escape ? HTML.escape(content) : content))\nif (!blk.nil?) && text.size > length\n  blk.call\nend\n"}},{"id":"truncate(text:String,length:Int32=30,omission:String=&quot;...&quot;,separator:String?=nil,escape:Bool=true,&block:->_):Nil-instance-method","html_id":"truncate(text:String,length:Int32=30,omission:String=&amp;quot;...&amp;quot;,separator:String?=nil,escape:Bool=true,&amp;block:-&gt;_):Nil-instance-method","name":"truncate","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"length","doc":null,"default_value":"30","external_name":"length","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"},{"name":"separator","doc":null,"default_value":"nil","external_name":"separator","restriction":"String | Nil"},{"name":"escape","doc":null,"default_value":"true","external_name":"escape","restriction":"Bool"}],"args_string":"(text : String, length : Int32 = <span class=\"n\">30</span>, omission : String = <span class=\"s\">&quot;...&quot;</span>, separator : String? = <span class=\"n\">nil</span>, escape : Bool = <span class=\"n\">true</span>, &block :  -> _) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/html_text_helpers.cr#L39","def":{"name":"truncate","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"length","doc":null,"default_value":"30","external_name":"length","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"},{"name":"separator","doc":null,"default_value":"nil","external_name":"separator","restriction":"String | Nil"},{"name":"escape","doc":null,"default_value":"true","external_name":"escape","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(-> _)"},"return_type":"Nil","visibility":"Public","body":"truncate(text, length, omission, separator, escape, blk: block)"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/HttpMethodOverrideHandler","path":"Lucky/HttpMethodOverrideHandler.html","kind":"class","full_name":"Lucky::HttpMethodOverrideHandler","name":"HttpMethodOverrideHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/http_method_override_handler.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/http_method_override_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/http_method_override_handler.cr#L4","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"http_method = overridden_http_method(context)\nif (override_allowed?(context, http_method)) && http_method\n  context.request.method = http_method\nend\ncall_next(context)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/InputHelpers","path":"Lucky/InputHelpers.html","kind":"module","full_name":"Lucky::InputHelpers","name":"InputHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/input_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"EMPTY_BOOLEAN_ATTRIBUTES","name":"EMPTY_BOOLEAN_ATTRIBUTES","value":"[] of Symbol","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"checkbox(field:Avram::PermittedAttribute(T),unchecked_value:String,checked_value:String,**html_options)forallT-instance-method","html_id":"checkbox(field:Avram::PermittedAttribute(T),unchecked_value:String,checked_value:String,**html_options)forallT-instance-method","name":"checkbox","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute(T)"},{"name":"unchecked_value","doc":null,"default_value":"","external_name":"unchecked_value","restriction":"String"},{"name":"checked_value","doc":null,"default_value":"","external_name":"checked_value","restriction":"String"}],"args_string":"(field : Avram::PermittedAttribute(T), unchecked_value : String, checked_value : String, **html_options) forall T","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L59","def":{"name":"checkbox","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute(T)"},{"name":"unchecked_value","doc":null,"default_value":"","external_name":"unchecked_value","restriction":"String"},{"name":"checked_value","doc":null,"default_value":"","external_name":"checked_value","restriction":"String"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if field.param == checked_value\n  html_options = merge_options(html_options, {\"checked\" => \"true\"})\nend\nhtml_options = merge_options(html_options, {\"value\" => checked_value})\ngenerate_input(field, \"hidden\", {\"id\" => \"\"}, {\"value\" => unchecked_value})\ngenerate_input(field, \"checkbox\", html_options)\n"}},{"id":"checkbox(field:Avram::PermittedAttribute(Bool?),attrs:Array(Symbol),**html_options)-instance-method","html_id":"checkbox(field:Avram::PermittedAttribute(Bool?),attrs:Array(Symbol),**html_options)-instance-method","name":"checkbox","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute(Bool | ::Nil)"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute(Bool?), attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L75","def":{"name":"checkbox","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute(Bool | ::Nil)"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"unchecked_value = \"false\"\nif field.value\n  html_options = merge_options(html_options, {\"checked\" => \"true\"})\nend\nhtml_options = merge_options(html_options, {\"value\" => \"true\"})\ngenerate_input(field, \"hidden\", {\"id\" => \"\"}, {\"value\" => unchecked_value})\ngenerate_input(field, \"checkbox\", html_options, attrs: attrs)\n"}},{"id":"checkbox(field:Avram::PermittedAttribute(Bool?),**html_options)-instance-method","html_id":"checkbox(field:Avram::PermittedAttribute(Bool?),**html_options)-instance-method","name":"checkbox","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute(Bool | ::Nil)"}],"args_string":"(field : Avram::PermittedAttribute(Bool?), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L71","def":{"name":"checkbox","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute(Bool | ::Nil)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"checkbox(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"checkbox(field:Avram::Attribute,**options)-instance-method","html_id":"checkbox(field:Avram::Attribute,**options)-instance-method","name":"checkbox","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L85","def":{"name":"checkbox","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"color_input(field:Avram::Attribute,**options)-instance-method","html_id":"color_input(field:Avram::Attribute,**options)-instance-method","name":"color_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"color_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"color_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"color_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"color_input","doc":"Returns a color input field.\n\n```\ncolor_input(attribute)\n# => <input type=\"color\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a color input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"color_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"color_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"color_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"color_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"color_input","doc":"Similar to color_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\ncolor_input(attribute, attrs: [:required])\n# => <input type=\"color\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to color_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"color_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"color\", html_options, attrs: attrs)"}},{"id":"date_input(field:Avram::Attribute,**options)-instance-method","html_id":"date_input(field:Avram::Attribute,**options)-instance-method","name":"date_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L143","def":{"name":"date_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"date_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"date_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"date_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L145","def":{"name":"date_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"date_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"date_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"date_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"date_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L149","def":{"name":"date_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = field.value.try(&.to_s(\"%Y-%m-%d\")) || field.param.to_s\ngenerate_input(field, \"date\", html_options, input_overrides: {\"value\" => value}, attrs: attrs)\n"}},{"id":"datetime_input(field:Avram::Attribute,**options)-instance-method","html_id":"datetime_input(field:Avram::Attribute,**options)-instance-method","name":"datetime_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L154","def":{"name":"datetime_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"datetime_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"datetime_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"datetime_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L156","def":{"name":"datetime_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"datetime_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"datetime_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"datetime_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"datetime_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L160","def":{"name":"datetime_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = field.value.try(&.to_s(\"%Y-%m-%dT%H:%M:%S\")) || field.param.to_s\ngenerate_input(field, \"datetime-local\", html_options, input_overrides: {\"value\" => value}, attrs: attrs)\n"}},{"id":"email_input(field:Avram::Attribute,**options)-instance-method","html_id":"email_input(field:Avram::Attribute,**options)-instance-method","name":"email_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"email_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"email_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"email_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"email_input","doc":"Returns a email input field.\n\n```\nemail_input(attribute)\n# => <input type=\"email\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a email input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"email_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"email_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"email_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"email_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"email_input","doc":"Similar to email_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\nemail_input(attribute, attrs: [:required])\n# => <input type=\"email\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to email_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"email_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"email\", html_options, attrs: attrs)"}},{"id":"file_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"file_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"file_input","doc":"Similar to file_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\nfile_input(attribute, attrs: [:required])\n# => <input type=\"file\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to file_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"file_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"file\", html_options, attrs: attrs)"}},{"id":"file_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"file_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"file_input","doc":"Returns a file input field.\n\n```\nfile_input(attribute)\n# => <input type=\"file\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a file input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"file_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"file_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"file_input(field:Avram::Attribute,**options)-instance-method","html_id":"file_input(field:Avram::Attribute,**options)-instance-method","name":"file_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"file_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"hidden_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"hidden_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"hidden_input","doc":"Similar to hidden_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\nhidden_input(attribute, attrs: [:required])\n# => <input type=\"hidden\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to hidden_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"hidden_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"hidden\", html_options, attrs: attrs)"}},{"id":"hidden_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"hidden_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"hidden_input","doc":"Returns a hidden input field.\n\n```\nhidden_input(attribute)\n# => <input type=\"hidden\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a hidden input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"hidden_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hidden_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"hidden_input(field:Avram::Attribute,**options)-instance-method","html_id":"hidden_input(field:Avram::Attribute,**options)-instance-method","name":"hidden_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"hidden_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"number_input(field:Avram::Attribute,**options)-instance-method","html_id":"number_input(field:Avram::Attribute,**options)-instance-method","name":"number_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"number_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"number_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"number_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"number_input","doc":"Returns a number input field.\n\n```\nnumber_input(attribute)\n# => <input type=\"number\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a number input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"number_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"number_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"number_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"number_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"number_input","doc":"Similar to number_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\nnumber_input(attribute, attrs: [:required])\n# => <input type=\"number\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to number_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"number_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"number\", html_options, attrs: attrs)"}},{"id":"password_input(field:Avram::Attribute,**options)-instance-method","html_id":"password_input(field:Avram::Attribute,**options)-instance-method","name":"password_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L122","def":{"name":"password_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"password_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"password_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"password_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L124","def":{"name":"password_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"password_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"password_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"password_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"password_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L128","def":{"name":"password_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"password\", html_options, {\"value\" => \"\"}, attrs)"}},{"id":"range_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"range_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"range_input","doc":"Similar to range_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\nrange_input(attribute, attrs: [:required])\n# => <input type=\"range\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to range_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"range_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"range\", html_options, attrs: attrs)"}},{"id":"range_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"range_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"range_input","doc":"Returns a range input field.\n\n```\nrange_input(attribute)\n# => <input type=\"range\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a range input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"range_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"range_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"range_input(field:Avram::Attribute,**options)-instance-method","html_id":"range_input(field:Avram::Attribute,**options)-instance-method","name":"range_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"range_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"search_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"search_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"search_input","doc":"Similar to search_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\nsearch_input(attribute, attrs: [:required])\n# => <input type=\"search\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to search_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"search_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"search\", html_options, attrs: attrs)"}},{"id":"search_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"search_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"search_input","doc":"Returns a search input field.\n\n```\nsearch_input(attribute)\n# => <input type=\"search\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a search input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"search_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"search_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"search_input(field:Avram::Attribute,**options)-instance-method","html_id":"search_input(field:Avram::Attribute,**options)-instance-method","name":"search_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"search_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"submit(text:String,**html_options)-instance-method","html_id":"submit(text:String,**html_options)-instance-method","name":"submit","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(text : String, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L29","def":{"name":"submit","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"input(merge_options(html_options, {\"type\" => \"submit\", \"value\" => text}))"}},{"id":"telephone_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"telephone_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"telephone_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L118","def":{"name":"telephone_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"tel\", html_options, attrs: attrs)"}},{"id":"telephone_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"telephone_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"telephone_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L114","def":{"name":"telephone_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"telephone_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"telephone_input(field:Avram::Attribute,**options)-instance-method","html_id":"telephone_input(field:Avram::Attribute,**options)-instance-method","name":"telephone_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L112","def":{"name":"telephone_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"text_input(field:Avram::Attribute,**options)-instance-method","html_id":"text_input(field:Avram::Attribute,**options)-instance-method","name":"text_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"text_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"text_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"text_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"text_input","doc":"Returns a text input field.\n\n```\ntext_input(attribute)\n# => <input type=\"text\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a text input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"text_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"text_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"text_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"text_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"text_input","doc":"Similar to text_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\ntext_input(attribute, attrs: [:required])\n# => <input type=\"text\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to text_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"text_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"text\", html_options, attrs: attrs)"}},{"id":"textarea(field:Avram::Attribute,**options)-instance-method","html_id":"textarea(field:Avram::Attribute,**options)-instance-method","name":"textarea","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L33","def":{"name":"textarea","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"textarea(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"textarea(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"textarea","doc":"Returns a textarea field.\n\n```\ntextarea(attribute)\n# => <textarea id=\"param_key_attribute_name\" name=\"param_key:attribute_name\"></textarea>\n```","summary":"<p>Returns a textarea field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L41","def":{"name":"textarea","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"textarea(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"textarea(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"textarea(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"textarea","doc":"Similar to textarea; this allows for Boolean attributes\nthrough `attrs`.\n\n```\ntextarea(attribute, attrs: [:required])\n# => <textarea id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" required></textarea>\n```","summary":"<p>Similar to textarea; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L52","def":{"name":"textarea","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"textarea(field.param.to_s, merge_options(html_options, {\"id\" => input_id(field), \"name\" => input_name(field)}), attrs: attrs)"}},{"id":"time_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"time_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"time_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L138","def":{"name":"time_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = field.value.try(&.to_s(\"%H:%M:%S\")) || field.param.to_s\ngenerate_input(field, \"time\", html_options, input_overrides: {\"value\" => value}, attrs: attrs)\n"}},{"id":"time_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"time_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"time_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L134","def":{"name":"time_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"time_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"time_input(field:Avram::Attribute,**options)-instance-method","html_id":"time_input(field:Avram::Attribute,**options)-instance-method","name":"time_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L132","def":{"name":"time_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"url_input(field:Avram::Attribute,**options)-instance-method","html_id":"url_input(field:Avram::Attribute,**options)-instance-method","name":"url_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"args_string":"(field : Avram::Attribute, **options)","source_link":null,"def":{"name":"url_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::Attribute"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"url_input(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"url_input(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"url_input","doc":"Returns a url input field.\n\n```\nurl_input(attribute)\n# => <input type=\"url\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" />\n```","summary":"<p>Returns a url input field.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"url_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"url_input(field, EMPTY_BOOLEAN_ATTRIBUTES, **html_options)"}},{"id":"url_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","html_id":"url_input(field:Avram::PermittedAttribute,attrs:Array(Symbol),**html_options)-instance-method","name":"url_input","doc":"Similar to url_input; this allows for Boolean attributes\nthrough `attrs`.\n\n```\nurl_input(attribute, attrs: [:required])\n# => <input type=\"url\" id=\"param_key_attribute_name\" name=\"param_key:attribute_name\" value=\"\" required />\n```","summary":"<p>Similar to url_input; this allows for Boolean attributes through <code>attrs</code>.</p>","abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"args_string":"(field : Avram::PermittedAttribute, attrs : Array(Symbol), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L87","def":{"name":"url_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"attrs","doc":null,"default_value":"","external_name":"attrs","restriction":"Array(Symbol)"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"generate_input(field, \"url\", html_options, attrs: attrs)"}}],"macros":[{"id":"error_message_for_unallowed_field-macro","html_id":"error_message_for_unallowed_field-macro","name":"error_message_for_unallowed_field","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L4","def":{"name":"error_message_for_unallowed_field","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% raise(\"The attribute is not permitted.\\n\\nTry this...\\n\\n  â–¸ Allow the attribute to be filled by adding\\n  'permit_columns {attribute_name}' to your form object.\\n\\nQ. Why aren't column attributes permitted by default?\\nA. Malicious users could submit any value they want. For example: you\\n   might have an 'admin' flag on a User. If all attributes were\\n   permitted, a malicious user could set the 'admin' flag to 'true'\\n   on any form.\\n\") %}\n\n  \n"}},{"id":"generate_helpful_error_for(input_method_name)-macro","html_id":"generate_helpful_error_for(input_method_name)-macro","name":"generate_helpful_error_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"input_method_name","doc":null,"default_value":"","external_name":"input_method_name","restriction":""}],"args_string":"(input_method_name)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/input_helpers.cr#L23","def":{"name":"generate_helpful_error_for","args":[{"name":"input_method_name","doc":null,"default_value":"","external_name":"input_method_name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    def \n{{ input_method_name.id }}\n(field : Avram::Attribute, **options)\n      Lucky::InputHelpers.error_message_for_unallowed_field\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidFlashJSONError","path":"Lucky/InvalidFlashJSONError.html","kind":"class","full_name":"Lucky::InvalidFlashJSONError","name":"InvalidFlashJSONError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":182,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(bad_json:String?)-class-method","html_id":"new(bad_json:String?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"bad_json","doc":null,"default_value":"","external_name":"bad_json","restriction":"String | ::Nil"}],"args_string":"(bad_json : String?)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L185","def":{"name":"new","args":[{"name":"bad_json","doc":null,"default_value":"","external_name":"bad_json","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bad_json)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"bad_json:String?-instance-method","html_id":"bad_json:String?-instance-method","name":"bad_json","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L183","def":{"name":"bad_json","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bad_json"}},{"id":"message:String?-instance-method","html_id":"message:String?-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L188","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"\"The flash messages (stored as JSON) failed to parse in a JSON parser.\\nHere's what it tries to parse:\\n\\n#{bad_json}\""}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidMessageError","path":"Lucky/InvalidMessageError.html","kind":"class","full_name":"Lucky::InvalidMessageError","name":"InvalidMessageError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":105,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidParamError","path":"Lucky/InvalidParamError.html","kind":"class","full_name":"Lucky::InvalidParamError","name":"InvalidParamError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":108,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(param_name:String,param_value:String,param_type:String)-class-method","html_id":"new(param_name:String,param_value:String,param_type:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param_name","doc":null,"default_value":"","external_name":"param_name","restriction":"String"},{"name":"param_value","doc":null,"default_value":"","external_name":"param_value","restriction":"String"},{"name":"param_type","doc":null,"default_value":"","external_name":"param_type","restriction":"String"}],"args_string":"(param_name : String, param_value : String, param_type : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L113","def":{"name":"new","args":[{"name":"param_name","doc":null,"default_value":"","external_name":"param_name","restriction":"String"},{"name":"param_value","doc":null,"default_value":"","external_name":"param_value","restriction":"String"},{"name":"param_type","doc":null,"default_value":"","external_name":"param_type","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param_name, param_value, param_type)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String?-instance-method","html_id":"message:String?-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L116","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"\"Required param '#{param_name}' with value '#{param_value}' couldn't be parsed to a '#{param_type}'\""}},{"id":"param_name:String-instance-method","html_id":"param_name:String-instance-method","name":"param_name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L111","def":{"name":"param_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param_name"}},{"id":"param_type:String-instance-method","html_id":"param_type:String-instance-method","name":"param_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L111","def":{"name":"param_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param_type"}},{"id":"param_value:String-instance-method","html_id":"param_value:String-instance-method","name":"param_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L111","def":{"name":"param_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param_value"}},{"id":"renderable_message:String-instance-method","html_id":"renderable_message:String-instance-method","name":"renderable_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L124","def":{"name":"renderable_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"message"}},{"id":"renderable_status:Int32-instance-method","html_id":"renderable_status:Int32-instance-method","name":"renderable_status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L120","def":{"name":"renderable_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"HTTP::Status::UNPROCESSABLE_ENTITY.value"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidSignatureError","path":"Lucky/InvalidSignatureError.html","kind":"class","full_name":"Lucky::InvalidSignatureError","name":"InvalidSignatureError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":102,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/LabelHelpers","path":"Lucky/LabelHelpers.html","kind":"module","full_name":"Lucky::LabelHelpers","name":"LabelHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/label_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/label_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"label_for(field:Avram::PermittedAttribute,text:String,**html_options)-instance-method","html_id":"label_for(field:Avram::PermittedAttribute,text:String,**html_options)-instance-method","name":"label_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"args_string":"(field : Avram::PermittedAttribute, text : String, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/label_helpers.cr#L10","def":{"name":"label_for","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"label(text, merge_options(html_options, {\"for\" => input_id(field)}))"}},{"id":"label_for(field:Avram::PermittedAttribute,**html_options)-instance-method","html_id":"label_for(field:Avram::PermittedAttribute,**html_options)-instance-method","name":"label_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/label_helpers.cr#L2","def":{"name":"label_for","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"label_for(field, Wordsmith::Inflector.humanize(field.name.to_s), **html_options)"}},{"id":"label_for(field:Avram::PermittedAttribute,**html_options,&)-instance-method","html_id":"label_for(field:Avram::PermittedAttribute,**html_options,&amp;)-instance-method","name":"label_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/label_helpers.cr#L17","def":{"name":"label_for","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"label(merge_options(html_options, {\"for\" => input_id(field)})) do\n  yield\nend"}},{"id":"label_for(field,**options)-instance-method","html_id":"label_for(field,**options)-instance-method","name":"label_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"args_string":"(field, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/label_helpers.cr#L23","def":{"name":"label_for","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field"}},{"id":"label_for(field,**options,&)-instance-method","html_id":"label_for(field,**options,&amp;)-instance-method","name":"label_for","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"args_string":"(field, **options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/label_helpers.cr#L27","def":{"name":"label_for","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky::InputHelpers.error_message_for_unallowed_field\nyield\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/LinkHelpers","path":"Lucky/LinkHelpers.html","kind":"module","full_name":"Lucky::LinkHelpers","name":"LinkHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/link_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"link(text,to:Lucky::RouteHelper,**html_options)-instance-method","html_id":"link(text,to:Lucky::RouteHelper,**html_options)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"}],"args_string":"(text, to : Lucky::RouteHelper, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L2","def":{"name":"link","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a(text, merge_options(html_options, link_to_href(to)))"}},{"id":"link(text,to:Lucky::Action.class,**html_options)-instance-method","html_id":"link(text,to:Lucky::Action.class,**html_options)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"}],"args_string":"(text, to : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L6","def":{"name":"link","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a(text, merge_options(html_options, link_to_href(to.route)))"}},{"id":"link(to:Lucky::RouteHelper,**html_options,&)-instance-method","html_id":"link(to:Lucky::RouteHelper,**html_options,&amp;)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"}],"args_string":"(to : Lucky::RouteHelper, **html_options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L10","def":{"name":"link","args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"a(merge_options(html_options, link_to_href(to))) do\n  yield\nend"}},{"id":"link(to:Lucky::Action.class,**html_options,&)-instance-method","html_id":"link(to:Lucky::Action.class,**html_options,&amp;)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"}],"args_string":"(to : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>, **html_options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L16","def":{"name":"link","args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"a(merge_options(html_options, link_to_href(to.route))) do\n  yield\nend"}},{"id":"link(text,to:String,**html_options)-instance-method","html_id":"link(text,to:String,**html_options)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"args_string":"(text, to : String, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L38","def":{"name":"link","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":""},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a(text, merge_options(html_options, {\"href\" => to}))"}},{"id":"link(to:Lucky::RouteHelper,**html_options)-instance-method","html_id":"link(to:Lucky::RouteHelper,**html_options)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"}],"args_string":"(to : Lucky::RouteHelper, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L22","def":{"name":"link","args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a(merge_options(html_options, link_to_href(to))) do\nend"}},{"id":"link(to:Lucky::Action.class,**html_options)-instance-method","html_id":"link(to:Lucky::Action.class,**html_options)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"}],"args_string":"(to : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L26","def":{"name":"link","args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a(merge_options(html_options, link_to_href(to.route))) do\nend"}},{"id":"link(to:String,**html_options,&)-instance-method","html_id":"link(to:String,**html_options,&amp;)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"args_string":"(to : String, **html_options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L42","def":{"name":"link","args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"a(merge_options(html_options, {\"href\" => to})) do\n  yield\nend"}},{"id":"link(to:String,**html_options)-instance-method","html_id":"link(to:String,**html_options)-instance-method","name":"link","doc":null,"summary":null,"abstract":false,"args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"args_string":"(to : String, **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/link_helpers.cr#L48","def":{"name":"link","args":[{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"String"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a(merge_options(html_options, {\"href\" => to})) do\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/LoggerHelpers","path":"Lucky/LoggerHelpers.html","kind":"module","full_name":"Lucky::LoggerHelpers","name":"LoggerHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/logger_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/logger_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"colored_status_code(status_code:Int32):String-class-method","html_id":"colored_status_code(status_code:Int32):String-class-method","name":"colored_status_code","doc":null,"summary":null,"abstract":false,"args":[{"name":"status_code","doc":null,"default_value":"","external_name":"status_code","restriction":"Int32"}],"args_string":"(status_code : Int32) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/logger_helpers.cr#L2","def":{"name":"colored_status_code","args":[{"name":"status_code","doc":null,"default_value":"","external_name":"status_code","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"case status_code\nwhen 200..399\n  \"#{status_code.colorize(:green)}\"\nwhen 400..499\n  \"#{status_code.colorize(:yellow)}\"\nwhen 500..599\n  \"#{status_code.colorize(:red)}\"\nelse\n  \"#{status_code}\"\nend"}},{"id":"elapsed_text(elapsed:Time::Span):String-class-method","html_id":"elapsed_text(elapsed:Time::Span):String-class-method","name":"elapsed_text","doc":null,"summary":null,"abstract":false,"args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Time::Span"}],"args_string":"(elapsed : Time::Span) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/logger_helpers.cr#L15","def":{"name":"elapsed_text","args":[{"name":"elapsed","doc":null,"default_value":"","external_name":"elapsed","restriction":"Time::Span"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"minutes = elapsed.total_minutes\nif minutes >= 1\n  return \"#{minutes.round(2)}m\"\nend\nseconds = elapsed.total_seconds\nif seconds >= 1\n  return \"#{seconds.round(2)}s\"\nend\nmillis = elapsed.total_milliseconds\nif millis >= 1\n  return \"#{millis.round(2)}ms\"\nend\n\"#{(millis * 1000).round(2)}Âµs\"\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/LogHandler","path":"Lucky/LogHandler.html","kind":"class","full_name":"Lucky::LogHandler","name":"LogHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/log_handler.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: skip_if : Proc(HTTP::Server::Context, Bool) | ::Nil, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr#L6","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr#L6","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr#L12","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"begin\n  start = Time.monotonic\n  should_skip = settings.skip_if.try(&.call(context))\n  if should_skip\n  else\n    log_request_start(context)\n  end\n  call_next(context)\n  if should_skip\n  else\n    log_request_end(context, duration: Time.monotonic - start)\n  end\nrescue e\n  log_exception(context, Time.utc, e)\n  raise(e)\nend"}},{"id":"logger(*args,**options)-instance-method","html_id":"logger(*args,**options)-instance-method","name":"logger","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr#L10","def":{"name":"logger","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky.logger(*args, **options)"}},{"id":"logger(*args,**options,&)-instance-method","html_id":"logger(*args,**options,&amp;)-instance-method","name":"logger","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr#L10","def":{"name":"logger","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"Lucky.logger(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr#L6","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/LogHandler/Settings","path":"Lucky/LogHandler/Settings.html","kind":"class","full_name":"Lucky::LogHandler::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/log_handler.cr","line_number":6,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/log_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/LogHandler","kind":"class","full_name":"Lucky::LogHandler","name":"LogHandler"},"doc":null,"summary":null,"class_methods":[{"id":"skip_if-class-method","html_id":"skip_if-class-method","name":"skip_if","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"skip_if","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@skip_if"}},{"id":"skip_if=(value:Proc(HTTP::Server::Context,Bool)?)-class-method","html_id":"skip_if=(value:Proc(HTTP::Server::Context,Bool)?)-class-method","name":"skip_if=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Proc(HTTP::Server::Context, Bool) | ::Nil"}],"args_string":"(value : Proc(HTTP::Server::Context, Bool)?)","source_link":null,"def":{"name":"skip_if=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Proc(HTTP::Server::Context, Bool) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@skip_if = value"}},{"id":"skip_if?-class-method","html_id":"skip_if?-class-method","name":"skip_if?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"skip_if?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@skip_if"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/Memoizable","path":"Lucky/Memoizable.html","kind":"module","full_name":"Lucky::Memoizable","name":"Memoizable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/memoizable.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/memoizable.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"},{"html_id":"github.com/luckyframework/lucky/Lucky/RequestTypeHelpers","kind":"module","full_name":"Lucky::RequestTypeHelpers","name":"RequestTypeHelpers"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"memoize(method_def)-macro","html_id":"memoize(method_def)-macro","name":"memoize","doc":"Caches the return value of the method. Helpful for expensive methods that are called more than once.\n\nTo memoize a method, prefix it with `memoize`:\n\n```\nclass BrowserAction\n  memoize def current_user : User\n    # Get the current user\n  end\nend\n```\n\nThis will fetch the user record on the first `current_user` call,\nthen each subsequent call returns the user record.\n\nThe `memoize` method will raise a compile time exception if you forget to include\na return type for your method, or if your return type is a `Union`.\nArguments are not allowed in memoized methods because these can change the return value.","summary":"<p>Caches the return value of the method.</p>","abstract":false,"args":[{"name":"method_def","doc":null,"default_value":"","external_name":"method_def","restriction":""}],"args_string":"(method_def)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/memoizable.cr#L20","def":{"name":"memoize","args":[{"name":"method_def","doc":null,"default_value":"","external_name":"method_def","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if method_def.return_type.is_a?(Union)\n  raise(\"Return type of memoize method must not be a Union\")\nend %}\n\n    \n{% if method_def.return_type.is_a?(Nop)\n  raise(\"You must define a return type for memoize methods\")\nend %}\n\n    \n{% if method_def.args.size > 0\n  raise(\"Memoize methods can not be defined with arguments\")\nend %}\n\n\n    @__\n{{ method_def.name }}\n : \n{{ method_def.return_type }}\n? = nil\n\n    \n# Returns uncached value\n\n    def \n{{ method_def.name }}\n__uncached : \n{{ method_def.return_type }}\n\n      \n{{ method_def.body }}\n\n    \nend\n\n    \n# Returns cached value\n\n    def \n{{ method_def.name }}\n : \n{{ method_def.return_type }}\n\n      @__\n{{ method_def.name }}\n ||= -> do\n        \n{{ method_def.name }}\n__uncached\n      \nend.call.not_nil!\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/MessageEncryptor","path":"Lucky/MessageEncryptor.html","kind":"class","full_name":"Lucky::MessageEncryptor","name":"MessageEncryptor","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/support/message_encryptor.cr","line_number":6,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(secret:String,cipher_algorithm=&quot;aes-256-cbc&quot;,digest=:sha1)-class-method","html_id":"new(secret:String,cipher_algorithm=&amp;quot;aes-256-cbc&amp;quot;,digest=:sha1)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"cipher_algorithm","doc":null,"default_value":"\"aes-256-cbc\"","external_name":"cipher_algorithm","restriction":""},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""}],"args_string":"(secret : String, cipher_algorithm = <span class=\"s\">&quot;aes-256-cbc&quot;</span>, digest = <span class=\"n\">:sha1</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr#L9","def":{"name":"new","args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"cipher_algorithm","doc":null,"default_value":"\"aes-256-cbc\"","external_name":"cipher_algorithm","restriction":""},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(secret, cipher_algorithm, digest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"decrypt(value:Bytes):Bytes-instance-method","html_id":"decrypt(value:Bytes):Bytes-instance-method","name":"decrypt","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"args_string":"(value : Bytes) : Bytes","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr#L46","def":{"name":"decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher = OpenSSL::Cipher.new(@cipher_algorithm)\ndata = value[0, value.size - @block_size]\niv = value[value.size - @block_size, @block_size]\ncipher.decrypt\ncipher.key = @secret\ncipher.iv = iv\ndecrypted_data = IO::Memory.new\ndecrypted_data.write(cipher.update(data))\ndecrypted_data.write(cipher.final)\ndecrypted_data.to_slice\n"}},{"id":"encrypt(value):Bytes-instance-method","html_id":"encrypt(value):Bytes-instance-method","name":"encrypt","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : Bytes","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr#L30","def":{"name":"encrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"cipher = OpenSSL::Cipher.new(@cipher_algorithm)\ncipher.encrypt\ncipher.key = @secret\niv = cipher.random_iv\nencrypted_data = IO::Memory.new\nencrypted_data.write(cipher.update(value))\nencrypted_data.write(cipher.final)\nencrypted_data.write(iv)\nencrypted_data.to_slice\n"}},{"id":"encrypt_and_sign(value:Slice(UInt8)):String-instance-method","html_id":"encrypt_and_sign(value:Slice(UInt8)):String-instance-method","name":"encrypt_and_sign","doc":"Encrypt and sign a message. We need to sign the message in order to avoid\npadding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.","summary":"<p>Encrypt and sign a message.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Slice(UInt8)"}],"args_string":"(value : Slice(UInt8)) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr#L16","def":{"name":"encrypt_and_sign","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Slice(UInt8)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"verifier.generate(encrypt(value))"}},{"id":"encrypt_and_sign(value:String):String-instance-method","html_id":"encrypt_and_sign(value:String):String-instance-method","name":"encrypt_and_sign","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr#L20","def":{"name":"encrypt_and_sign","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"encrypt_and_sign(value.to_slice)"}},{"id":"verifier:MessageVerifier-instance-method","html_id":"verifier:MessageVerifier-instance-method","name":"verifier","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : MessageVerifier","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr#L7","def":{"name":"verifier","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"MessageVerifier","visibility":"Public","body":"@verifier"}},{"id":"verify_and_decrypt(value:String):Bytes-instance-method","html_id":"verify_and_decrypt(value:String):Bytes-instance-method","name":"verify_and_decrypt","doc":"Verify and Decrypt a message. We need to verify the message in order to\navoid padding attacks. Reference: http://www.limited-entropy.com/padding-oracle-attacks.","summary":"<p>Verify and Decrypt a message.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String) : Bytes","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_encryptor.cr#L26","def":{"name":"verify_and_decrypt","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"decrypt(verifier.verify_raw(value))"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/MessageVerifier","path":"Lucky/MessageVerifier.html","kind":"class","full_name":"Lucky::MessageVerifier","name":"MessageVerifier","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/support/message_verifier.cr","line_number":5,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(secret:String,digest=:sha1)-class-method","html_id":"new(secret:String,digest=:sha1)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""}],"args_string":"(secret : String, digest = <span class=\"n\">:sha1</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr#L6","def":{"name":"new","args":[{"name":"secret","doc":null,"default_value":"","external_name":"secret","restriction":"String"},{"name":"digest","doc":null,"default_value":":sha1","external_name":"digest","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(secret, digest)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"generate(value:String|Bytes):String-instance-method","html_id":"generate(value:String|Bytes):String-instance-method","name":"generate","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Bytes"}],"args_string":"(value : String | Bytes) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr#L36","def":{"name":"generate","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String | Bytes"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"data = encode(value)\n\"#{data}--#{generate_digest(data)}\"\n"}},{"id":"valid_message?(data,digest):Bool-instance-method","html_id":"valid_message?(data,digest):Bool-instance-method","name":"valid_message?","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"digest","doc":null,"default_value":"","external_name":"digest","restriction":""}],"args_string":"(data, digest) : Bool","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr#L9","def":{"name":"valid_message?","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},{"name":"digest","doc":null,"default_value":"","external_name":"digest","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(data.size > 0 && digest.size > 0) && (Crypto::Subtle.constant_time_compare(digest, generate_digest(data)))"}},{"id":"verified(signed_message:String):String?-instance-method","html_id":"verified(signed_message:String):String?-instance-method","name":"verified","doc":null,"summary":null,"abstract":false,"args":[{"name":"signed_message","doc":null,"default_value":"","external_name":"signed_message","restriction":"String"}],"args_string":"(signed_message : String) : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr#L13","def":{"name":"verified","args":[{"name":"signed_message","doc":null,"default_value":"","external_name":"signed_message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"begin\n  data, digest = signed_message.split(\"--\")\n  if valid_message?(data, digest)\n    String.new(decode(data))\n  end\nrescue argument_error : ArgumentError\n  if argument_error.message =~ (/invalid base64/)\n    return\n  end\n  raise(argument_error)\nend"}},{"id":"verify(signed_message):String-instance-method","html_id":"verify(signed_message):String-instance-method","name":"verify","doc":null,"summary":null,"abstract":false,"args":[{"name":"signed_message","doc":null,"default_value":"","external_name":"signed_message","restriction":""}],"args_string":"(signed_message) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr#L23","def":{"name":"verify","args":[{"name":"signed_message","doc":null,"default_value":"","external_name":"signed_message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(verified(signed_message)) || (raise(InvalidSignatureError.new))"}},{"id":"verify_raw(signed_message:String):Bytes-instance-method","html_id":"verify_raw(signed_message:String):Bytes-instance-method","name":"verify_raw","doc":null,"summary":null,"abstract":false,"args":[{"name":"signed_message","doc":null,"default_value":"","external_name":"signed_message","restriction":"String"}],"args_string":"(signed_message : String) : Bytes","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/support/message_verifier.cr#L27","def":{"name":"verify_raw","args":[{"name":"signed_message","doc":null,"default_value":"","external_name":"signed_message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes","visibility":"Public","body":"data, digest = signed_message.split(\"--\")\nif valid_message?(data, digest)\n  decode(data)\nelse\n  raise(InvalidSignatureError.new)\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingFileError","path":"Lucky/MissingFileError.html","kind":"class","full_name":"Lucky::MissingFileError","name":"MissingFileError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":171,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(path:String)-class-method","html_id":"new(path:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(path : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L174","def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L177","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"Cannot read file #{path}\""}},{"id":"path:String-instance-method","html_id":"path:String-instance-method","name":"path","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L172","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@path"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingNestedParamError","path":"Lucky/MissingNestedParamError.html","kind":"class","full_name":"Lucky::MissingNestedParamError","name":"MissingNestedParamError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":150,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(nested_key:String|Symbol)-class-method","html_id":"new(nested_key:String|Symbol)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"args_string":"(nested_key : String | Symbol)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L155","def":{"name":"new","args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(nested_key)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L158","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"Missing param key: '#{nested_key}'\""}},{"id":"nested_key:String|Symbol-instance-method","html_id":"nested_key:String|Symbol-instance-method","name":"nested_key","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String | Symbol","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L153","def":{"name":"nested_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@nested_key"}},{"id":"renderable_message:String-instance-method","html_id":"renderable_message:String-instance-method","name":"renderable_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L166","def":{"name":"renderable_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"message"}},{"id":"renderable_status:Int32-instance-method","html_id":"renderable_status:Int32-instance-method","name":"renderable_status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L162","def":{"name":"renderable_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"400"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingParamError","path":"Lucky/MissingParamError.html","kind":"class","full_name":"Lucky::MissingParamError","name":"MissingParamError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":129,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(param_name:String)-class-method","html_id":"new(param_name:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"param_name","doc":null,"default_value":"","external_name":"param_name","restriction":"String"}],"args_string":"(param_name : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L134","def":{"name":"new","args":[{"name":"param_name","doc":null,"default_value":"","external_name":"param_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(param_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"message:String-instance-method","html_id":"message:String-instance-method","name":"message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L137","def":{"name":"message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"Missing parameter: '#{param_name}''\""}},{"id":"param_name:String-instance-method","html_id":"param_name:String-instance-method","name":"param_name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L132","def":{"name":"param_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@param_name"}},{"id":"renderable_message:String-instance-method","html_id":"renderable_message:String-instance-method","name":"renderable_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L145","def":{"name":"renderable_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"message"}},{"id":"renderable_status:Int32-instance-method","html_id":"renderable_status:Int32-instance-method","name":"renderable_status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L141","def":{"name":"renderable_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"400"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/MountComponent","path":"Lucky/MountComponent.html","kind":"module","full_name":"Lucky::MountComponent","name":"MountComponent","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/mount_component.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/mount_component.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"mount(component:Lucky::BaseComponent):Nil-instance-method","html_id":"mount(component:Lucky::BaseComponent):Nil-instance-method","name":"mount","doc":"Appends the `component` to the view.\n\nWhen `Lucky::HTMLPage.settings.render_component_comments` is\nset to `true`, it will render HTML comments showing where the component\nstarts and ends.\n\n```\nmount MyComponent.new\n```","summary":"<p>Appends the <code>component</code> to the view.</p>","abstract":false,"args":[{"name":"component","doc":null,"default_value":"","external_name":"component","restriction":"Lucky::BaseComponent"}],"args_string":"(component : Lucky::BaseComponent) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/mount_component.cr#L11","def":{"name":"mount","args":[{"name":"component","doc":null,"default_value":"","external_name":"component","restriction":"Lucky::BaseComponent"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"print_component_comment(component) do\n  (component.view(view)).render\nend"}},{"id":"mount(component:Lucky::BaseComponent,&):Nil-instance-method","html_id":"mount(component:Lucky::BaseComponent,&amp;):Nil-instance-method","name":"mount","doc":"Appends the `component` to the view. Takes a block, and yields the\nargs passed to the component.\n\nWhen `Lucky::HTMLPage.settings.render_component_comments` is\nset to `true`, it will render HTML comments showing where the component\nstarts and ends.\n\n```\nmount MyComponent.new(\"jane\") do |name|\n  text name.upcase\nend\n```","summary":"<p>Appends the <code>component</code> to the view.</p>","abstract":false,"args":[{"name":"component","doc":null,"default_value":"","external_name":"component","restriction":"Lucky::BaseComponent"}],"args_string":"(component : Lucky::BaseComponent, &) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/mount_component.cr#L29","def":{"name":"mount","args":[{"name":"component","doc":null,"default_value":"","external_name":"component","restriction":"Lucky::BaseComponent"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"print_component_comment(component) do\n  (component.view(view)).render do |*yield_args|\n    yield *yield_args\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/NotAcceptableError","path":"Lucky/NotAcceptableError.html","kind":"class","full_name":"Lucky::NotAcceptableError","name":"NotAcceptableError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":69,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(request:HTTP::Request,action_name:String,format:Symbol,accepted_formats:Array(Symbol))-class-method","html_id":"new(request:HTTP::Request,action_name:String,format:Symbol,accepted_formats:Array(Symbol))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"},{"name":"action_name","doc":null,"default_value":"","external_name":"action_name","restriction":"String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Symbol"},{"name":"accepted_formats","doc":null,"default_value":"","external_name":"accepted_formats","restriction":"Array(Symbol)"}],"args_string":"(request : HTTP::Request, action_name : String, format : Symbol, accepted_formats : Array(Symbol))","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L74","def":{"name":"new","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"},{"name":"action_name","doc":null,"default_value":"","external_name":"action_name","restriction":"String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Symbol"},{"name":"accepted_formats","doc":null,"default_value":"","external_name":"accepted_formats","restriction":"Array(Symbol)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(request, action_name, format, accepted_formats)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"renderable_message:String-instance-method","html_id":"renderable_message:String-instance-method","name":"renderable_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L93","def":{"name":"renderable_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"Accept header '#{request.headers[\"Accept\"]?}' is not accepted.\""}},{"id":"renderable_status:Int32-instance-method","html_id":"renderable_status:Int32-instance-method","name":"renderable_status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L89","def":{"name":"renderable_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"406"}},{"id":"request:HTTP::Request-instance-method","html_id":"request:HTTP::Request-instance-method","name":"request","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Request","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L72","def":{"name":"request","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@request"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/NumberToCurrency","path":"Lucky/NumberToCurrency.html","kind":"module","full_name":"Lucky::NumberToCurrency","name":"NumberToCurrency","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/page_helpers/number_to_currency.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/number_to_currency.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_DELIMITER","name":"DEFAULT_DELIMITER","value":"\",\"","doc":null,"summary":null},{"id":"DEFAULT_DELIMITER_REGEX","name":"DEFAULT_DELIMITER_REGEX","value":"/(\\d)(?=(\\d\\d\\d)+(?!\\d))/","doc":null,"summary":null},{"id":"DEFAULT_FORMAT","name":"DEFAULT_FORMAT","value":"\"%u%n\"","doc":null,"summary":null},{"id":"DEFAULT_PRECISION","name":"DEFAULT_PRECISION","value":"2","doc":null,"summary":null},{"id":"DEFAULT_SEPARATOR","name":"DEFAULT_SEPARATOR","value":"\".\"","doc":null,"summary":null},{"id":"DEFAULT_UNIT","name":"DEFAULT_UNIT","value":"\"$\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"number_to_currency(value:Float|Int32|String,precision:Int32=DEFAULT_PRECISION,unit:String=DEFAULT_UNIT,separator:String=DEFAULT_SEPARATOR,delimiter:String=DEFAULT_DELIMITER,delimiter_pattern:Regex=DEFAULT_DELIMITER_REGEX,format:String=DEFAULT_FORMAT,negative_format:String=DEFAULT_FORMAT):String-instance-method","html_id":"number_to_currency(value:Float|Int32|String,precision:Int32=DEFAULT_PRECISION,unit:String=DEFAULT_UNIT,separator:String=DEFAULT_SEPARATOR,delimiter:String=DEFAULT_DELIMITER,delimiter_pattern:Regex=DEFAULT_DELIMITER_REGEX,format:String=DEFAULT_FORMAT,negative_format:String=DEFAULT_FORMAT):String-instance-method","name":"number_to_currency","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float | Int32 | String"},{"name":"precision","doc":null,"default_value":"DEFAULT_PRECISION","external_name":"precision","restriction":"Int32"},{"name":"unit","doc":null,"default_value":"DEFAULT_UNIT","external_name":"unit","restriction":"String"},{"name":"separator","doc":null,"default_value":"DEFAULT_SEPARATOR","external_name":"separator","restriction":"String"},{"name":"delimiter","doc":null,"default_value":"DEFAULT_DELIMITER","external_name":"delimiter","restriction":"String"},{"name":"delimiter_pattern","doc":null,"default_value":"DEFAULT_DELIMITER_REGEX","external_name":"delimiter_pattern","restriction":"Regex"},{"name":"format","doc":null,"default_value":"DEFAULT_FORMAT","external_name":"format","restriction":"String"},{"name":"negative_format","doc":null,"default_value":"DEFAULT_FORMAT","external_name":"negative_format","restriction":"String"}],"args_string":"(value : Float | Int32 | String, precision : Int32 = <span class=\"t\">DEFAULT_PRECISION</span>, unit : String = <span class=\"t\">DEFAULT_UNIT</span>, separator : String = <span class=\"t\">DEFAULT_SEPARATOR</span>, delimiter : String = <span class=\"t\">DEFAULT_DELIMITER</span>, delimiter_pattern : Regex = <span class=\"t\">DEFAULT_DELIMITER_REGEX</span>, format : String = <span class=\"t\">DEFAULT_FORMAT</span>, negative_format : String = <span class=\"t\">DEFAULT_FORMAT</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/number_to_currency.cr#L9","def":{"name":"number_to_currency","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float | Int32 | String"},{"name":"precision","doc":null,"default_value":"DEFAULT_PRECISION","external_name":"precision","restriction":"Int32"},{"name":"unit","doc":null,"default_value":"DEFAULT_UNIT","external_name":"unit","restriction":"String"},{"name":"separator","doc":null,"default_value":"DEFAULT_SEPARATOR","external_name":"separator","restriction":"String"},{"name":"delimiter","doc":null,"default_value":"DEFAULT_DELIMITER","external_name":"delimiter","restriction":"String"},{"name":"delimiter_pattern","doc":null,"default_value":"DEFAULT_DELIMITER_REGEX","external_name":"delimiter_pattern","restriction":"Regex"},{"name":"format","doc":null,"default_value":"DEFAULT_FORMAT","external_name":"format","restriction":"String"},{"name":"negative_format","doc":null,"default_value":"DEFAULT_FORMAT","external_name":"negative_format","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"value = value.to_s\nif value.to_f.sign == -1\n  if negative_format != DEFAULT_FORMAT\n    format = negative_format\n  end\n  value = value.to_f.abs.to_s\nend\nvalue = \"%.#{precision}f\" % value\nleft, right = value.split(\".\")\nleft = left.gsub(delimiter_pattern) do |digit_to_delimit|\n  \"#{digit_to_delimit}#{delimiter}\"\nend\nnumber = \"#{left}#{separator}#{right}\"\n(format.gsub(\"%n\", number)).gsub(\"%u\", unit)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/ParamHelpers","path":"Lucky/ParamHelpers.html","kind":"module","full_name":"Lucky::ParamHelpers","name":"ParamHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/param_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/param_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"params:Lucky::Params-instance-method","html_id":"params:Lucky::Params-instance-method","name":"params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Lucky::Params","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/param_helpers.cr#L4","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::Params","visibility":"Public","body":"@_params || (@_params = Lucky::Params.new(context.request, @route_params))"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/ParamParsingError","path":"Lucky/ParamParsingError.html","kind":"class","full_name":"Lucky::ParamParsingError","name":"ParamParsingError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":17,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(request:HTTP::Request)-class-method","html_id":"new(request:HTTP::Request)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"}],"args_string":"(request : HTTP::Request)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L22","def":{"name":"new","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(request)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"renderable_message:String-instance-method","html_id":"renderable_message:String-instance-method","name":"renderable_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L30","def":{"name":"renderable_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"There was a problem parsing the JSON params. Please check that it is formed correctly.\""}},{"id":"renderable_status:Int32-instance-method","html_id":"renderable_status:Int32-instance-method","name":"renderable_status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L26","def":{"name":"renderable_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"400"}},{"id":"request:HTTP::Request-instance-method","html_id":"request:HTTP::Request-instance-method","name":"request","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Request","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L20","def":{"name":"request","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@request"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Params","path":"Lucky/Params.html","kind":"class","full_name":"Lucky::Params","name":"Params","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Avram/Paramable","kind":"module","full_name":"Avram::Paramable","name":"Paramable"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/params.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Avram/Paramable","kind":"module","full_name":"Avram::Paramable","name":"Paramable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(request,route_params={}ofString=>String)-class-method","html_id":"new(request,route_params={}ofString=&gt;String)-class-method","name":"new","doc":"Create a new params object\n\nThe params object is initialized with an `HTTP::Request` and a hash of\nparams. The request object has many optional parameters. See Crystal's\n[HTTP::Request](https://crystal-lang.org/api/latest/HTTP/Request.html)\nclass for more details.\n\n```crystal\nrequest = HTTP::Request.new(\"GET\", \"/\")\nroute_params = {\"token\" => \"123\"}\n\nLucky::Params.new(request, route_params)\n```","summary":"<p>Create a new params object</p>","abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""},{"name":"route_params","doc":null,"default_value":"{} of String => String","external_name":"route_params","restriction":""}],"args_string":"(request, route_params = {} <span class=\"k\">of</span> <span class=\"t\">String</span> => <span class=\"t\">String</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L25","def":{"name":"new","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":""},{"name":"route_params","doc":null,"default_value":"{} of String => String","external_name":"route_params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(request, route_params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"get(key):String-instance-method","html_id":"get(key):String-instance-method","name":"get","doc":"Retrieve a value from the params hash, raise if key is absent\n\nIf no key is found a `Lucky::MissingParamError` will be raised:\n\n```crystal\nparams.get(\"page\")    # 1 : String\nparams.get(\"missing\") # Missing parameter: missing\n```","summary":"<p>Retrieve a value from the params hash, raise if key is absent</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(key) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L36","def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(get?(key)) || (raise(Lucky::MissingParamError.new(key.to_s)))"}},{"id":"get?(key:String|Symbol):String?-instance-method","html_id":"get?(key:String|Symbol):String?-instance-method","name":"get?","doc":"Retrieve a value from the params hash, return nil if key is absent\n\n```crystal\nparams.get?(\"page\")    # 1 : (String | Nil)\nparams.get?(\"missing\") # nil : (String | Nil)\n```","summary":"<p>Retrieve a value from the params hash, return nil if key is absent</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol) : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L46","def":{"name":"get?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"(route_params[key.to_s]? || (body_param(key.to_s))) || query_params[key.to_s]?"}},{"id":"get_file(key):Lucky::UploadedFile-instance-method","html_id":"get_file(key):Lucky::UploadedFile-instance-method","name":"get_file","doc":"Retrieve a file from the params hash, raise if key is absent\n\nIf no key is found a `Lucky::MissingParamError` will be raised:\n\n```crystal\nparams.get(\"avatar_file\") # Lucky::UploadedFile\nparams.get(\"missing\")     # Missing parameter: missing\n```","summary":"<p>Retrieve a file from the params hash, raise if key is absent</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"args_string":"(key) : Lucky::UploadedFile","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L58","def":{"name":"get_file","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::UploadedFile","visibility":"Public","body":"(get_file?(key)) || (raise(Lucky::MissingParamError.new(key.to_s)))"}},{"id":"get_file?(key:String|Symbol):Lucky::UploadedFile?-instance-method","html_id":"get_file?(key:String|Symbol):Lucky::UploadedFile?-instance-method","name":"get_file?","doc":"Retrieve a file from the params hash, return nil if key is absent\n\n```crystal\nparams.get(\"avatar_file\") # (Lucky::UploadedFile | Nil)\nparams.get(\"missing\")     # nil\n```","summary":"<p>Retrieve a file from the params hash, return nil if key is absent</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"args_string":"(key : String | Symbol) : Lucky::UploadedFile?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L68","def":{"name":"get_file?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::UploadedFile | ::Nil","visibility":"Public","body":"multipart_files[key.to_s]?"}},{"id":"many_nested(nested_key:String|Symbol):Array(Hash(String,String))-instance-method","html_id":"many_nested(nested_key:String|Symbol):Array(Hash(String,String))-instance-method","name":"many_nested","doc":"Retrieve nested values from the params\n\nNested params often appear in JSON requests or Form submissions. If no key\nis found a `Lucky::MissingParamError` will be raised:\n\n```crystal\nbody = \"users[0]:name=Alesia&users[0]:age=35&users[1]:name=Bob&users[1]:age=40&page=1\"\nrequest = HTTP::Request.new(\"POST\", \"/\", body: body)\nparams = Lucky::Params.new(request)\n\nparams.many_nested(\"users\")\n# [{\"name\" => \"Alesia\", \"age\" => \"35\"}, { \"name\" => \"Bob\", \"age\" => \"40\" }]\nparams.many_nested(\"missing\") # Missing parameter: missing\n```","summary":"<p>Retrieve nested values from the params</p>","abstract":false,"args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"args_string":"(nested_key : String | Symbol) : Array(Hash(String, String))","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L160","def":{"name":"many_nested","args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Hash(String, String))","visibility":"Public","body":"nested_params = many_nested?(nested_key)\nif nested_params.empty?\n  raise(Lucky::MissingNestedParamError.new(nested_key))\nelse\n  nested_params\nend\n"}},{"id":"many_nested?(nested_key:String|Symbol):Array(Hash(String,String))-instance-method","html_id":"many_nested?(nested_key:String|Symbol):Array(Hash(String,String))-instance-method","name":"many_nested?","doc":"Retrieve nested values from the params\n\nNested params often appear in JSON requests or Form submissions. If no key\nis found an empty array will be returned:\n\n```crystal\nbody = \"users[0]:name=Alesia&users[0]:age=35&users[1]:name=Bob&users[1]:age=40&page=1\"\nrequest = HTTP::Request.new(\"POST\", \"/\", body: body)\nparams = Lucky::Params.new(request)\n\nparams.nested(\"users\")\n# [{\"name\" => \"Alesia\", \"age\" => \"35\"}, { \"name\" => \"Bob\", \"age\" => \"40\" }]\nparams.nested(\"missing\") # []\n```","summary":"<p>Retrieve nested values from the params</p>","abstract":false,"args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"args_string":"(nested_key : String | Symbol) : Array(Hash(String, String))","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L183","def":{"name":"many_nested?","args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Hash(String, String))","visibility":"Public","body":"(zipped_many_nested_params(nested_key.to_s)).map do |a, b|\n  (a || ({} of String => String)).merge(b || ({} of String => String))\nend"}},{"id":"nested(nested_key:String|Symbol):Hash(String,String)-instance-method","html_id":"nested(nested_key:String|Symbol):Hash(String,String)-instance-method","name":"nested","doc":"Retrieve a nested value from the params\n\nNested params often appear in JSON requests or Form submissions. If no key\nis found a `Lucky::MissingParamError` will be raised:\n\n```crystal\nbody = \"user:name=Alesia&user:age=35&page=1\"\nrequest = HTTP::Request.new(\"POST\", \"/\", body: body)\nparams = Lucky::Params.new(request)\n\nparams.nested(\"user\")    # {\"name\" => \"Alesia\", \"age\" => \"35\"}\nparams.nested(\"missing\") # Missing parameter: missing\n```","summary":"<p>Retrieve a nested value from the params</p>","abstract":false,"args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"args_string":"(nested_key : String | Symbol) : Hash(String, String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L85","def":{"name":"nested","args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, String)","visibility":"Public","body":"nested_params = nested?(nested_key)\nif nested_params.keys.empty?\n  raise(Lucky::MissingNestedParamError.new(nested_key))\nelse\n  nested_params\nend\n"}},{"id":"nested?(nested_key:String|Symbol):Hash(String,String)-instance-method","html_id":"nested?(nested_key:String|Symbol):Hash(String,String)-instance-method","name":"nested?","doc":"Retrieve a nested value from the params\n\nNested params often appear in JSON requests or Form submissions. If no key\nis found an empty hash will be returned:\n\n```crystal\nbody = \"user:name=Alesia&user:age=35&page=1\"\nrequest = HTTP::Request.new(\"POST\", \"/\", body: body)\nparams = Lucky::Params.new(request)\n\nparams.nested(\"user\")    # {\"name\" => \"Alesia\", \"age\" => \"35\"}\nparams.nested(\"missing\") # {}\n```","summary":"<p>Retrieve a nested value from the params</p>","abstract":false,"args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"args_string":"(nested_key : String | Symbol) : Hash(String, String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L107","def":{"name":"nested?","args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, String)","visibility":"Public","body":"if json?\n  (nested_json_params(nested_key.to_s)).merge(nested_query_params(nested_key.to_s))\nelse\n  (nested_form_params(nested_key.to_s)).merge(nested_query_params(nested_key.to_s))\nend"}},{"id":"nested_file(nested_key:String|Symbol):Hash(String,Lucky::UploadedFile)-instance-method","html_id":"nested_file(nested_key:String|Symbol):Hash(String,Lucky::UploadedFile)-instance-method","name":"nested_file","doc":"Retrieve a nested file from the params\n\nNested params often appear in JSON requests or Form submissions. If no key\nis found a `Lucky::MissingParamError` will be raised:\n\n```crystal\nparams.nested_file?(\"file\")    # Lucky::UploadedFile\nparams.nested_file?(\"missing\") # {}\n```","summary":"<p>Retrieve a nested file from the params</p>","abstract":false,"args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"args_string":"(nested_key : String | Symbol) : Hash(String, Lucky::UploadedFile)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L124","def":{"name":"nested_file","args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Lucky::UploadedFile)","visibility":"Public","body":"nested_file_params = nested_file?(nested_key)\nif nested_file_params.keys.empty?\n  raise(Lucky::MissingNestedParamError.new(nested_key))\nelse\n  nested_file_params\nend\n"}},{"id":"nested_file?(nested_key:String|Symbol):Hash(String,Lucky::UploadedFile)?-instance-method","html_id":"nested_file?(nested_key:String|Symbol):Hash(String,Lucky::UploadedFile)?-instance-method","name":"nested_file?","doc":"Retrieve a nested file from the params\n\nNested params often appear in JSON requests or Form submissions. If no key\nis found an empty hash will be returned:\n\n```crystal\nparams.nested_file(\"file\")    # Lucky::UploadedFile\nparams.nested_file(\"missing\") # Missing parameter: missing\n```","summary":"<p>Retrieve a nested file from the params</p>","abstract":false,"args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"args_string":"(nested_key : String | Symbol) : Hash(String, Lucky::UploadedFile)?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L142","def":{"name":"nested_file?","args":[{"name":"nested_key","doc":null,"default_value":"","external_name":"nested_key","restriction":"String | Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Lucky::UploadedFile) | ::Nil","visibility":"Public","body":"nested_file_params(nested_key.to_s)"}},{"id":"to_h-instance-method","html_id":"to_h-instance-method","name":"to_h","doc":"Converts the params in to a `Hash(String, String)`\n\n```crystal\nrequest.query = \"filter:name=trombone&page=1&per=50\"\nparams = Lucky::Params.new(request)\nparams.to_h # {\"filter\" => {\"name\" => \"trombone\"}, \"page\" => \"1\", \"per\" => \"50\"}\n```","summary":"<p>Converts the params in to a <code><a href=\"../Hash.html\">Hash</a>(<a href=\"../String.html\">String</a>, <a href=\"../String.html\">String</a>)</code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/params.cr#L196","def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if json?\n  parsed_json.as_h.merge(query_params.to_h)\nelse\n  hash = {} of String => String | Hash(String, String)\n  params = body_params.to_h.merge(query_params.to_h)\n  params.map do |key, value|\n    keys = key.split(':')\n    is_nested = keys.size > 1\n    if is_nested\n      hash[keys.first] = nested(keys.first)\n    else\n      hash[key] = value.as(String)\n    end\n  end\n  hash\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/PrettyLogFormatter","path":"Lucky/PrettyLogFormatter.html","kind":"struct","full_name":"Lucky::PrettyLogFormatter","name":"PrettyLogFormatter","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Dexter/Formatters/BaseLogFormatter","kind":"struct","full_name":"Dexter::Formatters::BaseLogFormatter","name":"BaseLogFormatter"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Dexter/Formatters/BaseLogFormatter","kind":"struct","full_name":"Dexter::Formatters::BaseLogFormatter","name":"BaseLogFormatter"},{"html_id":"github.com/luckyframework/lucky/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/luckyframework/lucky/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/pretty_log_formatter.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/pretty_log_formatter.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"MESSAGE_FORMATTERS","name":"MESSAGE_FORMATTERS","value":"[RequestStartedFormatter, RequestEndedFormatter, PlainTextFormatter, AnyOtherDataFormatter]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"format(data:NamedTuple):Nil-instance-method","html_id":"format(data:NamedTuple):Nil-instance-method","name":"format","doc":null,"summary":null,"abstract":false,"args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"NamedTuple"}],"args_string":"(data : NamedTuple) : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/pretty_log_formatter.cr#L87","def":{"name":"format","args":[{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"MESSAGE_FORMATTERS.each do |message_formatter|\n  result = (message_formatter.new(io, severity)).format(data)\n  if result.is_a?(MessageFormatter::Continue)\n  else\n    break\n  end\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/ProtectFromForgery","path":"Lucky/ProtectFromForgery.html","kind":"module","full_name":"Lucky::ProtectFromForgery","name":"ProtectFromForgery","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/protect_from_forgery.cr","line_number":5,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/protect_from_forgery.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ALLOWED_METHODS","name":"ALLOWED_METHODS","value":"[\"GET\", \"HEAD\", \"OPTIONS\", \"TRACE\"] of ::String","doc":null,"summary":null},{"id":"PARAM_KEY","name":"PARAM_KEY","value":"\"_csrf\"","doc":null,"summary":null},{"id":"SESSION_KEY","name":"SESSION_KEY","value":"\"X-CSRF-TOKEN\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Protect from CSRF attacks\n\nThis module is automatically included in `BrowserAction` to protect from CSRF\nattacks.","summary":"<p>Protect from CSRF attacks</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/QuickDef","path":"Lucky/QuickDef.html","kind":"module","full_name":"Lucky::QuickDef","name":"QuickDef","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/quick_def.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/quick_def.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"quick_def(method_name,value)-macro","html_id":"quick_def(method_name,value)-macro","name":"quick_def","doc":"Quickly create a method with a simple return value\n\n```\n# Instead of:\ndef name\n  \"Kylo\"\nend\n\n# You could use quick_def:\nquick_def :name, \"Kylo\"\n```","summary":"<p>Quickly create a method with a simple return value</p>","abstract":false,"args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(method_name, value)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/quick_def.cr#L13","def":{"name":"quick_def","args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    def \n{{ method_name.id }}\n\n      \n{{ value }}\n\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Redirectable","path":"Lucky/Redirectable.html","kind":"module","full_name":"Lucky::Redirectable","name":"Redirectable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/redirectable.cr","line_number":26,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/redirectable.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"},{"html_id":"github.com/luckyframework/lucky/Lucky/ErrorAction","kind":"class","full_name":"Lucky::ErrorAction","name":"ErrorAction"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Redirect the request\n\nThere are multiple ways to redirect inside of an action. The most common ways are to redirect to a `Lucky::Action` class, or a URL/path `String`. Both use the `redirect` method:\n\n```crystal\nredirect to: Users::Index\nredirect to: Users::Show.with(user.id)\nredirect to: \"https://luckyframework.org/\"\nredirect to: \"/users\"\n```\n\nBy default, the method will set the status code to `302` A.K.A. \"Found\". If you want to customize the status code, you can pass it directly:\n\n```crystal\nredirect to: Users::Index, status: 301\n\n# or use the built in enum value\nredirect to: Users::Index, status: :moved_permanently\n```\n\nYou can find a list of all of the possible statuses [here](https://github.com/luckyframework/lucky/blob/master/src/lucky/action.cr).\n\nInternally, all the different methods in this module eventually use the\nmethod that takes a `String`. However, it's recommended you pass a\n`Lucky::Action` class if possible because it guarantees runtime safety.","summary":"<p>Redirect the request</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"redirect(toroute:Lucky::RouteHelper,status=302):Lucky::TextResponse-instance-method","html_id":"redirect(toroute:Lucky::RouteHelper,status=302):Lucky::TextResponse-instance-method","name":"redirect","doc":"Redirect using a `Lucky::RouteHelper`\n\n```crystal\nredirect to: Users::Show.with(user.id), status: 301\n```","summary":"<p>Redirect using a <code><a href=\"../Lucky/RouteHelper.html\">Lucky::RouteHelper</a></code></p>","abstract":false,"args":[{"name":"route","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"},{"name":"status","doc":null,"default_value":"302","external_name":"status","restriction":""}],"args_string":"(to route : Lucky::RouteHelper, status = <span class=\"n\">302</span>) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/redirectable.cr#L32","def":{"name":"redirect","args":[{"name":"route","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::RouteHelper"},{"name":"status","doc":null,"default_value":"302","external_name":"status","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"redirect(to: route.path, status: status)"}},{"id":"redirect(toaction:Lucky::Action.class,status=302):Lucky::TextResponse-instance-method","html_id":"redirect(toaction:Lucky::Action.class,status=302):Lucky::TextResponse-instance-method","name":"redirect","doc":"Redirect to a `Lucky::Action`\n\n```crystal\nredirect to: Users::Index\n```","summary":"<p>Redirect to a <code><a href=\"../Lucky/Action.html\">Lucky::Action</a></code></p>","abstract":false,"args":[{"name":"action","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"},{"name":"status","doc":null,"default_value":"302","external_name":"status","restriction":""}],"args_string":"(to action : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>, status = <span class=\"n\">302</span>) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/redirectable.cr#L41","def":{"name":"redirect","args":[{"name":"action","doc":null,"default_value":"","external_name":"to","restriction":"Lucky::Action.class"},{"name":"status","doc":null,"default_value":"302","external_name":"status","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"redirect(to: action.route, status: status)"}},{"id":"redirect(topath:String,status:HTTP::Status):Lucky::TextResponse-instance-method","html_id":"redirect(topath:String,status:HTTP::Status):Lucky::TextResponse-instance-method","name":"redirect","doc":"Redirect to the given path, with a human friendly status\n\n```crystal\nredirect to: \"/users\", status: :moved_permanently\n```\nYou can find a list of all of the possible statuses [here](https://github.com/luckyframework/lucky/blob/master/src/lucky/action.cr).","summary":"<p>Redirect to the given path, with a human friendly status</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"args_string":"(to path : String, status : HTTP::Status) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/redirectable.cr#L51","def":{"name":"redirect","args":[{"name":"path","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"redirect(path, status.value)"}},{"id":"redirect(topath:String,status:Int32=302):Lucky::TextResponse-instance-method","html_id":"redirect(topath:String,status:Int32=302):Lucky::TextResponse-instance-method","name":"redirect","doc":"Redirect to the given path, with an optional `Int32` status\n\n```crystal\nredirect to: \"/users\"\nredirect to: \"/users/1\", status: 301\n```\nNote: It's recommended to use the method above that accepts a human friendly version of the status","summary":"<p>Redirect to the given path, with an optional <code><a href=\"../Int32.html\">Int32</a></code> status</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"status","doc":null,"default_value":"302","external_name":"status","restriction":"Int32"}],"args_string":"(to path : String, status : Int32 = <span class=\"n\">302</span>) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/redirectable.cr#L62","def":{"name":"redirect","args":[{"name":"path","doc":null,"default_value":"","external_name":"to","restriction":"String"},{"name":"status","doc":null,"default_value":"302","external_name":"status","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"context.response.headers.add(\"Location\", path)\ncontext.response.headers.add(\"Turbolinks-Location\", path)\ncontext.response.status_code = status\nLucky::TextResponse.new(context, \"\", \"\")\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Renderable","path":"Lucky/Renderable.html","kind":"module","full_name":"Lucky::Renderable","name":"Renderable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/renderable.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"},{"html_id":"github.com/luckyframework/lucky/Lucky/ErrorAction","kind":"class","full_name":"Lucky::ErrorAction","name":"ErrorAction"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"file(path:String,content_type:String?=nil,disposition:String=&quot;attachment&quot;,filename:String?=nil,status:Int32?=nil):Lucky::FileResponse-instance-method","html_id":"file(path:String,content_type:String?=nil,disposition:String=&amp;quot;attachment&amp;quot;,filename:String?=nil,status:Int32?=nil):Lucky::FileResponse-instance-method","name":"file","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content_type","doc":null,"default_value":"nil","external_name":"content_type","restriction":"String | ::Nil"},{"name":"disposition","doc":null,"default_value":"\"attachment\"","external_name":"disposition","restriction":"String"},{"name":"filename","doc":null,"default_value":"nil","external_name":"filename","restriction":"String | ::Nil"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"args_string":"(path : String, content_type : String? = <span class=\"n\">nil</span>, disposition : String = <span class=\"s\">&quot;attachment&quot;</span>, filename : String? = <span class=\"n\">nil</span>, status : Int32? = <span class=\"n\">nil</span>) : Lucky::FileResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L130","def":{"name":"file","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content_type","doc":null,"default_value":"nil","external_name":"content_type","restriction":"String | ::Nil"},{"name":"disposition","doc":null,"default_value":"\"attachment\"","external_name":"disposition","restriction":"String"},{"name":"filename","doc":null,"default_value":"nil","external_name":"filename","restriction":"String | ::Nil"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::FileResponse","visibility":"Public","body":"Lucky::FileResponse.new(context, path, content_type, disposition, filename, status)"}},{"id":"file(path:String,content_type:String?=nil,disposition:String=&quot;attachment&quot;,filename:String?=nil,status:HTTP::Status=HTTP::Status::OK):Lucky::FileResponse-instance-method","html_id":"file(path:String,content_type:String?=nil,disposition:String=&amp;quot;attachment&amp;quot;,filename:String?=nil,status:HTTP::Status=HTTP::Status::OK):Lucky::FileResponse-instance-method","name":"file","doc":null,"summary":null,"abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content_type","doc":null,"default_value":"nil","external_name":"content_type","restriction":"String | ::Nil"},{"name":"disposition","doc":null,"default_value":"\"attachment\"","external_name":"disposition","restriction":"String"},{"name":"filename","doc":null,"default_value":"nil","external_name":"filename","restriction":"String | ::Nil"},{"name":"status","doc":null,"default_value":"HTTP::Status::OK","external_name":"status","restriction":"HTTP::Status"}],"args_string":"(path : String, content_type : String? = <span class=\"n\">nil</span>, disposition : String = <span class=\"s\">&quot;attachment&quot;</span>, filename : String? = <span class=\"n\">nil</span>, status : HTTP::Status = <span class=\"t\">HTTP</span><span class=\"t\">::</span><span class=\"t\">Status</span><span class=\"t\">::</span><span class=\"t\">OK</span>) : Lucky::FileResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L138","def":{"name":"file","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"content_type","doc":null,"default_value":"nil","external_name":"content_type","restriction":"String | ::Nil"},{"name":"disposition","doc":null,"default_value":"\"attachment\"","external_name":"disposition","restriction":"String"},{"name":"filename","doc":null,"default_value":"nil","external_name":"filename","restriction":"String | ::Nil"},{"name":"status","doc":null,"default_value":"HTTP::Status::OK","external_name":"status","restriction":"HTTP::Status"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::FileResponse","visibility":"Public","body":"file(path, content_type, disposition, filename, status.value)"}},{"id":"head(status:Int32):Lucky::TextResponse-instance-method","html_id":"head(status:Int32):Lucky::TextResponse-instance-method","name":"head","doc":null,"summary":null,"abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int32"}],"args_string":"(status : Int32) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L168","def":{"name":"head","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"send_text_response(body: \"\", content_type: \"\", status: status)"}},{"id":"head(status:HTTP::Status):Lucky::TextResponse-instance-method","html_id":"head(status:HTTP::Status):Lucky::TextResponse-instance-method","name":"head","doc":null,"summary":null,"abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"args_string":"(status : HTTP::Status) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L172","def":{"name":"head","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"head(status.value)"}},{"id":"json(body,status:Int32?=nil):Lucky::TextResponse-instance-method","html_id":"json(body,status:Int32?=nil):Lucky::TextResponse-instance-method","name":"json","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"args_string":"(body, status : Int32? = <span class=\"n\">nil</span>) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L176","def":{"name":"json","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"send_text_response(body.to_json, \"application/json\", status)"}},{"id":"json(body,status:HTTP::Status):Lucky::TextResponse-instance-method","html_id":"json(body,status:HTTP::Status):Lucky::TextResponse-instance-method","name":"json","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"args_string":"(body, status : HTTP::Status) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L180","def":{"name":"json","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"json(body, status: status.value)"}},{"id":"plain_text(body:String,status:Int32?=nil):Lucky::TextResponse-instance-method","html_id":"plain_text(body:String,status:Int32?=nil):Lucky::TextResponse-instance-method","name":"plain_text","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"args_string":"(body : String, status : Int32? = <span class=\"n\">nil</span>) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L150","def":{"name":"plain_text","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"send_text_response(body, \"text/plain\", status)"}},{"id":"plain_text(body:String,status:HTTP::Status):Lucky::TextResponse-instance-method","html_id":"plain_text(body:String,status:HTTP::Status):Lucky::TextResponse-instance-method","name":"plain_text","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"args_string":"(body : String, status : HTTP::Status) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L154","def":{"name":"plain_text","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"plain_text(body, status: status.value)"}},{"id":"send_text_response(body:String,content_type:String,status:Int32?=nil):Lucky::TextResponse-instance-method","html_id":"send_text_response(body:String,content_type:String,status:Int32?=nil):Lucky::TextResponse-instance-method","name":"send_text_response","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"content_type","doc":null,"default_value":"","external_name":"content_type","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"args_string":"(body : String, content_type : String, status : Int32? = <span class=\"n\">nil</span>) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L146","def":{"name":"send_text_response","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"content_type","doc":null,"default_value":"","external_name":"content_type","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"Lucky::TextResponse.new(context, content_type, body, status: status)"}},{"id":"xml(body:String,status:Int32?=nil):Lucky::TextResponse-instance-method","html_id":"xml(body:String,status:Int32?=nil):Lucky::TextResponse-instance-method","name":"xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"args_string":"(body : String, status : Int32? = <span class=\"n\">nil</span>) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L184","def":{"name":"xml","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"send_text_response(body, \"text/xml\", status)"}},{"id":"xml(body,status:HTTP::Status):Lucky::TextResponse-instance-method","html_id":"xml(body,status:HTTP::Status):Lucky::TextResponse-instance-method","name":"xml","doc":null,"summary":null,"abstract":false,"args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"args_string":"(body, status : HTTP::Status) : Lucky::TextResponse","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L188","def":{"name":"xml","args":[{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":""},{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":"HTTP::Status"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::TextResponse","visibility":"Public","body":"xml(body, status: status.value)"}}],"macros":[{"id":"html(page_class=nil,**assigns)-macro","html_id":"html(page_class=nil,**assigns)-macro","name":"html","doc":"Render a page and pass it data\n\n`html` is used to pass data to a page and render it. Each key/value pair\nmust match up with each `needs` declarations for that page. For example, if\nwe have a page like this:\n\n```crystal\nclass Users::IndexPage < MainLayout\n  needs users : UserQuery\n\n  def content\n    @users.each do |user|\n      # ...\n    end\n  end\nend\n```\n\nOur action must pass a `users` key to the `html` method like this:\n\n```crystal\nclass Users::Index < BrowserAction\n  route do\n    html IndexPage, users: UserQuery.new\n  end\nend\n```\n\nNote also that each piece of data is merged with any `expose` declarations:\n\n```crystal\nclass Users::Index < BrowserAction\n  expose current_user\n\n  route do\n    # Users::IndexPage receives users AND current_user\n    html IndexPage users: UserQuery.new\n  end\n\n  private def current_user\n    # ...\n  end\nend\n```","summary":"<p>Render a page and pass it data</p>","abstract":false,"args":[{"name":"page_class","doc":null,"default_value":"nil","external_name":"page_class","restriction":""}],"args_string":"(page_class = <span class=\"n\">nil</span>, **assigns)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable.cr#L46","def":{"name":"html","args":[{"name":"page_class","doc":null,"default_value":"nil","external_name":"page_class","restriction":""}],"double_splat":{"name":"assigns","doc":null,"default_value":"","external_name":"assigns","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"    validate_page_class!(\n{{ page_class }}\n)\n\n    render_html_page(\n      \n{{ page_class = page_class || \"#{@type.name}Page\".id }}\n,\n      \n{% if assigns.empty? %}\n        {} of String => String\n      {% else %}\n        {{ assigns }}\n      {% end %}\n\n    )\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","path":"Lucky/RenderableError.html","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/renderable_error.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable_error.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Avram/InvalidOperationError","kind":"class","full_name":"Avram::InvalidOperationError","name":"InvalidOperationError"},{"html_id":"github.com/luckyframework/lucky/Lucky/InvalidParamError","kind":"class","full_name":"Lucky::InvalidParamError","name":"InvalidParamError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingNestedParamError","kind":"class","full_name":"Lucky::MissingNestedParamError","name":"MissingNestedParamError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MissingParamError","kind":"class","full_name":"Lucky::MissingParamError","name":"MissingParamError"},{"html_id":"github.com/luckyframework/lucky/Lucky/NotAcceptableError","kind":"class","full_name":"Lucky::NotAcceptableError","name":"NotAcceptableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/ParamParsingError","kind":"class","full_name":"Lucky::ParamParsingError","name":"ParamParsingError"},{"html_id":"github.com/luckyframework/lucky/Lucky/UnknownAcceptHeaderError","kind":"class","full_name":"Lucky::UnknownAcceptHeaderError","name":"UnknownAcceptHeaderError"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"renderable_message:String-instance-method","html_id":"renderable_message:String-instance-method","name":"renderable_message","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable_error.cr#L3","def":{"name":"renderable_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":""}},{"id":"renderable_status:Int32-instance-method","html_id":"renderable_status:Int32-instance-method","name":"renderable_status","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/renderable_error.cr#L2","def":{"name":"renderable_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/RenderIfDefined","path":"Lucky/RenderIfDefined.html","kind":"module","full_name":"Lucky::RenderIfDefined","name":"RenderIfDefined","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/page_helpers/render_if_defined.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/render_if_defined.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"render_if_defined(method_name)-macro","html_id":"render_if_defined(method_name)-macro","name":"render_if_defined","doc":null,"summary":null,"abstract":false,"args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"args_string":"(method_name)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/render_if_defined.cr#L2","def":{"name":"render_if_defined","args":[{"name":"method_name","doc":null,"default_value":"","external_name":"method_name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    if self.responds_to?(:\n{{ method_name.id }}\n)\n      self.\n{{ method_name.id }}\n()\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/RequestExpectations","path":"Lucky/RequestExpectations.html","kind":"module","full_name":"Lucky::RequestExpectations","name":"RequestExpectations","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/request_expectations.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_expectations.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Expectations for writing specs for HTTP requests and responses","summary":"<p>Expectations for writing specs for HTTP requests and responses</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"send_json(status,**expected)-instance-method","html_id":"send_json(status,**expected)-instance-method","name":"send_json","doc":"Test that the HTTP response has the expected status and JSON body\n\n```\nuser = UserBox.create\n\nresponse = AppClient.new.exec(Users::Show.with(user.id))\n\nresponse.should send_json(200, name: user.name, age: user.age)\n```","summary":"<p>Test that the HTTP response has the expected status and JSON body</p>","abstract":false,"args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":""}],"args_string":"(status, **expected)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_expectations.cr#L12","def":{"name":"send_json","args":[{"name":"status","doc":null,"default_value":"","external_name":"status","restriction":""}],"double_splat":{"name":"expected","doc":null,"default_value":"","external_name":"expected","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"SendJsonExpectation.new(status, expected.to_json)"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/RequestTypeHelpers","path":"Lucky/RequestTypeHelpers.html","kind":"module","full_name":"Lucky::RequestTypeHelpers","name":"RequestTypeHelpers","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Memoizable","kind":"module","full_name":"Lucky::Memoizable","name":"Memoizable"}],"locations":[{"filename":"lucky/request_type_helpers.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/Memoizable","kind":"module","full_name":"Lucky::Memoizable","name":"Memoizable"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"These helpers check HTTP headers to determine \"request MIME type\".\n\nGenerally the `Accept` header is checked, but some check other headers, such as `X-Requested-With`.","summary":"<p>These helpers check HTTP headers to determine \"request MIME type\".</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"accepts?(format:Symbol):Bool-instance-method","html_id":"accepts?(format:Symbol):Bool-instance-method","name":"accepts?","doc":"Check whether the request wants the passed in format","summary":"<p>Check whether the request wants the passed in format</p>","abstract":false,"args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Symbol"}],"args_string":"(format : Symbol) : Bool","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr#L53","def":{"name":"accepts?","args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"clients_desired_format == format"}},{"id":"ajax?:Bool-instance-method","html_id":"ajax?:Bool-instance-method","name":"ajax?","doc":"Check if the request is AJAX\n\nThis tests if the `X-Requested-With` header is `XMLHttpRequest`","summary":"<p>Check if the request is AJAX</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr#L67","def":{"name":"ajax?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"accepts?(:ajax)"}},{"id":"html?:Bool-instance-method","html_id":"html?:Bool-instance-method","name":"html?","doc":"Check if the request is HTML\n\nBrowsers typically send vague Accept headers. Because of that this will return `true` when:\n\n * The `accepted_formats` includes `:html`\n * And the `Accept` header is the browser default. For example `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","summary":"<p>Check if the request is HTML</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr#L77","def":{"name":"html?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"accepts?(:html)"}},{"id":"json?:Bool-instance-method","html_id":"json?:Bool-instance-method","name":"json?","doc":"Check if the request is JSON\n\nThis tests if the request type is `application/json`","summary":"<p>Check if the request is JSON</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr#L60","def":{"name":"json?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"accepts?(:json)"}},{"id":"plain_text?:Bool-instance-method","html_id":"plain_text?:Bool-instance-method","name":"plain_text?","doc":"Check if the request is plain text\n\nThis tests if the `Accept` header type is `text/plain` or\nwith the optional character set per W3 RFC1341 7.1","summary":"<p>Check if the request is plain text</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr#L92","def":{"name":"plain_text?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"accepts?(:plain_text)"}},{"id":"xml?:Bool-instance-method","html_id":"xml?:Bool-instance-method","name":"xml?","doc":"Check if the request is XML\n\nThis tests if the request type is `application/xml`","summary":"<p>Check if the request is XML</p>","abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr#L84","def":{"name":"xml?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"accepts?(:xml)"}}],"macros":[{"id":"default_format(format)-macro","html_id":"default_format(format)-macro","name":"default_format","doc":"If Lucky doesn't find a format then default to the given format\n\n```\ndefault_format :html\n```","summary":"<p>If Lucky doesn't find a format then default to the given format</p>","abstract":false,"args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":""}],"args_string":"(format)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/request_type_helpers.cr#L33","def":{"name":"default_format","args":[{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if format.is_a?(SymbolLiteral) %}{% else %}\n      {% raise(\"The default format in #{@type} must be a Symbol. Instead got #{format}\") %}\n    {% end %}\n\n\n    private def default_format : Symbol\n      \n{{ format }}\n\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Response","path":"Lucky/Response.html","kind":"class","full_name":"Lucky::Response","name":"Response","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/response.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/response.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/luckyframework/lucky/Lucky/FileResponse","kind":"class","full_name":"Lucky::FileResponse","name":"FileResponse"},{"html_id":"github.com/luckyframework/lucky/Lucky/TextResponse","kind":"class","full_name":"Lucky::TextResponse","name":"TextResponse"}],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"print-instance-method","html_id":"print-instance-method","name":"print","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/response.cr#L2","def":{"name":"print","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"status:Int-instance-method","html_id":"status:Int-instance-method","name":"status","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Int","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/response.cr#L3","def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Routable","path":"Lucky/Routable.html","kind":"module","full_name":"Lucky::Routable","name":"Routable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/routable.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Methods for routing HTTP requests and their parameters to actions.","summary":"<p>Methods for routing HTTP requests and their parameters to actions.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"delete(path)-macro","html_id":"delete(path)-macro","name":"delete","doc":"Define a route that responds to a DELETE request\n\nUse these methods if you need a custom path or are using a non-restful\nroute. For example:\n\n```\nclass Profile::ImageUpload\n  delete \"/profile/image/:id\" do\n    # action code here\n  end\nend\n```\n\nwill respond to an `HTTP DELETE` request.\n\n**See also** our guides for more information and examples:\n* [Routing](https://luckyframework.org/guides/actions-and-routing/#routing)","summary":"<p>Define a route that responds to a DELETE request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L8","def":{"name":"delete","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      match(:delete, \n{{ path }}\n) do\n        \n{{ yield }}\n\n      \nend\n    \n"}},{"id":"fallback-macro","html_id":"fallback-macro","name":"fallback","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L3","def":{"name":"fallback","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    Lucky::RouteNotFoundHandler.fallback_action = \n{{ @type.name.id }}\n\n    setup_call_method(\n{{ yield }}\n)\n  \n"}},{"id":"get(path)-macro","html_id":"get(path)-macro","name":"get","doc":"Define a route that responds to a GET request\n\nUse these methods if you need a custom path or are using a non-restful\nroute. For example:\n\n```\nclass Profile::ImageUpload\n  get \"/profile/image/:id\" do\n    # action code here\n  end\nend\n```\n\nwill respond to an `HTTP GET` request.\n\n**See also** our guides for more information and examples:\n* [Routing](https://luckyframework.org/guides/actions-and-routing/#routing)","summary":"<p>Define a route that responds to a GET request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L8","def":{"name":"get","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      match(:get, \n{{ path }}\n) do\n        \n{{ yield }}\n\n      \nend\n    \n"}},{"id":"match(method,path)-macro","html_id":"match(method,path)-macro","name":"match","doc":"Define a route with a custom HTTP method.\n\nUse this method if you need to match a route with a custom HTTP method (verb).\nFor example:\n\n```\nclass Profile::Show\n  match :options, \"/profile\" do\n    # action code here\n  end\nend\n\nWill respond to an `HTTP OPTIONS` request.","summary":"<p>Define a route with a custom HTTP method.</p>","abstract":false,"args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":""},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(method, path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L46","def":{"name":"match","args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":""},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if path.starts_with?(\"/\") %}{% else %}\n      {% path.raise(\"Path must start with a slash. Example: '/#{path}'\") %}\n    {% end %}\n\n\n    \n{% if method == method.downcase %}{% else %}\n      {% method.raise(\"HTTP methods should be lower-case symbols. Use #{method.downcase} instead of #{method}.\") %}\n    {% end %}\n\n\n    add_route(\n{{ method }}\n, \n{{ path }}\n, \n{{ @type.name.id }}\n)\n\n    setup_call_method(\n{{ yield }}\n)\n  \n"}},{"id":"nested_route-macro","html_id":"nested_route-macro","name":"nested_route","doc":"Define a nested route that responds to the appropriate HTTP request\nautomatically\n\nThis works similarly to `route` but it will provide multiple parameters.\nFor example:\n\n```\nclass Posts::Comments::Show\n  nested_route do\n    plain_text \"Post: #{post_id}, Comment: #{comment_id}\"\n  end\nend\n```\n\nThis action responds to the `/posts/:post_id/comments/:comment_id` path.","summary":"<p>Define a nested route that responds to the appropriate HTTP request automatically</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L99","def":{"name":"nested_route","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    infer_nested_route\n\n    setup_call_method(\n{{ yield }}\n)\n  \n"}},{"id":"param(type_declaration)-macro","html_id":"param(type_declaration)-macro","name":"param","doc":"Access query and POST parameters\n\nWhen a query parameter or POST data is passed to an action, it is stored in\nthe params object. But accessing the param directly from the params object\nisn't type safe. Enter `param`. It checks the given param's type and makes\nit easily available inside the action.\n\n```\nclass Posts::Index < BrowserAction\n  param page : Int32?\n\n  route do\n    plain_text \"Posts - Page #{page || 1}\"\n  end\nend\n```\n\nTo generate a link with a param, use the `with` method:\n`Posts::Index.with(10).path` which will generate `/posts?page=10`. Visiting\nthat path would render the above action like this:\n\n```text\nPosts - Page 10\n```\n\nThis works behind the scenes by creating a `page` method in the action to\naccess the parameter.\n\n**Note:** Params can also have a default, but then their routes will not\ninclude the parameter in the query string. Using the `with(10)` method for a\nparam like this:\n`param page : Int32 = 1` will only generate `/posts`.\n\nThese parameters are also typed. The path `/posts?page=ten` will raise a\n`Lucky::InvalidParamError` error because `ten` is a String not an\nInt32.\n\nAdditionally, if the param is non-optional it will raise the\n`Lucky::MissingParamError` error if the required param is absent\nwhen making a request:\n\n```\nclass UserConfirmations::New\n  param token : String # this param is required!\n\n  route do\n    # confirm the user with their `token`\n  end\nend\n```\n\nWhen visiting this page, the path _must_ contain the token parameter:\n`/user_confirmations?token=abc123`","summary":"<p>Access query and POST parameters</p>","abstract":false,"args":[{"name":"type_declaration","doc":null,"default_value":"","external_name":"type_declaration","restriction":""}],"args_string":"(type_declaration)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L346","def":{"name":"param","args":[{"name":"type_declaration","doc":null,"default_value":"","external_name":"type_declaration","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% PARAM_DECLARATIONS << type_declaration %}\n\n\n    def \n{{ type_declaration.var }}\n : \n{{ type_declaration.type }}\n\n      \n{% is_nilable_type = type_declaration.type.is_a?(Union) %}\n\n      \n{% type = is_nilable_type ? type_declaration.type.types.first : type_declaration.type %}\n\n\n      val = params.get?(:\n{{ type_declaration.var.id }}\n)\n\n      if val.nil?\n        default_or_nil = \n{{ type_declaration.value || nil }}\n\n        \n{% if is_nilable_type %}\n          return default_or_nil\n        {% else %}\n          return default_or_nil ||\n            raise Lucky::MissingParamError.new(\"{{ type_declaration.var.id }}\")\n        {% end %}\n\n      \nend\n\n      result = \n{{ type }}\n::Lucky.parse(val)\n\n      if result.is_a? \n{{ type }}\n::Lucky::SuccessfulCast\n        result.value\n      \nelse\n        raise Lucky::InvalidParamError.new(\n          param_name: \"\n{{ type_declaration.var.id }}\n\",\n          param_value: val.to_s,\n          param_type: \"\n{{ type }}\n\"\n        )\n      \nend\n    \nend\n  \n"}},{"id":"patch(path)-macro","html_id":"patch(path)-macro","name":"patch","doc":"Define a route that responds to a PATCH request\n\nUse these methods if you need a custom path or are using a non-restful\nroute. For example:\n\n```\nclass Profile::ImageUpload\n  patch \"/profile/image/:id\" do\n    # action code here\n  end\nend\n```\n\nwill respond to an `HTTP PATCH` request.\n\n**See also** our guides for more information and examples:\n* [Routing](https://luckyframework.org/guides/actions-and-routing/#routing)","summary":"<p>Define a route that responds to a PATCH request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L8","def":{"name":"patch","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      match(:patch, \n{{ path }}\n) do\n        \n{{ yield }}\n\n      \nend\n    \n"}},{"id":"post(path)-macro","html_id":"post(path)-macro","name":"post","doc":"Define a route that responds to a POST request\n\nUse these methods if you need a custom path or are using a non-restful\nroute. For example:\n\n```\nclass Profile::ImageUpload\n  post \"/profile/image/:id\" do\n    # action code here\n  end\nend\n```\n\nwill respond to an `HTTP POST` request.\n\n**See also** our guides for more information and examples:\n* [Routing](https://luckyframework.org/guides/actions-and-routing/#routing)","summary":"<p>Define a route that responds to a POST request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L8","def":{"name":"post","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      match(:post, \n{{ path }}\n) do\n        \n{{ yield }}\n\n      \nend\n    \n"}},{"id":"put(path)-macro","html_id":"put(path)-macro","name":"put","doc":"Define a route that responds to a PUT request\n\nUse these methods if you need a custom path or are using a non-restful\nroute. For example:\n\n```\nclass Profile::ImageUpload\n  put \"/profile/image/:id\" do\n    # action code here\n  end\nend\n```\n\nwill respond to an `HTTP PUT` request.\n\n**See also** our guides for more information and examples:\n* [Routing](https://luckyframework.org/guides/actions-and-routing/#routing)","summary":"<p>Define a route that responds to a PUT request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L8","def":{"name":"put","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      match(:put, \n{{ path }}\n) do\n        \n{{ yield }}\n\n      \nend\n    \n"}},{"id":"route-macro","html_id":"route-macro","name":"route","doc":"Define a route that responds to the appropriate HTTP request automatically\n\n```\nclass Posts::Show\n  route do\n    plain_text \"Post: #{post_id}\"\n  end\nend\n```\n\nThis action responds to the `/posts/:post_id` path.\n\nEach route needs a few pieces of information to be created:\n\n* The HTTP method, like `GET`, `POST`, `DELETE`, etc.\n* The path, such as `/users/:user_id`\n* The class to route to, like `Users::Show`\n\nThe `route` method will try to determine these pieces of information based\nthe class name. After it knows the class, Lucky will transform the full\nclass name to figure out the path, i.e. removing the `::` separators and\nadding underscores. The method is found via the last part of the class name:\n\n* `Index` -> `GET`\n* `Show` -> `GET`\n* `New` -> `GET`\n* `Create` -> `POST`\n* `Edit` -> `GET`\n* `Update` -> `PUT`\n* `Delete` -> `DELETE`\n\nIf you are using a non-restful action name you should use the `get`, `put`,\n`post`, or `delete` methods. Otherwise you will see an error like this:\n\n```text\nCould not infer route for User::ImageUploads\n```\n\n**See also** our guides for more information and examples:\n* [Automatically Generate RESTful Routes](https://luckyframework.org/guides/actions-and-routing/#automatically-generate-restful-routes)\n* [Examples of automatically generated routes](https://luckyframework.org/guides/actions-and-routing/#examples-of-automatically-generated-routes)","summary":"<p>Define a route that responds to the appropriate HTTP request automatically</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L146","def":{"name":"route","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    infer_route\n\n    setup_call_method(\n{{ yield }}\n)\n  \n"}},{"id":"trace(path)-macro","html_id":"trace(path)-macro","name":"trace","doc":"Define a route that responds to a TRACE request\n\nUse these methods if you need a custom path or are using a non-restful\nroute. For example:\n\n```\nclass Profile::ImageUpload\n  trace \"/profile/image/:id\" do\n    # action code here\n  end\nend\n```\n\nwill respond to an `HTTP TRACE` request.\n\n**See also** our guides for more information and examples:\n* [Routing](https://luckyframework.org/guides/actions-and-routing/#routing)","summary":"<p>Define a route that responds to a TRACE request</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"args_string":"(path)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/routable.cr#L8","def":{"name":"trace","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      match(:trace, \n{{ path }}\n) do\n        \n{{ yield }}\n\n      \nend\n    \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Route","path":"Lucky/Route.html","kind":"class","full_name":"Lucky::Route","name":"Route","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/route.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(method:Symbol,path:String,action:Lucky::Action.class)-class-method","html_id":"new(method:Symbol,path:String,action:Lucky::Action.class)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"Symbol"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Lucky::Action.class"}],"args_string":"(method : Symbol, path : String, action : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route.cr#L4","def":{"name":"new","args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"Symbol"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"},{"name":"action","doc":null,"default_value":"","external_name":"action","restriction":"Lucky::Action.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(method, path, action)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route.cr#L7","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @method == (other.@method)\nelse\n  return false\nend\nif @path == (other.@path)\nelse\n  return false\nend\nif @action == (other.@action)\nelse\n  return false\nend\ntrue\n"}},{"id":"action:Lucky::Action.class-instance-method","html_id":"action:Lucky::Action.class-instance-method","name":"action","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Lucky::Action.class","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route.cr#L2","def":{"name":"action","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@action"}},{"id":"method:Symbol-instance-method","html_id":"method:Symbol-instance-method","name":"method","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route.cr#L2","def":{"name":"method","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@method"}},{"id":"path:String-instance-method","html_id":"path:String-instance-method","name":"path","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route.cr#L2","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@path"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/RouteHandler","path":"Lucky/RouteHandler.html","kind":"class","full_name":"Lucky::RouteHandler","name":"RouteHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/route_handler.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_handler.cr#L6","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"handler = Lucky::Router.find_action(context.request)\nif handler\n  Lucky.logger.debug({handled_by: handler.payload.to_s})\n  (handler.payload.new(context, handler.params)).perform_action\nelse\n  call_next(context)\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/RouteHelper","path":"Lucky/RouteHelper.html","kind":"class","full_name":"Lucky::RouteHelper","name":"RouteHelper","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/route_helper.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: base_uri : String, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L4","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L4","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[{"id":"new(method:Symbol,path:String)-class-method","html_id":"new(method:Symbol,path:String)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"Symbol"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"args_string":"(method : Symbol, path : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L8","def":{"name":"new","args":[{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"Symbol"},{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(method, path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L15","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @method == (other.@method)\nelse\n  return false\nend\nif @path == (other.@path)\nelse\n  return false\nend\ntrue\n"}},{"id":"method:Symbol-instance-method","html_id":"method:Symbol-instance-method","name":"method","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L2","def":{"name":"method","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@method"}},{"id":"path:String-instance-method","html_id":"path:String-instance-method","name":"path","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L2","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@path"}},{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L4","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}},{"id":"url:String-instance-method","html_id":"url:String-instance-method","name":"url","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr#L11","def":{"name":"url","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"settings.base_uri + path"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/RouteHelper/Settings","path":"Lucky/RouteHelper/Settings.html","kind":"class","full_name":"Lucky::RouteHelper::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/route_helper.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_helper.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/RouteHelper","kind":"class","full_name":"Lucky::RouteHelper","name":"RouteHelper"},"doc":null,"summary":null,"class_methods":[{"id":"base_uri-class-method","html_id":"base_uri-class-method","name":"base_uri","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"base_uri","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@base_uri.not_nil!"}},{"id":"base_uri=(value:String)-class-method","html_id":"base_uri=(value:String)-class-method","name":"base_uri=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","source_link":null,"def":{"name":"base_uri=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@base_uri = value"}},{"id":"base_uri?-class-method","html_id":"base_uri?-class-method","name":"base_uri?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"base_uri?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@base_uri"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/RouteNotFoundError","path":"Lucky/RouteNotFoundError.html","kind":"class","full_name":"Lucky::RouteNotFoundError","name":"RouteNotFoundError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":9,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Raised when a route could not be found","summary":"<p>Raised when a route could not be found</p>","class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context)-class-method","html_id":"new(context:HTTP::Server::Context)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L12","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"context:HTTP::Server::Context-instance-method","html_id":"context:HTTP::Server::Context-instance-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Server::Context","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L10","def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@context"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/RouteNotFoundHandler","path":"Lucky/RouteNotFoundHandler.html","kind":"class","full_name":"Lucky::RouteNotFoundHandler","name":"RouteNotFoundHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/route_not_found_handler.cr","line_number":8,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_not_found_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"This HTTP::Handler takes in the current `context`,\nthen checks to see if a `fallback_action` has been defined to render that action first.\nIf no fallback has been defined, then it will raise a `Lucky::RouteNotFoundError` exception.\n\nThis handler should be used after the `Lucky::RouteHandler`.\n\nSee `Lucky::Routable.fallback` for implementing the `fallback_action`.","summary":"<p>This HTTP::Handler takes in the current <code>context</code>, then checks to see if a <code><a href=\"../Lucky/RouteNotFoundHandler.html#fallback_action:Lucky::Action.class?-class-method\">.fallback_action</a></code> has been defined to render that action first.</p>","class_methods":[{"id":"fallback_action:Lucky::Action.class?-class-method","html_id":"fallback_action:Lucky::Action.class?-class-method","name":"fallback_action","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_not_found_handler.cr#L10","def":{"name":"fallback_action","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::Action.class | Nil","visibility":"Public","body":"@@fallback_action"}},{"id":"fallback_action=(fallback_action:Lucky::Action.class?)-class-method","html_id":"fallback_action=(fallback_action:Lucky::Action.class?)-class-method","name":"fallback_action=","doc":null,"summary":null,"abstract":false,"args":[{"name":"fallback_action","doc":null,"default_value":"","external_name":"fallback_action","restriction":"Lucky::Action.class | Nil"}],"args_string":"(fallback_action : <span class=\"t\">Lucky</span><span class=\"t\">::</span><span class=\"t\">Action</span>.<span class=\"k\">class</span>?)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_not_found_handler.cr#L10","def":{"name":"fallback_action=","args":[{"name":"fallback_action","doc":null,"default_value":"","external_name":"fallback_action","restriction":"Lucky::Action.class | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@fallback_action = fallback_action"}}],"constructors":[],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/route_not_found_handler.cr#L12","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if has_fallback?(context)\n  Lucky.logger.debug(handled_by_fallback: fallback_action.name.to_s)\n  (fallback_action.new(context, {} of String => String)).perform_action\nelse\n  raise(Lucky::RouteNotFoundError.new(context))\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/SecureHeaders","path":"Lucky/SecureHeaders.html","kind":"module","full_name":"Lucky::SecureHeaders","name":"SecureHeaders","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/secure_headers/set_frame_guard.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_frame_guard.cr"},{"filename":"lucky/secure_headers/set_sniff_guard.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_sniff_guard.cr"},{"filename":"lucky/secure_headers/set_xss_guard.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_xss_guard.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/SecureHeaders/SetFrameGuard","path":"Lucky/SecureHeaders/SetFrameGuard.html","kind":"module","full_name":"Lucky::SecureHeaders::SetFrameGuard","name":"SetFrameGuard","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/secure_headers/set_frame_guard.cr","line_number":25,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_frame_guard.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/SecureHeaders","kind":"module","full_name":"Lucky::SecureHeaders","name":"SecureHeaders"},"doc":"This module sets the HTTP header [X-Frame-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options).\nIt's job is responsible for deciding which site can call your site from within a frame.\nFor more information, read up on [Clickjacking](https://en.wikipedia.org/wiki/Clickjacking).\n\nInclude this module in the actions you want to add this to.\nA required method `frame_guard_value` must be defined`\n```\nclass BrowserAction < Lucky::Action\n  include Lucky::SecureHeaders::SetFrameGuard\n\n  def frame_guard_value : String\n    \"deny\"\n  end\nend\n```\n\n### Options\nThe `frame_guard_value` method must be defined and return a `String`\nIt can have one of 3 String values:\n- `\"sameorigin\"`\n- `\"deny\"`\n- a valid URL e.g. `\"https://mysite.com\"`","summary":"<p>This module sets the HTTP header <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\" target=\"_blank\">X-Frame-Options</a>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"frame_guard_value:String-instance-method","html_id":"frame_guard_value:String-instance-method","name":"frame_guard_value","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_frame_guard.cr#L30","def":{"name":"frame_guard_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/SecureHeaders/SetSniffGuard","path":"Lucky/SecureHeaders/SetSniffGuard.html","kind":"module","full_name":"Lucky::SecureHeaders::SetSniffGuard","name":"SetSniffGuard","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/secure_headers/set_sniff_guard.cr","line_number":13,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_sniff_guard.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/SecureHeaders","kind":"module","full_name":"Lucky::SecureHeaders","name":"SecureHeaders"},"doc":"This module sets the HTTP header [X-Content-Type-Options](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options).\nIt's job is responsible for disabling mime type sniffing.\nFor more information, read up on [MIME type security](https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/compatibility/gg622941(v=vs.85)).\n\nInclude this module in the actions you want to add this to.\n```\nclass BrowserAction < Lucky::Action\n  include Lucky::SecureHeaders::SetSniffGuard\nend\n```","summary":"<p>This module sets the HTTP header <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options\" target=\"_blank\">X-Content-Type-Options</a>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/SecureHeaders/SetXSSGuard","path":"Lucky/SecureHeaders/SetXSSGuard.html","kind":"module","full_name":"Lucky::SecureHeaders::SetXSSGuard","name":"SetXSSGuard","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/secure_headers/set_xss_guard.cr","line_number":17,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/secure_headers/set_xss_guard.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/SecureHeaders","kind":"module","full_name":"Lucky::SecureHeaders","name":"SecureHeaders"},"doc":"```\nclass BrowserAction < Lucky::Action\n  include Lucky::SecureHeaders::SetXSSGuard\nend\n```","summary":"<p><code></code>` class BrowserAction &lt; Lucky::Action   include Lucky::SecureHeaders::SetXSSGuard end <code></code>`</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/SelectHelpers","path":"Lucky/SelectHelpers.html","kind":"module","full_name":"Lucky::SelectHelpers","name":"SelectHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/select_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/select_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"options_for_select(field:Avram::PermittedAttribute,select_options:Array(Tuple(String,SelectOption)),**html_options)-instance-method","html_id":"options_for_select(field:Avram::PermittedAttribute,select_options:Array(Tuple(String,SelectOption)),**html_options)-instance-method","name":"options_for_select","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"select_options","doc":null,"default_value":"","external_name":"select_options","restriction":"Array(Tuple(String, SelectOption))"}],"args_string":"(field : Avram::PermittedAttribute, select_options : Array(Tuple(String, SelectOption)), **html_options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/select_helpers.cr#L10","def":{"name":"options_for_select","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"},{"name":"select_options","doc":null,"default_value":"","external_name":"select_options","restriction":"Array(Tuple(String, SelectOption))"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"select_options.each do |option_name, option_value|\n  attributes = {\"value\" => option_value.to_s}\n  is_selected = option_value.to_s == field.param.to_s\n  if is_selected\n    attributes[\"selected\"] = \"true\"\n  end\n  option(option_name, merge_options(html_options, attributes))\nend"}},{"id":"select_input(field:Avram::PermittedAttribute,**html_options,&)-instance-method","html_id":"select_input(field:Avram::PermittedAttribute,**html_options,&amp;)-instance-method","name":"select_input","doc":null,"summary":null,"abstract":false,"args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"args_string":"(field : Avram::PermittedAttribute, **html_options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/select_helpers.cr#L4","def":{"name":"select_input","args":[{"name":"field","doc":null,"default_value":"","external_name":"field","restriction":"Avram::PermittedAttribute"}],"double_splat":{"name":"html_options","doc":null,"default_value":"","external_name":"html_options","restriction":""},"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"select_tag(merge_options(html_options, {\"name\" => input_name(field)})) do\n  yield\nend"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/SelectHelpers/SelectOption","path":"Lucky/SelectHelpers/SelectOption.html","kind":"alias","full_name":"Lucky::SelectHelpers::SelectOption","name":"SelectOption","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/select_helpers.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/select_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":true,"aliased":"(Int32 | Int64 | String)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/SelectHelpers","kind":"module","full_name":"Lucky::SelectHelpers","name":"SelectHelpers"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/Serializer","path":"Lucky/Serializer.html","kind":"class","full_name":"Lucky::Serializer","name":"Serializer","abstract":true,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/serializer.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/serializer.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"to_json(io)-instance-method","html_id":"to_json(io)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/serializer.cr#L2","def":{"name":"to_json","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"render.to_json(io)"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Server","path":"Lucky/Server.html","kind":"class","full_name":"Lucky::Server","name":"Server","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/server.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: secret_key_base : String, example: nil}, {decl: host : String, example: nil}, {decl: port : Int32, example: nil}, {decl: asset_host : String = \"\", example: nil}, {decl: gzip_enabled : Bool = false, example: nil}, {decl: gzip_content_types : Array(String) = [\"application/json\", \"application/javascript\", \"application/xml\", \"font/otf\", \"font/ttf\", \"font/woff\", \"font/woff2\", \"image/svg+xml\", \"text/css\", \"text/csv\", \"text/html\", \"text/javascript\", \"text/plain\"] of ::String, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Class for configuring server settings\n\nThe settings created here can be customized in each Lucky app by modifying them in your config/server.cr","summary":"<p>Class for configuring server settings</p>","class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server.cr#L5","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server.cr#L5","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server.cr#L5","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Server/Settings","path":"Lucky/Server/Settings.html","kind":"class","full_name":"Lucky::Server::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/server.cr","line_number":5,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/Server","kind":"class","full_name":"Lucky::Server","name":"Server"},"doc":null,"summary":null,"class_methods":[{"id":"asset_host-class-method","html_id":"asset_host-class-method","name":"asset_host","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"asset_host","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@asset_host.not_nil!"}},{"id":"asset_host=(value:String)-class-method","html_id":"asset_host=(value:String)-class-method","name":"asset_host=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","source_link":null,"def":{"name":"asset_host=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@asset_host = value"}},{"id":"asset_host?-class-method","html_id":"asset_host?-class-method","name":"asset_host?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"asset_host?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@asset_host"}},{"id":"gzip_content_types-class-method","html_id":"gzip_content_types-class-method","name":"gzip_content_types","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"gzip_content_types","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@gzip_content_types.not_nil!"}},{"id":"gzip_content_types=(value:Array(String))-class-method","html_id":"gzip_content_types=(value:Array(String))-class-method","name":"gzip_content_types=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array(String)"}],"args_string":"(value : Array(String))","source_link":null,"def":{"name":"gzip_content_types=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@gzip_content_types = value"}},{"id":"gzip_content_types?-class-method","html_id":"gzip_content_types?-class-method","name":"gzip_content_types?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"gzip_content_types?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@gzip_content_types"}},{"id":"gzip_enabled-class-method","html_id":"gzip_enabled-class-method","name":"gzip_enabled","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"gzip_enabled","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@gzip_enabled.not_nil!"}},{"id":"gzip_enabled=(value:Bool)-class-method","html_id":"gzip_enabled=(value:Bool)-class-method","name":"gzip_enabled=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"args_string":"(value : Bool)","source_link":null,"def":{"name":"gzip_enabled=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@gzip_enabled = value"}},{"id":"gzip_enabled?-class-method","html_id":"gzip_enabled?-class-method","name":"gzip_enabled?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"gzip_enabled?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@gzip_enabled"}},{"id":"host-class-method","html_id":"host-class-method","name":"host","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"host","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@host.not_nil!"}},{"id":"host=(value:String)-class-method","html_id":"host=(value:String)-class-method","name":"host=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","source_link":null,"def":{"name":"host=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@host = value"}},{"id":"host?-class-method","html_id":"host?-class-method","name":"host?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"host?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@host"}},{"id":"port-class-method","html_id":"port-class-method","name":"port","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@port.not_nil!"}},{"id":"port=(value:Int32)-class-method","html_id":"port=(value:Int32)-class-method","name":"port=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"args_string":"(value : Int32)","source_link":null,"def":{"name":"port=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@port = value"}},{"id":"port?-class-method","html_id":"port?-class-method","name":"port?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"port?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@port"}},{"id":"secret_key_base-class-method","html_id":"secret_key_base-class-method","name":"secret_key_base","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"secret_key_base","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@secret_key_base.not_nil!"}},{"id":"secret_key_base=(value:String)-class-method","html_id":"secret_key_base=(value:String)-class-method","name":"secret_key_base=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","source_link":null,"def":{"name":"secret_key_base=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@secret_key_base = value"}},{"id":"secret_key_base?-class-method","html_id":"secret_key_base?-class-method","name":"secret_key_base?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"secret_key_base?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@secret_key_base"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/ServerSettings","path":"Lucky/ServerSettings.html","kind":"module","full_name":"Lucky::ServerSettings","name":"ServerSettings","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/server_settings.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server_settings.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"YAML_SETTINGS_PATH","name":"YAML_SETTINGS_PATH","value":"\"./config/watch.yml\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/ServerSettings","kind":"module","full_name":"Lucky::ServerSettings","name":"ServerSettings"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"host:String-instance-method","html_id":"host:String-instance-method","name":"host","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server_settings.cr#L8","def":{"name":"host","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"settings[\"host\"].as_s"}},{"id":"port:Int32-instance-method","html_id":"port:Int32-instance-method","name":"port","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/server_settings.cr#L12","def":{"name":"port","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"ENV[\"PORT\"]?.try(&.to_i) || settings[\"port\"].as_i"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Session","path":"Lucky/Session.html","kind":"class","full_name":"Lucky::Session","name":"Session","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/cookies/session.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"HABITAT_SETTINGS","name":"HABITAT_SETTINGS","value":"[{decl: key : String, example: nil}] of Nil","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(&)-class-method","html_id":"configure(&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L7","def":{"name":"configure","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield settings"}},{"id":"from_cookie_jar(cookie_jar:Lucky::CookieJar):Lucky::Session-class-method","html_id":"from_cookie_jar(cookie_jar:Lucky::CookieJar):Lucky::Session-class-method","name":"from_cookie_jar","doc":null,"summary":null,"abstract":false,"args":[{"name":"cookie_jar","doc":null,"default_value":"","external_name":"cookie_jar","restriction":"Lucky::CookieJar"}],"args_string":"(cookie_jar : Lucky::CookieJar) : Lucky::Session","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L11","def":{"name":"from_cookie_jar","args":[{"name":"cookie_jar","doc":null,"default_value":"","external_name":"cookie_jar","restriction":"Lucky::CookieJar"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lucky::Session","visibility":"Public","body":"new.tap do |session|\n  (cookie_jar.get?(settings.key)).try do |contents|\n    (JSON.parse(contents)).as_h.each do |key, value|\n      session.set(key, value.as_s)\n    end\n  end\nend"}},{"id":"settings-class-method","html_id":"settings-class-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L7","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}}],"constructors":[],"instance_methods":[{"id":"clear(*args,**options)-instance-method","html_id":"clear(*args,**options)-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L5","def":{"name":"clear","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"store.clear(*args, **options)"}},{"id":"clear(*args,**options,&)-instance-method","html_id":"clear(*args,**options,&amp;)-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L5","def":{"name":"clear","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"store.clear(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"delete(key:Key):String?-instance-method","html_id":"delete(key:Key):String?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L33","def":{"name":"delete","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"store.delete(key.to_s)"}},{"id":"destroy-instance-method","html_id":"destroy-instance-method","name":"destroy","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L21","def":{"name":"destroy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(\"CookieJar#destroy has been renamed to CookieJar#clear to match Hash#clear\") %}"}},{"id":"get(key:Key):String-instance-method","html_id":"get(key:Key):String-instance-method","name":"get","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L41","def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"(get?(key)) || (raise(\"No key for '#{key}' in session\"))"}},{"id":"get?(key:Key):String?-instance-method","html_id":"get?(key:Key):String?-instance-method","name":"get?","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"args_string":"(key : Key) : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L45","def":{"name":"get?","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"store[key.to_s]?"}},{"id":"reset-instance-method","html_id":"reset-instance-method","name":"reset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L25","def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(\"use Session#clear to reset the session\") %}"}},{"id":"set(key:Key,value:String):String-instance-method","html_id":"set(key:Key,value:String):String-instance-method","name":"set","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(key : Key, value : String) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L37","def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"Key"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"store[key.to_s] = value"}},{"id":"settings-instance-method","html_id":"settings-instance-method","name":"settings","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L7","def":{"name":"settings","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Settings"}},{"id":"to_json(*args,**options)-instance-method","html_id":"to_json(*args,**options)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L5","def":{"name":"to_json","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"store.to_json(*args, **options)"}},{"id":"to_json(*args,**options,&)-instance-method","html_id":"to_json(*args,**options,&amp;)-instance-method","name":"to_json","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L5","def":{"name":"to_json","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"store.to_json(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"id":"unset(*args)-instance-method","html_id":"unset(*args)-instance-method","name":"unset","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr#L29","def":{"name":"unset","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(\"use Session#delete instead of Session#unset\") %}"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Session/Key","path":"Lucky/Session/Key.html","kind":"alias","full_name":"Lucky::Session::Key","name":"Key","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/cookies/session.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":true,"aliased":"(String | Symbol)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/Session","kind":"class","full_name":"Lucky::Session","name":"Session"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Session/Settings","path":"Lucky/Session/Settings.html","kind":"class","full_name":"Lucky::Session::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/cookies/session.cr","line_number":7,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/cookies/session.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/Session","kind":"class","full_name":"Lucky::Session","name":"Session"},"doc":null,"summary":null,"class_methods":[{"id":"key-class-method","html_id":"key-class-method","name":"key","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@key.not_nil!"}},{"id":"key=(value:String)-class-method","html_id":"key=(value:String)-class-method","name":"key=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(value : String)","source_link":null,"def":{"name":"key=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@key = value"}},{"id":"key?-class-method","html_id":"key?-class-method","name":"key?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"key?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@key"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/SessionHandler","path":"Lucky/SessionHandler.html","kind":"class","full_name":"Lucky::SessionHandler","name":"SessionHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/session_handler.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/session_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"call(context:HTTP::Server::Context)-instance-method","html_id":"call(context:HTTP::Server::Context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/session_handler.cr#L4","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"call_next(context)\nwrite_session(context)\nwrite_cookies(context)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/Settings","path":"Lucky/Settings.html","kind":"class","full_name":"Lucky::Settings","name":"Settings","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky.cr","line_number":21,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"logger-class-method","html_id":"logger-class-method","name":"logger","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger.not_nil!"}},{"id":"logger=(value:Dexter::Logger)-class-method","html_id":"logger=(value:Dexter::Logger)-class-method","name":"logger=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Dexter::Logger"}],"args_string":"(value : Dexter::Logger)","source_link":null,"def":{"name":"logger=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Dexter::Logger"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger = value"}},{"id":"logger?-class-method","html_id":"logger?-class-method","name":"logger?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"logger?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@logger"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/SpecialtyTags","path":"Lucky/SpecialtyTags.html","kind":"module","full_name":"Lucky::SpecialtyTags","name":"SpecialtyTags","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/specialty_tags.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"css_link(href,**options)-instance-method","html_id":"css_link(href,**options)-instance-method","name":"css_link","doc":"Generates a link tag for a stylesheet at the path *href*.\n\nAdditional tag attributes can be passed in keyword arguments via *options*.","summary":"<p>Generates a link tag for a stylesheet at the path <em>href</em>.</p>","abstract":false,"args":[{"name":"href","doc":null,"default_value":"","external_name":"href","restriction":""}],"args_string":"(href, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr#L10","def":{"name":"css_link","args":[{"name":"href","doc":null,"default_value":"","external_name":"href","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"options = {href: href, rel: \"stylesheet\", media: \"screen\"}.merge(options)\nempty_tag(\"link\", **options)\n"}},{"id":"html_doctype-instance-method","html_id":"html_doctype-instance-method","name":"html_doctype","doc":"Generates an HTML5 doctype tag.","summary":"<p>Generates an HTML5 doctype tag.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr#L3","def":{"name":"html_doctype","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"view << \"<!DOCTYPE html>\""}},{"id":"js_link(src,**options)-instance-method","html_id":"js_link(src,**options)-instance-method","name":"js_link","doc":"Generates a script tag for a file at path *src*.\n\nAdditional tag attributes can be passed in as keyword arguments via\n*options*.","summary":"<p>Generates a script tag for a file at path <em>src</em>.</p>","abstract":false,"args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":""}],"args_string":"(src, **options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr#L19","def":{"name":"js_link","args":[{"name":"src","doc":null,"default_value":"","external_name":"src","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"options = {src: src}.merge(options)\ntag(\"script\", **options)\n"}},{"id":"nbsp(how_many:Int32=1)-instance-method","html_id":"nbsp(how_many:Int32=1)-instance-method","name":"nbsp","doc":"Generates an escaped HTML `&nbsp;` entity for the number of times specified\nby `how_many`. By default it generates 1 non-breaking space character.\n\n```\nlink \"Home\", to: Home::Index\nspan do\n  nbsp\n  text \"|\"\n  nbsp\nend\nlink \"About\", to: About::Index\n```\nWould generate `<a href=\"/\">Home</a><span>&nbsp;|&nbsp;</span><a href=\"/about\">About</a>`","summary":"<p>Generates an escaped HTML <code>&nbsp;</code> entity for the number of times specified by <code>how_many</code>.</p>","abstract":false,"args":[{"name":"how_many","doc":null,"default_value":"1","external_name":"how_many","restriction":"Int32"}],"args_string":"(how_many : Int32 = <span class=\"n\">1</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr#L74","def":{"name":"nbsp","args":[{"name":"how_many","doc":null,"default_value":"1","external_name":"how_many","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"how_many.times do\n  raw(\"&nbsp;\")\nend\nview\n"}},{"id":"raw(string:String)-instance-method","html_id":"raw(string:String)-instance-method","name":"raw","doc":"Adds *string* directly to the rendered HTML with no escaping.\n\nFor example,\n```\nraw \"<hopefully-something-safe>\" # Renders \"<hopefully-something-safe>\"\n```\n\nFor custom elements, it's recommended to use the `tag` method.\n\nNOTE: Should **never** be used to render unescaped user-generated data, as\nthis can leave one vulnerable to [cross-site scripting\nattacks](https://en.wikipedia.org/wiki/Cross-site_scripting).","summary":"<p>Adds <em>string</em> directly to the rendered HTML with no escaping.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr#L57","def":{"name":"raw","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"view << string"}},{"id":"responsive_meta_tag(**options)-instance-method","html_id":"responsive_meta_tag(**options)-instance-method","name":"responsive_meta_tag","doc":"Generates a meta tag telling browsers to render the page as wide as the\ndevice screen/window and at an initial scale of 1.\n\nOptional keyword arguments can be used to override these defaults, as well\nas specify additional properties. Please refer to [MDN's documentation on\nthe viewport meta tag](https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag)\nfor usage details.","summary":"<p>Generates a meta tag telling browsers to render the page as wide as the device screen/window and at an initial scale of 1.</p>","abstract":false,"args":[],"args_string":"(**options)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr#L40","def":{"name":"responsive_meta_tag","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"options = {width: \"device-width\", initial_scale: \"1\"}.merge(options)\nmeta(name: \"viewport\", content: build_viewport_properties(options))\n"}},{"id":"utf8_charset-instance-method","html_id":"utf8_charset-instance-method","name":"utf8_charset","doc":"Generates a meta tag to specify the character encoding as UTF-8.\n\nIt is highly encouraged to specify the character encoding as early in a\npage's `<head>` as possible as some browsers only look at the first 1024\nbytes to determine the encoding.","summary":"<p>Generates a meta tag to specify the character encoding as UTF-8.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/specialty_tags.cr#L29","def":{"name":"utf8_charset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"meta(charset: \"utf-8\")"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/StaticCompressionHandler","path":"Lucky/StaticCompressionHandler.html","kind":"class","full_name":"Lucky::StaticCompressionHandler","name":"StaticCompressionHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/static_compression_handler.cr","line_number":15,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/static_compression_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Middleware that serves static files that have been pre-compressed.\nThere can be multiple instances and the first in the middleware stack will take precedence.\nFor example, if you want to serve brotli compressed assets for browsers that support it and\nserve gzip assets for those that don't you would do something like this in your middleware\nin `src/app_server.cr`:\n\n```\n[\n  # ...\n  Lucky::StaticCompressionHandler.new(\"./public\", file_ext: \"br\", content_encoding: \"br\"),\n  Lucky::StaticCompressionHandler.new(\"./public\", file_ext: \"gz\", content_encoding: \"gzip\"),\n  # ...\n]\n```","summary":"<p>Middleware that serves static files that have been pre-compressed.</p>","class_methods":[],"constructors":[{"id":"new(public_dir:String,file_ext=&quot;gz&quot;,content_encoding=&quot;gzip&quot;)-class-method","html_id":"new(public_dir:String,file_ext=&amp;quot;gz&amp;quot;,content_encoding=&amp;quot;gzip&amp;quot;)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"public_dir","doc":null,"default_value":"","external_name":"public_dir","restriction":"String"},{"name":"file_ext","doc":null,"default_value":"\"gz\"","external_name":"file_ext","restriction":""},{"name":"content_encoding","doc":null,"default_value":"\"gzip\"","external_name":"content_encoding","restriction":""}],"args_string":"(public_dir : String, file_ext = <span class=\"s\">&quot;gz&quot;</span>, content_encoding = <span class=\"s\">&quot;gzip&quot;</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/static_compression_handler.cr#L18","def":{"name":"new","args":[{"name":"public_dir","doc":null,"default_value":"","external_name":"public_dir","restriction":"String"},{"name":"file_ext","doc":null,"default_value":"\"gz\"","external_name":"file_ext","restriction":""},{"name":"content_encoding","doc":null,"default_value":"\"gzip\"","external_name":"content_encoding","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(public_dir, file_ext, content_encoding)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"call(context)-instance-method","html_id":"call(context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"args_string":"(context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/static_compression_handler.cr#L21","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"original_path = context.request.path.not_nil!\nrequest_path = URI.decode(original_path)\nexpanded_path = File.expand_path(request_path, \"/\")\nfile_path = File.join(@public_dir, expanded_path)\ncompressed_path = \"#{file_path}.#{@file_ext}\"\ncontent_type = MIME.from_filename(file_path, \"application/octet-stream\")\nif !(should_compress?(file_path, content_type, compressed_path, context.request.headers))\n  call_next(context)\n  return\nend\ncontext.response.headers[\"Content-Encoding\"] = @content_encoding\nlast_modified = modification_time(compressed_path)\nadd_cache_headers(context.response.headers, last_modified)\nif cache_request?(context, last_modified)\n  context.response.status = :not_modified\n  return\nend\ncontext.response.content_type = content_type\ncontext.response.content_length = File.size(compressed_path)\nFile.open(compressed_path) do |file|\n  IO.copy(file, context.response)\nend\n"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/StaticFileHandler","path":"Lucky/StaticFileHandler.html","kind":"class","full_name":"Lucky::StaticFileHandler","name":"StaticFileHandler","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/HTTP/StaticFileHandler","kind":"class","full_name":"HTTP::StaticFileHandler","name":"StaticFileHandler"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/HTTP/StaticFileHandler","kind":"class","full_name":"HTTP::StaticFileHandler","name":"StaticFileHandler"},{"html_id":"github.com/luckyframework/lucky/HTTP/Handler","kind":"module","full_name":"HTTP::Handler","name":"Handler"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"charms/static_file_handler.cr","line_number":3,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/static_file_handler.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[{"id":"configure(*args,**named_args,&)-class-method","html_id":"configure(*args,**named_args,&amp;)-class-method","name":"configure","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **named_args, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/static_file_handler.cr#L8","def":{"name":"configure","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":0,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(\"All settings were removed from Lucky::StaticFileHandler. You can remove the Lucky::StaticFileHandler.configure block.\") %}"}}],"constructors":[],"instance_methods":[{"id":"call(context:HTTP::Server::Context)-instance-method","html_id":"call(context:HTTP::Server::Context)-instance-method","name":"call","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/static_file_handler.cr#L4","def":{"name":"call","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super(context)"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/TextHelpers","path":"Lucky/TextHelpers.html","kind":"module","full_name":"Lucky::TextHelpers","name":"TextHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/page_helpers/text_helpers.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"These helper methods will return a `String`.","summary":"<p>These helper methods will return a <code><a href=\"../String.html\">String</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"current_cycle(name:String=&quot;default&quot;)-instance-method","html_id":"current_cycle(name:String=&amp;quot;default&amp;quot;)-instance-method","name":"current_cycle","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":"String"}],"args_string":"(name : String = <span class=\"s\">&quot;default&quot;</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L174","def":{"name":"current_cycle","args":[{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cycle = get_cycle(name)\nif cycle\n  cycle.current_value\nend\n"}},{"id":"cycle(values:Array,name=&quot;default&quot;):String-instance-method","html_id":"cycle(values:Array,name=&amp;quot;default&amp;quot;):String-instance-method","name":"cycle","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array"},{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":""}],"args_string":"(values : Array, name = <span class=\"s\">&quot;default&quot;</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L160","def":{"name":"cycle","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array"},{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"values = normalize_values(values)\ncycle = get_cycle(name)\nif cycle && (cycle.values == values)\nelse\n  cycle = set_cycle(name, Cycle.new(values))\nend\ncycle.to_s\n"}},{"id":"cycle(*values,name:String=&quot;default&quot;):String-instance-method","html_id":"cycle(*values,name:String=&amp;quot;default&amp;quot;):String-instance-method","name":"cycle","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":"String"}],"args_string":"(*values, name : String = <span class=\"s\">&quot;default&quot;</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L169","def":{"name":"cycle","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"values = normalize_values(values)\ncycle(values, name: name)\n"}},{"id":"excerpt(text:String,phrase:Regex|String,separator:String=&quot;&quot;,radius:Int32=100,omission:String=&quot;...&quot;):String-instance-method","html_id":"excerpt(text:String,phrase:Regex|String,separator:String=&amp;quot;&amp;quot;,radius:Int32=100,omission:String=&amp;quot;...&amp;quot;):String-instance-method","name":"excerpt","doc":"Grab a window of longer string\n\nYou'll need to specify a `phrase` to center on, either a Regex or a String.\n\nOptionally:\n* A `radius` (default: `100`) which controls how many units out from the\n`phrase` on either side the excerpt will be.\n* A `separator` (default `\"\"`) which controls what the `radius` will count.\nThe unit by default is any character, which means the default is 100\ncharacter from the `phrase` in either direction. For example, an excerpt of # 10 words would use a `radius` of 10 and a `separator` of `\" \"`.\n* An `omission` string (default: `\"...\"`), which prepends and appends to\nthe excerpt.\n\n```crystal\nlyrics = \"We represent the Lolly pop Guild, The Lolly pop Guild\"\nexcerpt(text, phrase: \"Guild\", radius: 10)\n```\noutputs:\n```html\n...Lolly pop Guild, The Loll...\n```","summary":"<p>Grab a window of longer string</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrase","doc":null,"default_value":"","external_name":"phrase","restriction":"Regex | String"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":"String"},{"name":"radius","doc":null,"default_value":"100","external_name":"radius","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"}],"args_string":"(text : String, phrase : Regex | String, separator : String = <span class=\"s\">&quot;&quot;</span>, radius : Int32 = <span class=\"n\">100</span>, omission : String = <span class=\"s\">&quot;...&quot;</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L54","def":{"name":"excerpt","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"phrase","doc":null,"default_value":"","external_name":"phrase","restriction":"Regex | String"},{"name":"separator","doc":null,"default_value":"\"\"","external_name":"separator","restriction":"String"},{"name":"radius","doc":null,"default_value":"100","external_name":"radius","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if text.nil? || text.to_s.blank?\n  return \"\"\nend\ncase phrase\nwhen Regex\n  regex = phrase\nelse\n  regex = /#{Regex.escape(phrase.to_s)}/i\nend\nif matches = text.match(regex)\nelse\n  return \"\"\nend\nphrase = matches[0]\nif separator.empty?\nelse\n  (text.split(separator)).each do |value|\n    if value.match(regex)\n      phrase = value\n      break\n    end\n  end\nend\nfirst_part, second_part = text.split(phrase, 2)\nprefix, first_part = cut_excerpt_part(:first, first_part, separator, radius, omission)\npostfix, second_part = cut_excerpt_part(:second, second_part, separator, radius, omission)\naffix = [first_part, separator, phrase, separator, second_part].join.strip\n[prefix, affix, postfix].join\n"}},{"id":"pluralize(count:Int|String|Nil,singular:String,plural=nil):String-instance-method","html_id":"pluralize(count:Int|String|Nil,singular:String,plural=nil):String-instance-method","name":"pluralize","doc":"It pluralizes `singular` unless `count` is 1. You can specify the `plural` option\nto override the chosen plural word.","summary":"<p>It pluralizes <code>singular</code> unless <code>count</code> is 1.</p>","abstract":false,"args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int | String | Nil"},{"name":"singular","doc":null,"default_value":"","external_name":"singular","restriction":"String"},{"name":"plural","doc":null,"default_value":"nil","external_name":"plural","restriction":""}],"args_string":"(count : Int | String | Nil, singular : String, plural = <span class=\"n\">nil</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L89","def":{"name":"pluralize","args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int | String | Nil"},{"name":"singular","doc":null,"default_value":"","external_name":"singular","restriction":"String"},{"name":"plural","doc":null,"default_value":"nil","external_name":"plural","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"word = if ((count == 1) || (count =~ (/^1(\\.0+)?$/)))\n  singular\nelse\n  plural || (Wordsmith::Inflector.pluralize(singular))\nend\n\"#{count || 0} #{word}\"\n"}},{"id":"reset_cycle(name:String=&quot;default&quot;)-instance-method","html_id":"reset_cycle(name:String=&amp;quot;default&amp;quot;)-instance-method","name":"reset_cycle","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":"String"}],"args_string":"(name : String = <span class=\"s\">&quot;default&quot;</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L179","def":{"name":"reset_cycle","args":[{"name":"name","doc":null,"default_value":"\"default\"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"cycle = get_cycle(name)\nif cycle\n  cycle.reset\nend\n"}},{"id":"reset_cycles-instance-method","html_id":"reset_cycles-instance-method","name":"reset_cycles","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L229","def":{"name":"reset_cycles","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@@_cycles = Hash(String, Cycle).new"}},{"id":"to_sentence(list:Enumerable,word_connector:String=&quot;,&quot;,two_word_connector:String=&quot;and&quot;,last_word_connector:String=&quot;,and&quot;):String-instance-method","html_id":"to_sentence(list:Enumerable,word_connector:String=&amp;quot;,&amp;quot;,two_word_connector:String=&amp;quot;and&amp;quot;,last_word_connector:String=&amp;quot;,and&amp;quot;):String-instance-method","name":"to_sentence","doc":"Creates a comma-separated sentence from the provided `Enumerable` *list*\nand appends it to the view.\n\n#### Options:\n\nThe following options allow you to specify how the sentence is constructed:\n  - *word_connector* - A string used to join the elements in *list*s\ncontaining three or more elements (Default is \", \")\n  - *two_word_connector* - A string used to join the elements in *list*s\ncontaining exactly two elements (Default is \" and \")\n  - *last_word_connector* - A string used to join the last element in\n*list*s containing three or more elements (Default is \", and \")\n\n#### Examples:\n\n    to_sentence([] of String)            # => \"\"\n    to_sentence([1])                     # => \"1\"\n    to_sentence([\"one\", \"two\"])          # => \"one and two\"\n    to_sentence({\"one\", \"two\", \"three\"}) # => \"one, two, and three\"\n\n    to_sentence([\"one\", \"two\", \"three\"], word_connector: \" + \")\n    # => one + two, and three\n\n    to_sentence(Set{\"a\", \"z\"}, two_word_connector: \" to \")\n    # => a to z\n\n    to_sentence(1..3, last_word_connector: \", or \")\n    # => 1, 2, or 3\n\nNOTE: By default `#to_sentence` will include a\n[serial comma](https://en.wikipedia.org/wiki/Serial_comma). This can be\noverridden like so:\n\n    to_sentence([\"one\", \"two\", \"three\"], last_word_connector: \" and \")\n    # => one, two and three","summary":"<p>Creates a comma-separated sentence from the provided <code>Enumerable</code> <em>list</em> and appends it to the view.</p>","abstract":false,"args":[{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Enumerable"},{"name":"word_connector","doc":null,"default_value":"\", \"","external_name":"word_connector","restriction":"String"},{"name":"two_word_connector","doc":null,"default_value":"\" and \"","external_name":"two_word_connector","restriction":"String"},{"name":"last_word_connector","doc":null,"default_value":"\", and \"","external_name":"last_word_connector","restriction":"String"}],"args_string":"(list : Enumerable, word_connector : String = <span class=\"s\">&quot;, &quot;</span>, two_word_connector : String = <span class=\"s\">&quot; and &quot;</span>, last_word_connector : String = <span class=\"s\">&quot;, and &quot;</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L141","def":{"name":"to_sentence","args":[{"name":"list","doc":null,"default_value":"","external_name":"list","restriction":"Enumerable"},{"name":"word_connector","doc":null,"default_value":"\", \"","external_name":"word_connector","restriction":"String"},{"name":"two_word_connector","doc":null,"default_value":"\" and \"","external_name":"two_word_connector","restriction":"String"},{"name":"last_word_connector","doc":null,"default_value":"\", and \"","external_name":"last_word_connector","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"list = list.to_a\nif list.size < 3\n  return list.join(two_word_connector)\nend\n\"#{list[0..-2].join(word_connector)}#{last_word_connector}#{list.last}\"\n"}},{"id":"truncate_text(text:String,length:Int32=30,omission:String=&quot;...&quot;,separator:String?=nil):String-instance-method","html_id":"truncate_text(text:String,length:Int32=30,omission:String=&amp;quot;...&amp;quot;,separator:String?=nil):String-instance-method","name":"truncate_text","doc":"Shorten text after a length point.\n\nUnlike `truncate`, this method can be used inside of other tags because it\nreturns a String. See `truncate` method for argument documentation.\n\n```crystal\nlink \"#\" do\n  text truncate_text(\"Four score and seven years ago\", length: 27)\nend\n```\noutputs:\n```html\n<a href=\\\"#\\\">Four score and se...</a>\n```","summary":"<p>Shorten text after a length point.</p>","abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"length","doc":null,"default_value":"30","external_name":"length","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"},{"name":"separator","doc":null,"default_value":"nil","external_name":"separator","restriction":"String | Nil"}],"args_string":"(text : String, length : Int32 = <span class=\"n\">30</span>, omission : String = <span class=\"s\">&quot;...&quot;</span>, separator : String? = <span class=\"n\">nil</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L19","def":{"name":"truncate_text","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"length","doc":null,"default_value":"30","external_name":"length","restriction":"Int32"},{"name":"omission","doc":null,"default_value":"\"...\"","external_name":"omission","restriction":"String"},{"name":"separator","doc":null,"default_value":"nil","external_name":"separator","restriction":"String | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if text.size > length\nelse\n  return text\nend\nlength_with_room_for_omission = length - omission.size\nstop = if separator\n  (text.rindex(separator, length_with_room_for_omission)) || length_with_room_for_omission\nelse\n  length_with_room_for_omission\nend\n\"#{text[0, stop]}#{omission}\"\n"}},{"id":"word_wrap(text:String,line_width:Int32=80,break_sequence:String=&quot;\\n&quot;):String-instance-method","html_id":"word_wrap(text:String,line_width:Int32=80,break_sequence:String=&amp;quot;\\n&amp;quot;):String-instance-method","name":"word_wrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"line_width","doc":null,"default_value":"80","external_name":"line_width","restriction":"Int32"},{"name":"break_sequence","doc":null,"default_value":"\"\\n\"","external_name":"break_sequence","restriction":"String"}],"args_string":"(text : String, line_width : Int32 = <span class=\"n\">80</span>, break_sequence : String = <span class=\"s\">&quot;\\n&quot;</span>) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L99","def":{"name":"word_wrap","args":[{"name":"text","doc":null,"default_value":"","external_name":"text","restriction":"String"},{"name":"line_width","doc":null,"default_value":"80","external_name":"line_width","restriction":"Int32"},{"name":"break_sequence","doc":null,"default_value":"\"\\n\"","external_name":"break_sequence","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"text = (text.split(\"\\n\")).map do |line|\n  line.size > line_width ? (line.gsub(/(.{1,#{line_width}})(\\s+|$)/, \"\\\\1#{break_sequence}\")).strip : line\nend\ntext.join(break_sequence)\n"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/TextHelpers/Cycle","path":"Lucky/TextHelpers/Cycle.html","kind":"class","full_name":"Lucky::TextHelpers::Cycle","name":"Cycle","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/page_helpers/text_helpers.cr","line_number":184,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/TextHelpers","kind":"module","full_name":"Lucky::TextHelpers","name":"TextHelpers"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(values:Array(String))-class-method","html_id":"new(values:Array(String))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(String)"}],"args_string":"(values : Array(String))","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L196","def":{"name":"new","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(*values)-class-method","html_id":"new(*values)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(*values)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L189","def":{"name":"new","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"current_value-instance-method","html_id":"current_value-instance-method","name":"current_value","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L206","def":{"name":"current_value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@values[previous_index]?.to_s"}},{"id":"reset-instance-method","html_id":"reset-instance-method","name":"reset","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L202","def":{"name":"reset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@index = 0"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Returns a string representation of this object.\n\nDescendants must usually **not** override this method. Instead,\nthey must override `to_s(io)`, which must append to the given\nIO object.","summary":"<p>Returns a string representation of this object.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L210","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = @values[@index]?.to_s\n@index = next_index\nvalue\n"}},{"id":"values:Array(String)-instance-method","html_id":"values:Array(String)-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/text_helpers.cr#L186","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@values"}}],"macros":[],"types":[]}]},{"html_id":"github.com/luckyframework/lucky/Lucky/TextResponse","path":"Lucky/TextResponse.html","kind":"class","full_name":"Lucky::TextResponse","name":"TextResponse","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Response","kind":"class","full_name":"Lucky::Response","name":"Response"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/Response","kind":"class","full_name":"Lucky::Response","name":"Response"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/text_response.cr","line_number":10,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"DEFAULT_STATUS","name":"DEFAULT_STATUS","value":"200","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Writes the *content_type*, *status*, and *body* to the *context* for text responses.\n\nThere are two settings in `Lucky::Server.settings` that determine if\nthe text response is gzip encoded; `Lucky::Server.settings.gzip_enabled` and `Lucky::Server.settings.gzip_content_types`.\nThese settings can be adjusted in your Lucky app under config/server.cr","summary":"<p>Writes the <em>content_type</em>, <em>status</em>, and <em>body</em> to the <em>context</em> for text responses.</p>","class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context,content_type:String,body:String,status:Int32?=nil,debug_message:String?=nil)-class-method","html_id":"new(context:HTTP::Server::Context,content_type:String,body:String,status:Int32?=nil,debug_message:String?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"content_type","doc":null,"default_value":"","external_name":"content_type","restriction":"String"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"},{"name":"debug_message","doc":null,"default_value":"nil","external_name":"debug_message","restriction":"String | ::Nil"}],"args_string":"(context : HTTP::Server::Context, content_type : String, body : String, status : Int32? = <span class=\"n\">nil</span>, debug_message : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr#L15","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"content_type","doc":null,"default_value":"","external_name":"content_type","restriction":"String"},{"name":"body","doc":null,"default_value":"","external_name":"body","restriction":"String"},{"name":"status","doc":null,"default_value":"nil","external_name":"status","restriction":"Int32 | ::Nil"},{"name":"debug_message","doc":null,"default_value":"nil","external_name":"debug_message","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context, content_type, body, status, debug_message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"body:String-instance-method","html_id":"body:String-instance-method","name":"body","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr#L13","def":{"name":"body","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@body"}},{"id":"content_type:String-instance-method","html_id":"content_type:String-instance-method","name":"content_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr#L13","def":{"name":"content_type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@content_type"}},{"id":"context:HTTP::Server::Context-instance-method","html_id":"context:HTTP::Server::Context-instance-method","name":"context","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Server::Context","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr#L13","def":{"name":"context","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@context"}},{"id":"debug_message:String?-instance-method","html_id":"debug_message:String?-instance-method","name":"debug_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr#L13","def":{"name":"debug_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@debug_message"}},{"id":"print:Nil-instance-method","html_id":"print:Nil-instance-method","name":"print","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr#L22","def":{"name":"print","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"context.response.content_type = content_type\ncontext.response.status_code = status\nif should_gzip?\n  gzip\nend\ncontext.response.print(body)\n"}},{"id":"status:Int-instance-method","html_id":"status:Int-instance-method","name":"status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/text_response.cr#L29","def":{"name":"status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"(@status || context.response.status_code) || DEFAULT_STATUS"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/TimeHelpers","path":"Lucky/TimeHelpers.html","kind":"module","full_name":"Lucky::TimeHelpers","name":"TimeHelpers","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/page_helpers/time_helpers.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/time_helpers.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"distance_of_time_in_words(from:Time,to:Time):String-instance-method","html_id":"distance_of_time_in_words(from:Time,to:Time):String-instance-method","name":"distance_of_time_in_words","doc":"Returns a `String` with approximate distance in time between `from` and `to`.\n\n```\ndistance_of_time_in_words(Time.utc(2019, 8, 14, 10, 0, 0), Time.utc(2019, 8, 14, 10, 0, 5))\n# => \"5 seconds\"\ndistance_of_time_in_words(Time.utc(2019, 8, 14, 10, 0), Time.utc(2019, 8, 14, 10, 25))\n# => \"25 minutes\"\ndistance_of_time_in_words(Time.utc(2019, 8, 14, 10), Time.utc(2019, 8, 14, 11))\n# => \"an hour\"\ndistance_of_time_in_words(Time.utc(2019, 8, 14), Time.utc(2019, 8, 16))\n# => \"2 days\"\ndistance_of_time_in_words(Time.utc(2019, 8, 14), Time.utc(2019, 10, 4))\n# => \"about a month\"\ndistance_of_time_in_words(Time.utc(2019, 8, 14), Time.utc(2061, 10, 4))\n# => \"almost 42 years\"\n```","summary":"<p>Returns a <code><a href=\"../String.html\">String</a></code> with approximate distance in time between <code>from</code> and <code>to</code>.</p>","abstract":false,"args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"Time"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Time"}],"args_string":"(from : Time, to : Time) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/time_helpers.cr#L18","def":{"name":"distance_of_time_in_words","args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"Time"},{"name":"to","doc":null,"default_value":"","external_name":"to","restriction":"Time"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"minutes = (to - from).minutes\nseconds = (to - from).seconds\nhours = (to - from).hours\ndays = (to - from).days\nif days != 0\n  return distance_in_days(days)\nend\nif hours != 0\n  return distance_in_hours(hours)\nend\nif minutes != 0\n  return distance_in_minutes(minutes)\nend\ndistance_in_seconds(seconds)\n"}},{"id":"time_ago_in_words(from:Time):String-instance-method","html_id":"time_ago_in_words(from:Time):String-instance-method","name":"time_ago_in_words","doc":"Returns a `String` with approximate distance in time between `from` and current moment.\n\n```\ntime_ago_in_words(Time.utc(2019, 8, 30)) # => \"about a month\"\n# gives the same result as:\ndistance_of_time_in_words(Time.utc(2019, 8, 30), Time.utc) # => \"about a month\"\n```\n\nSee more examples in `#distance_of_time_in_words`.","summary":"<p>Returns a <code><a href=\"../String.html\">String</a></code> with approximate distance in time between <code>from</code> and current moment.</p>","abstract":false,"args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"Time"}],"args_string":"(from : Time) : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/page_helpers/time_helpers.cr#L39","def":{"name":"time_ago_in_words","args":[{"name":"from","doc":null,"default_value":"","external_name":"from","restriction":"Time"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"distance_of_time_in_words(from, Time.utc)"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/UnknownAcceptHeaderError","path":"Lucky/UnknownAcceptHeaderError.html","kind":"class","full_name":"Lucky::UnknownAcceptHeaderError","name":"UnknownAcceptHeaderError","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"},{"html_id":"github.com/luckyframework/lucky/Lucky/Error","kind":"class","full_name":"Lucky::Error","name":"Error"},{"html_id":"github.com/luckyframework/lucky/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/errors.cr","line_number":35,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/RenderableError","kind":"module","full_name":"Lucky::RenderableError","name":"RenderableError"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(request:HTTP::Request)-class-method","html_id":"new(request:HTTP::Request)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"}],"args_string":"(request : HTTP::Request)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L40","def":{"name":"new","args":[{"name":"request","doc":null,"default_value":"","external_name":"request","restriction":"HTTP::Request"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(request)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"renderable_message:String-instance-method","html_id":"renderable_message:String-instance-method","name":"renderable_message","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L64","def":{"name":"renderable_message","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"\"Unrecognized Accept header '#{request.headers[\"Accept\"]?}'.\""}},{"id":"renderable_status:Int32-instance-method","html_id":"renderable_status:Int32-instance-method","name":"renderable_status","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L60","def":{"name":"renderable_status","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"406"}},{"id":"request:HTTP::Request-instance-method","html_id":"request:HTTP::Request-instance-method","name":"request","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::Request","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/errors.cr#L38","def":{"name":"request","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@request"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/UploadedFile","path":"Lucky/UploadedFile.html","kind":"class","full_name":"Lucky::UploadedFile","name":"UploadedFile","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/uploaded_file.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/uploaded_file.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"This class represents an uploaded file from a form","summary":"<p>This class represents an uploaded file from a form</p>","class_methods":[],"constructors":[{"id":"new(part:HTTP::FormData::Part)-class-method","html_id":"new(part:HTTP::FormData::Part)-class-method","name":"new","doc":"Creates an UploadedFile using a HTTP::FormData::Part.\n\nThe new file will be assigned the **name** of the\nprovided HTTP::FormData::Part and the **tempfile** will\nbe assigned the body of the HTTP::FormData::Part","summary":"<p>Creates an UploadedFile using a HTTP::FormData::Part.</p>","abstract":false,"args":[{"name":"part","doc":null,"default_value":"","external_name":"part","restriction":"HTTP::FormData::Part"}],"args_string":"(part : HTTP::FormData::Part)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/uploaded_file.cr#L12","def":{"name":"new","args":[{"name":"part","doc":null,"default_value":"","external_name":"part","restriction":"HTTP::FormData::Part"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(part)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"metadata:HTTP::FormData::FileMetadata-instance-method","html_id":"metadata:HTTP::FormData::FileMetadata-instance-method","name":"metadata","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : HTTP::FormData::FileMetadata","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/uploaded_file.cr#L5","def":{"name":"metadata","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HTTP::FormData::FileMetadata","visibility":"Public","body":"@metadata"}},{"id":"name:String-instance-method","html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/uploaded_file.cr#L3","def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"id":"path:String-instance-method","html_id":"path:String-instance-method","name":"path","doc":"Returns the path of the File as a String\n\n```\nuploaded_file_object.path # => String\n```","summary":"<p>Returns the path of the File as a String</p>","abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/uploaded_file.cr#L26","def":{"name":"path","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@tempfile.path"}},{"id":"tempfile:File-instance-method","html_id":"tempfile:File-instance-method","name":"tempfile","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : File","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/uploaded_file.cr#L4","def":{"name":"tempfile","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"File","visibility":"Public","body":"@tempfile"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/VerifyAcceptsFormat","path":"Lucky/VerifyAcceptsFormat.html","kind":"module","full_name":"Lucky::VerifyAcceptsFormat","name":"VerifyAcceptsFormat","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/verify_accepts_format.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/verify_accepts_format.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/Action","kind":"class","full_name":"Lucky::Action","name":"Action"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Configure what types of formats your action responds to","summary":"<p>Configure what types of formats your action responds to</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"clients_desired_format:Symbol-instance-method","html_id":"clients_desired_format:Symbol-instance-method","name":"clients_desired_format","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Symbol","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/verify_accepts_format.cr#L3","def":{"name":"clients_desired_format","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol","visibility":"Public","body":""}}],"macros":[{"id":"accepted_formats(formats)-macro","html_id":"accepted_formats(formats)-macro","name":"accepted_formats","doc":"Set what formats the Action accepts.\n\nSame as `accepted_formats` but this one only accepts one format and no\ndefault. If you pass less an empty array or more than one format, you must\nuse the other `accepted_formats` so you can tell Lucky what the `default`\nformat should be.\n\nIf something other than the accepts formats are request, Lucky will raise\na `Lucky::NotAcceptableError` error.\n\n```\n# Defaults is set to :html since there is just one format\naccepted_formats [:html]\n\n# Raises at compile time because Lucky needs to know which format is the default\naccepted_formats [:html, :json]\n\n# Give Lucky the default if ore than one format is accepted\naccepted_formats [:html, :json], default: :html\n```","summary":"<p>Set what formats the Action accepts.</p>","abstract":false,"args":[{"name":"formats","doc":null,"default_value":"","external_name":"formats","restriction":""}],"args_string":"(formats)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/verify_accepts_format.cr#L33","def":{"name":"accepted_formats","args":[{"name":"formats","doc":null,"default_value":"","external_name":"formats","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if !formats.is_a?(ArrayLiteral) %}\n      {% raise(\"#{@type} 'accepted_formats' should be an array of Symbols. Example: [:html, :json]\") %}\n    {% end %}\n\n\n    \n{% if formats.size == 1 %}\n      accepted_formats {{ formats }}, default: {{ formats.first }}\n    {% else %}\n      {% formats.raise(\"#{@type} must pass a default to 'accepted_formats'. Example: accepted_formats [:html, :json], default: :html\") %}\n    {% end %}\n\n  \n"}},{"id":"accepted_formats(formats,default)-macro","html_id":"accepted_formats(formats,default)-macro","name":"accepted_formats","doc":"Set what formats the Action accepts.\n\nIf something other than the accepts formats are request, Lucky will raise\na `Lucky::NotAcceptableError` error.\n\n```\naccepted_formats [:html, :json], default: :json\n```","summary":"<p>Set what formats the Action accepts.</p>","abstract":false,"args":[{"name":"formats","doc":null,"default_value":"","external_name":"formats","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"args_string":"(formats, default)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/verify_accepts_format.cr#L53","def":{"name":"accepted_formats","args":[{"name":"formats","doc":null,"default_value":"","external_name":"formats","restriction":""},{"name":"default","doc":null,"default_value":"","external_name":"default","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if !formats.is_a?(ArrayLiteral) %}\n      {% formats.raise(\"#{@type} 'accepted_formats' should be an array of Symbols. Example: [:html, :json]\") %}\n    {% end %}\n\n\n    \n{% if !default.is_a?(SymbolLiteral) %}\n      {% formats.raise(\"#{@type} default format should be a symbol. Example: :html\") %}\n    {% end %}\n\n\n    def self._accepted_formats\n      \n{{ formats }}\n\n    \nend\n    default_format \n{{ default }}\n\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/WelcomePage","path":"Lucky/WelcomePage.html","kind":"class","full_name":"Lucky::WelcomePage","name":"WelcomePage","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"},{"html_id":"github.com/luckyframework/lucky/Lucky/WithDefaults","kind":"module","full_name":"Lucky::WithDefaults","name":"WithDefaults"},{"html_id":"github.com/luckyframework/lucky/Lucky/RenderIfDefined","kind":"module","full_name":"Lucky::RenderIfDefined","name":"RenderIfDefined"},{"html_id":"github.com/luckyframework/lucky/Lucky/HelpfulParagraphError","kind":"module","full_name":"Lucky::HelpfulParagraphError","name":"HelpfulParagraphError"},{"html_id":"github.com/luckyframework/lucky/Lucky/MountComponent","kind":"module","full_name":"Lucky::MountComponent","name":"MountComponent"},{"html_id":"github.com/luckyframework/lucky/Lucky/ForgeryProtectionHelpers","kind":"module","full_name":"Lucky::ForgeryProtectionHelpers","name":"ForgeryProtectionHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/TimeHelpers","kind":"module","full_name":"Lucky::TimeHelpers","name":"TimeHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLTextHelpers","kind":"module","full_name":"Lucky::HTMLTextHelpers","name":"HTMLTextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/TextHelpers","kind":"module","full_name":"Lucky::TextHelpers","name":"TextHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/NumberToCurrency","kind":"module","full_name":"Lucky::NumberToCurrency","name":"NumberToCurrency"},{"html_id":"github.com/luckyframework/lucky/Lucky/AssetHelpers","kind":"module","full_name":"Lucky::AssetHelpers","name":"AssetHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/Assignable","kind":"module","full_name":"Lucky::Assignable","name":"Assignable"},{"html_id":"github.com/luckyframework/lucky/Lucky/SpecialtyTags","kind":"module","full_name":"Lucky::SpecialtyTags","name":"SpecialtyTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/SelectHelpers","kind":"module","full_name":"Lucky::SelectHelpers","name":"SelectHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/InputHelpers","kind":"module","full_name":"Lucky::InputHelpers","name":"InputHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/LabelHelpers","kind":"module","full_name":"Lucky::LabelHelpers","name":"LabelHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/FormHelpers","kind":"module","full_name":"Lucky::FormHelpers","name":"FormHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Lucky/LinkHelpers","kind":"module","full_name":"Lucky::LinkHelpers","name":"LinkHelpers"},{"html_id":"github.com/luckyframework/lucky/Lucky/CustomTags","kind":"module","full_name":"Lucky::CustomTags","name":"CustomTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"},{"html_id":"github.com/luckyframework/lucky/Lucky/BaseTags","kind":"module","full_name":"Lucky::BaseTags","name":"BaseTags"},{"html_id":"github.com/luckyframework/lucky/Lucky/CheckTagContent","kind":"module","full_name":"Lucky::CheckTagContent","name":"CheckTagContent"},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLPage","kind":"module","full_name":"Lucky::HTMLPage","name":"HTMLPage"},{"html_id":"github.com/luckyframework/lucky/Habitat/SettingsHelpers","kind":"module","full_name":"Habitat::SettingsHelpers","name":"SettingsHelpers"},{"html_id":"github.com/luckyframework/lucky/Habitat/TempConfig","kind":"module","full_name":"Habitat::TempConfig","name":"TempConfig"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/welcome_page.cr","line_number":2,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/welcome_page.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"ASSIGNS","name":"ASSIGNS","value":"[context : HTTP::Server::Context] of Nil","doc":null,"summary":null},{"id":"SETTINGS","name":"SETTINGS","value":"{} of Nil => Nil","doc":null,"summary":null},{"id":"SIGN_UP_ACTION","name":"SIGN_UP_ACTION","value":"SignUps::New","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"},{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLPage","kind":"module","full_name":"Lucky::HTMLPage","name":"HTMLPage"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"This is the welcome page shown to users when they first initialize a new Lucky project","summary":"<p>This is the welcome page shown to users when they first initialize a new Lucky project</p>","class_methods":[],"constructors":[{"id":"new(context:HTTP::Server::Context,**unused_exposures)-class-method","html_id":"new(context:HTTP::Server::Context,**unused_exposures)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"args_string":"(context : HTTP::Server::Context, **unused_exposures)","source_link":null,"def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"}],"double_splat":{"name":"unused_exposures","doc":null,"default_value":"","external_name":"unused_exposures","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context, **unused_exposures)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(context:HTTP::Server::Context,*args,**named_args)-class-method","html_id":"new(context:HTTP::Server::Context,*args,**named_args)-class-method","name":"new","doc":"Accept a context and all other exposed data","summary":"<p>Accept a context and all other exposed data</p>","abstract":false,"args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(context : HTTP::Server::Context, *args, **named_args)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/welcome_page.cr#L8","def":{"name":"new","args":[{"name":"context","doc":null,"default_value":"","external_name":"context","restriction":"HTTP::Server::Context"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(context, *args, **named_args)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"render-instance-method","html_id":"render-instance-method","name":"render","doc":"Renders the Welcome Page","summary":"<p>Renders the Welcome Page</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/welcome_page.cr#L18","def":{"name":"render","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"html_doctype\nhtml(lang: \"en\") do\n  head do\n    utf8_charset\n    title(\"Welcome to Lucky\")\n    load_lato_font\n    normalize_styles\n    welcome_page_styles\n  end\n  body do\n    div(class: \"container\") do\n      lucky_logo\n      render_buttons\n      render_help\n    end\n  end\nend\n"}}],"macros":[{"id":"render_auth_button-macro","html_id":"render_auth_button-macro","name":"render_auth_button","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/welcome_page.cr#L11","def":{"name":"render_auth_button","args":[],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% if SIGN_UP_ACTION.resolve? %}\n      a \"View your new app\", href: {{ SIGN_UP_ACTION }}.path, class: \"btn\"\n    {% end %}\n\n  \n"}}],"types":[]},{"html_id":"github.com/luckyframework/lucky/Lucky/WithDefaults","path":"Lucky/WithDefaults.html","kind":"module","full_name":"Lucky::WithDefaults","name":"WithDefaults","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lucky/tags/with_defaults.cr","line_number":4,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/with_defaults.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/luckyframework/lucky/Lucky/HTMLBuilder","kind":"module","full_name":"Lucky::HTMLBuilder","name":"HTMLBuilder"}],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky","kind":"module","full_name":"Lucky","name":"Lucky"},"doc":"Set up defaults arguments for HTML tags.\n\nThis is automatically included in Pages and Components.","summary":"<p>Set up defaults arguments for HTML tags.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"with_defaults(**named_args,&)-instance-method","html_id":"with_defaults(**named_args,&amp;)-instance-method","name":"with_defaults","doc":"This is typically used in components and helper methods to set up defaults for\nreusable components.\n\nExample in a page or component:\n\n   with_defaults field: form.email, class: \"input\" do |html|\n     html.email_input placeholder: \"Email\"\n   end\n\nIs the same as:\n\n    email_input field: form.email, class: \"input\", placeholder: \"Email\"","summary":"<p>This is typically used in components and helper methods to set up defaults for reusable components.</p>","abstract":false,"args":[],"args_string":"(**named_args, &)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/with_defaults.cr#L17","def":{"name":"with_defaults","args":[],"double_splat":{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":""},"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"OptionMerger.new(page_context: self, named_args: named_args).run do |html|\n  yield html\nend"}}],"macros":[],"types":[{"html_id":"github.com/luckyframework/lucky/Lucky/WithDefaults/OptionMerger","path":"Lucky/WithDefaults/OptionMerger.html","kind":"class","full_name":"Lucky::WithDefaults::OptionMerger(T, V)","name":"OptionMerger","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lucky/tags/with_defaults.cr","line_number":23,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/with_defaults.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/luckyframework/lucky/Lucky/WithDefaults","kind":"module","full_name":"Lucky::WithDefaults","name":"WithDefaults"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(page_context:T,named_args:V)-class-method","html_id":"new(page_context:T,named_args:V)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"page_context","doc":null,"default_value":"","external_name":"page_context","restriction":"T"},{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":"V"}],"args_string":"(page_context : T, named_args : V)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/with_defaults.cr#L24","def":{"name":"new","args":[{"name":"page_context","doc":null,"default_value":"","external_name":"page_context","restriction":"T"},{"name":"named_args","doc":null,"default_value":"","external_name":"named_args","restriction":"V"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = OptionMerger(T, V).allocate\n_.initialize(page_context, named_args)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"run(&)-instance-method","html_id":"run(&amp;)-instance-method","name":"run","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/with_defaults.cr#L27","def":{"name":"run","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"yield self"}}],"macros":[{"id":"method_missing(call)-macro","html_id":"method_missing(call)-macro","name":"method_missing","doc":null,"summary":null,"abstract":false,"args":[{"name":"call","doc":null,"default_value":"","external_name":"call","restriction":""}],"args_string":"(call)","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/lucky/tags/with_defaults.cr#L31","def":{"name":"method_missing","args":[{"name":"call","doc":null,"default_value":"","external_name":"call","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      overridden_html_class = nil\n\n      \n{% named_args = call.named_args %}\n\n      \n{% if named_args %}\n        {% if call.named_args.any? do |arg|\n  arg.name == (:class)\nend %}\n          {% raise(\"\\n\\nUse 'replace_class' or 'append_class' instead of 'class'.\\n\\nCorrect example:\\n\\n    with_defaults class: \\\"default\\\" do |html|\\n      # Use 'replace_class' or 'append_class' here\\n      html.div replace_class: \\\"replaced\\\"\\n    end\\n\\nIncorrect example:\\n\\n    with_defaults class: \\\"default\\\" do |html|\\n      # Won't work with 'class'\\n      html.div class: \\\"replaced\\\"\\n    end\\n\\n-----------------\\n\") %}\n        {% end %}\n\n        {% appended_class_arg = call.named_args.find do |arg|\n  arg.name == (:append_class)\nend %}\n        {% if appended_class_arg %}\n          original_class = if klass = @named_args[:class]?\n            # Append an empty space if there is a default class that\n            # we are appending to\n            \"#{klass} \"\n          else\n            # Otherwise leave it empty\n            \"\"\n          end\n\n          overridden_html_class = \"#{original_class}#{{{ appended_class_arg.value }}}\"\n        {% end %}\n        {% named_args = named_args.reject do |arg|\n  arg.name == (:append_class)\nend %}\n\n        {% replace_class_arg = call.named_args.find do |arg|\n  arg.name == (:replace_class)\nend %}\n        {% if replace_class_arg %}\n          overridden_html_class = \"#{{{ replace_class_arg.value }}}\"\n        {% end %}\n        {% named_args = named_args.reject do |arg|\n  arg.name == (:replace_class)\nend %}\n      {% end %}\n\n\n      nargs = @named_args\n{% if named_args %}.merge(\n        {% for arg in named_args %}\n          {{ arg.name }}: {{ arg.value }},\n        {% end %}\n      )\n\n      # If there is no default class and we want to append/replace one, then\n      # the compiler blows up because the @named_args type is a Union. Where\n      # one type has the 'class' key and the other doesn't.\n      #\n      # We fix that by making sure there is always a class key if we try to\n      # append/replace a class.\n      {% if appended_class_arg || replace_class_arg %}\n        nargs = nargs.merge(class: \"\")\n      {% end %}\n\n      if overridden_html_class\n        nargs = nargs.merge(class: overridden_html_class)\n      end\n      {% end %}\n\n\n      args = Tuple.new(\n{% if call.args %}\n        {% for arg in call.args %}\n          {{ arg }},\n        {% end %}\n      {% end %}\n)\n\n      @page_context.\n{{ call.name }}\n *args, **nargs  \n{{ call.block }}\n\n    \n"}}],"types":[]}]}]},{"html_id":"github.com/luckyframework/lucky/Object","path":"Object.html","kind":"class","full_name":"Object","name":"Object","abstract":true,"superclass":null,"ancestors":[{"html_id":"github.com/luckyframework/lucky/Lucky/QuickDef","kind":"module","full_name":"Lucky::QuickDef","name":"QuickDef"},{"html_id":"github.com/luckyframework/lucky/Colorize/ObjectExtensions","kind":"module","full_name":"Colorize::ObjectExtensions","name":"ObjectExtensions"}],"locations":[{"filename":"charms/object.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/object.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Colorize/ObjectExtensions","kind":"module","full_name":"Colorize::ObjectExtensions","name":"ObjectExtensions"},{"html_id":"github.com/luckyframework/lucky/Lucky/QuickDef","kind":"module","full_name":"Lucky::QuickDef","name":"QuickDef"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"`Object` is the base type of all Crystal objects.","summary":"<p><code><a href=\"Object.html\">Object</a></code> is the base type of all Crystal objects.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/luckyframework/lucky/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/avram/src/avram/charms/string_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/charms/string_extensions.cr"},{"filename":"charms/string_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/string_extensions.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/luckyframework/lucky/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['ï¿½', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_param:String-instance-method","html_id":"to_param:String-instance-method","name":"to_param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/string_extensions.cr#L2","def":{"name":"to_param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self"}}],"macros":[],"types":[]},{"html_id":"github.com/luckyframework/lucky/UUID","path":"UUID.html","kind":"struct","full_name":"UUID","name":"UUID","abstract":false,"superclass":{"html_id":"github.com/luckyframework/lucky/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/luckyframework/lucky/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/luckyframework/lucky/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/luckyframework/lucky/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/avram/src/avram/charms/uuid_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/charms/uuid_extensions.cr"},{"filename":"lib/avram/src/avram/blank_extensions.cr","line_number":49,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/lib/avram/src/avram/blank_extensions.cr"},{"filename":"charms/uuid_extensions.cr","line_number":1,"url":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/uuid_extensions.cr"}],"repository_name":"github.com/luckyframework/lucky","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Represents a UUID (Universally Unique IDentifier).","summary":"<p>Represents a UUID (Universally Unique IDentifier).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"to_param:String-instance-method","html_id":"to_param:String-instance-method","name":"to_param","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/luckyframework/lucky/blob/6a814433e48934ce4440248072de4f89021d3880/src/charms/uuid_extensions.cr#L2","def":{"name":"to_param","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"self.to_s"}}],"macros":[],"types":[]}]}})